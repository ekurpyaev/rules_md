		xdtoДокумент = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, ОбъектСообщение.Body);
		ПараметрыОбработки = грОбработкаПакетовИнтеграции.ПолучитьПараметрыОбработкиСообщения(ОбъектСообщение, xdtoДокумент);

		ВидИдентификатора = "УНИКУМGUID";
		ИмяТипаОбъекта = "Документ.ЗаказПоставщику";

		ТаблицаИдентификаторовПотоков = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуИдентификаторыПотоковESB();

		НенайденныеОбъекты = грОбработкаПакетовИнтеграции.СоздатьТаблицуНенайденныхОбъектов();

		КэшСсылок = Новый Соответствие;
		КоличествоЗаписейВБлоке = 0;

		Рубли =  Справочники.Валюты.НайтиПоКоду("643");
		НизкийПриоритет = Справочники.Приоритеты.НайтиПоНаименованию("Низкий");

		//Курпяев Е.Д.+
		ПараметрыОбработки.РазмерБлока = 1;
		//Курпяев Е.Д.-

		НачатьТранзакцию();

		Попытка 
			
			Последовательность = xdtoДокумент.Список.Последовательность();
			
			//+++Логирование прогресса загрузки
			КоличествоЭлементов = Последовательность.Количество();
			ЗагруженоОбъектов = 0;
			//---Логирование прогресса загрузки
			
			//++ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617 
			СписокДокументов_ОбработкаПроведения = Новый Массив;
			//--ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617 
			
			Для Индекс = 0 По Последовательность.Количество()-1 Цикл
				xdtoОбъект = Последовательность.ПолучитьЗначение(Индекс);
				
				//сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Предупреждение,
				//			 "Datareon. Обработка сообщения. Прогресс загрузки пакета." + Идентификатор +", Индекс " + Индекс ,  "Datareon. Обработка сообщения. Прогресс загрузки пакета." + Идентификатор +", Индекс " + Индекс);
				
				//Если Индекс = 3 Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Начало = ОценкаПроизводительности.НачатьЗамерВремени();
				
				Ключ = xdtoОбъект.Ссылка;
				
				// Блокировка 
				Если НЕ грОбработкаПакетовИнтеграции.ЗаблокироватьКлючСПопытками(
					Ключ, ВидИдентификатора, ПараметрыОбработки.КоличествоПопытокБлокировки
					) Тогда 
					
					Если ПараметрыОбработки.МассоваяЗагрузка Тогда 
						ВызватьИсключение "Не удалось выполнить блокировку! Ключ: " + Ключ;
					Иначе
						ОтменитьТранзакцию();
						СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
						Задержка = ПараметрыОбработки.ЗадержкаПриНеудачнойБлокировке;
						Перейти ~Возврат;
					КонецЕсли;
				КонецЕсли;
				
				//+++ GRADUM, Теплоухов А.В. 2021_04_01 Задача № 20489
				ВерсияОбъекта = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Версия", "Число",, 0);
				//--- GRADUM, Теплоухов А.В. 2021_04_01 Задача № 20489}
				
				// Поиск объекта
				сткРезультатПоиска = грОбработкаПакетовИнтеграции.ПолучитьОбъектПоКлючуТПК(
				Ключ, ИмяТипаОбъекта, ВидИдентификатора, ПараметрыОбработки, ВерсияОбъекта
				);
				
				Если НЕ сткРезультатПоиска.ИзменениеРазрешено Тогда
				//сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Предупреждение,
				//			 "Datareon. Обработка сообщения. Прогресс загрузки пакета." + Идентификатор +", Индекс " + Индекс ,  "Datareon. Обработка сообщения. Прогресс загрузки пакета." + Идентификатор +", ИзменениеРазрешено " + сткРезультатПоиска.ИзменениеРазрешено); 
					Перейти ~ПерейтиКСледующему;
				КонецЕсли;
			
				//+++ GRADUM, Теплоухов А.В. 2021_03_21 Задача № 20657{
				НаименованиеТипаОбъекта = "Документ.Заказ";
				ПараметрыВходящегоПакета = Новый Структура("КлючОснования", Ключ); 
				Выполнить(грОбработкаПакетовИнтеграции.ПолучитьТекстОбработчика("Служебный_СформироватьВходящийПакетОбъектаЕРП", 
					Перечисления.сшпТипыИнтеграции.Исходящая));
				//--- GRADUM, Теплоухов А.В. 2021_03_21 Задача № 20657}
				
				ДокСсылка = сткРезультатПоиска.Ссылка;
				НайденЗаказПоставщику = ЗначениеЗаполнено(ДокСсылка);
				Если НайденЗаказПоставщику Тогда
					ДокОбъект = ДокСсылка.ПолучитьОбъект();
				Иначе
					ДокОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
					ДокОбъект.УстановитьСсылкуНового(Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор));
				КонецЕсли;
				ДокСсылка = ДокОбъект.Ссылка;
				
				ВыполнитьПереходКСледующему = Ложь;
				Если НайденЗаказПоставщику Тогда
					//ТекСтатус = РегистрыСведений.грСтатусыЗаказов.ПолучитьТекущийСтатусЗаказаПоставщику(ДокСсылка);
					//ВыполнитьПереходКСледующему = ТекСтатус = Справочники.грСтатусыЗаказа.Отменен 
					//	Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "грЕстьКорректировка", Истина);
				КонецЕсли;
			
				Если ВыполнитьПереходКСледующему Тогда
					//КоличествоЗаписейВБлоке = КоличествоЗаписейВБлоке + 1;
					//сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Предупреждение,
					//		 "Datareon. Обработка сообщения. Прогресс загрузки пакета." + Идентификатор +", Индекс " + Индекс ,  "Datareon. Обработка сообщения. Прогресс загрузки пакета." + Идентификатор +", Корректировка " + Истина);
					грОбработкаПакетовИнтеграции.УстановитьКлюч_v2(ДокСсылка, Ключ, ПараметрыОбработки.Отправитель,
						Новый Структура("ВидИдентификатораСтрока, ДатаОбновления, Версия", ВидИдентификатора, ПараметрыОбработки.ВремяПакета, ВерсияОбъекта));
					Перейти ~ПерейтиКСледующему;
				КонецЕсли;
				
				ПроверяемоеЗначение = ДокСсылка;
				ОбработатьСледующий = Ложь;
				Выполнить(грОбработкаПакетовИнтеграции.ПолучитьТекстОбработчика("УНИКУМ_ПропуститьЗагрузкуПроведенногоОбъекта", 
				Перечисления.сшпТипыИнтеграции.Исходящая));
				
				Если ОбработатьСледующий Тогда
					Продолжить;
				КонецЕсли;
				
				//+++ Градум; Курпяев Е.Д. ; 23.10.2020; Дозапросы
				ДопПараметрыДозапросов = Новый Структура;
				ДопПараметрыДозапросов.Вставить( "ID", Ключ );
				ДопПараметрыДозапросов.Вставить( "Класс", КлассСообщения );
				//--- Градум; Курпяев Е.Д. ; 23.10.2020; Дозапросы
				
				ДокОбъект.Дата							= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Дата", "Дата",, ТекущаяДата());
				ДокОбъект.Номер							= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Номер");
				ДокОбъект.ПометкаУдаления				= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "ПометкаУдаления", "Булево");
				ДокОбъект.грПроведенВременная			= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Проведен", "Булево");
				ДокОбъект.грПодтвержденнаяДатаОтгрузки	= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "ПодтвержденнаяДатаОтгрузки", "Дата");
				ДокОбъект.ДатаПоступления				= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "ДатаПоступления", "Дата");
				
				// + Семейкин Д.С. 18.12.2020
				ДокОбъект.грНомерУникум = ДокОбъект.Номер;
				// - Семейкин Д.С. 18.12.2020
				
				ДокОбъект.СуммаДокумента =  грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "СуммаДокумента", "Число");
				ДокОбъект.ЦенаВключаетНДС =  грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "ЦенаВключаетНДС", "Булево");
				
				ДокОбъект.Сценарий = Справочники.грСценарииФормированияМастерСтрок.Закупки;
				
				//Договор
				ДокОбъект.Договор = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Договор,
				"Справочник.ДоговорыКонтрагентов", ВидИдентификатора, "229", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов );
				
				//Контрагент
				ДокОбъект.Контрагент = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Контрагент,
				"Справочник.Контрагенты", ВидИдентификатора, "224", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов );
				
				//Автор
				ДокОбъект.Автор = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Автор, 
				"Справочник.Пользователи", ВидИдентификатора, "319", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов );
				
				//Организация
				ДокОбъект.Организация = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Организация,
				"Справочник.Организации", ВидИдентификатора, "228", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов );
				
				//грБизнесПартнер
				ДокОбъект.грБизнесПартнер = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Контрагент, 
				"Справочник.грБизнесПартнеры", ВидИдентификатора, "236", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов );
				
				//БанковскийСчет
				ДокОбъект.БанковскийСчет = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.БанковскийСчет, 
				"Справочник.БанковскиеСчетаОрганизаций", ВидИдентификатора, "225", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов );
				
				ДокОбъект.Партнер = Неопределено;
				Если ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда 
					КлючКэша = "Справочники.Контаргенты.Партнер" + xdtoОбъект.Контрагент;
					Партнер =  КэшСсылок[КлючКэша];
					Если Партнер = Неопределено Тогда 
						
						РезультатПоискаПартнер =  грОбработкаПакетовИнтеграции.ПолучитьСоздатьУзелСКСПоБизнесПартнеру(
						ДокОбъект.грБизнесПартнер,
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Контрагент,"Наименование"), 
						ВидИдентификатора,
						ПараметрыОбработки.КоличествоПопытокБлокировки
						);
						
						Если РезультатПоискаПартнер.ОшибкаБлокировки Тогда
							Если ПараметрыОбработки.МассоваяЗагрузка Тогда 
								ВызватьИсключение "Не удалось выполнить блокировку бизнес партнер!";
							Иначе
								ОтменитьТранзакцию();
								СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
								Задержка = ПараметрыОбработки.ЗадержкаПриНеудачнойБлокировке;
								Перейти ~Возврат;
							КонецЕсли
						КонецЕсли;
						ДокОбъект.Партнер = РезультатПоискаПартнер.Ссылка;
						
						КэшСсылок[КлючКэша] = ДокОбъект.Партнер;
					Иначе
						ДокОбъект.Партнер =  Партнер;
					КонецЕсли;
					
				КонецЕсли;
				
				ДокОбъект.Валюта = Неопределено;
				Если грОбработкаПакетовИнтеграции.РеквизитЕстьВПакете(xdtoОбъект, "Валюта", Истина) Тогда 
					ДокОбъект.Валюта = Справочники.Валюты.НайтиПоКоду(грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Валюта"));
					
					Если НЕ ЗначениеЗаполнено(ДокОбъект.Валюта) Тогда 
						ВызватьИсключение "Не найдена валюта с кодом "+xdtoОбъект.Валюта+"!";
					КонецЕсли;
				КонецЕсли;
				
				ДокОбъект.ВариантПриемкиТоваров	= Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
				ДокОбъект.Комментарий			= "Документ <Заказ на поставку №" + ДокОбъект.Номер + " от " +  Формат(ДокОбъект.Дата, "dd.mm.yy") + "> загружен из базы 1С:Уникум";
				
				ДокОбъект.Менеджер				= ДокОбъект.Автор;
				ДокОбъект.ПоступлениеОднойДатой	= Истина;
				ДокОбъект.Приоритет				= НизкийПриоритет;
				ДокОбъект.Согласован			= Ложь;
				ДокОбъект.Статус				= ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Согласован");
				
				ДокОбъект.ФормаОплаты			= ?(ЗначениеЗаполнено(ДокОбъект.БанковскийСчет), Перечисления.ФормыОплаты.Безналичная, Перечисления.ФормыОплаты.Наличная);
				ДокОбъект.грВалютаУпр			= ДокОбъект.Валюта;
				ДокОбъект.грКроссКурс			= 1;
				
				ДокОбъект.грПланируемаяДатаОтгрузки = ?(ДокОбъект.грПодтвержденнаяДатаОтгрузки = Дата(1,1,1), ДокОбъект.Дата, ДокОбъект.грПодтвержденнаяДатаОтгрузки);
				Если ДокОбъект.ДатаПоступления = Дата(1,1,1) Тогда
					ДокОбъект.ДатаПоступления = ДокОбъект.грПланируемаяДатаОтгрузки;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДокОбъект.грФактическаяДатаРозлива) Тогда
					ДокОбъект.грПомещениеПоставщика = Справочники.грНастройкиПоУмолчанию.ПолучитьЗначениеНастройки("ПомещениеПоставщика");
				КонецЕсли;
				
				ДокОбъект.Проведен = Ложь;
				
				Если ЗначениеЗаполнено(ДокОбъект.грПомещениеПоставщика) Тогда
					
					КлючКэша = "грПомещениеПоставщика.Владелец."+Строка(ДокОбъект.грПомещениеПоставщика.УникальныйИдентификатор());
					грСкладПоставщика = КэшСсылок[КлючКэша];
					
					Если грСкладПоставщика = Неопределено Тогда 
						ДокОбъект.грСкладПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.грПомещениеПоставщика, "Владелец");
						КэшСсылок[КлючКэша] = ДокОбъект.грСкладПоставщика;
					Иначе
						ДокОбъект.грСкладПоставщика = грСкладПоставщика;
					КонецЕсли;
					
				КонецЕсли;
				
				ДокОбъект.грПоставщикГТД = Неопределено;
				Если ЗначениеЗаполнено(xdtoОбъект.ПоставщикГТД) И xdtoОбъект.Контрагент <> xdtoОбъект.ПоставщикГТД Тогда
					
					ДокОбъект.грПоставщикГТД = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(
					xdtoОбъект.ПоставщикГТД, 
					"Справочник.Контрагенты", 
					ВидИдентификатора,
					"224",
					НенайденныеОбъекты,
					КэшСсылок,
					ДопПараметрыДозапросов );
					
				КонецЕсли;
				
				ДокОбъект.грПоставкаЧерезПосредника = ЗначениеЗаполнено(ДокОбъект.грПоставщикГТД);
				
				ХозяйственнаяОперация = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "ХозяйственнаяОперация",,Истина);
				Если ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
					Если ХозяйственнаяОперация = "928" Или ХозяйственнаяОперация = "967" 
						//+++ GRADUM, Теплоухов А.В. 2020_10_02 Задача № 16627{
						Или ХозяйственнаяОперация = "РФ927" 
						//--- GRADUM, Теплоухов А.В. 2020_10_02 Задача № 16627}
						Тогда
						ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
						ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
					ИначеЕсли ХозяйственнаяОперация = "927" Тогда
						ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
						ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
					ИначеЕсли ХозяйственнаяОперация = "ТС927" Тогда	
						ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
						ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
						//+++ GRADUM, Теплоухов А.В. 2020_10_02 Задача № 16627{
						//ИначеЕсли ХозяйственнаяОперация = "РФ927" Тогда	
						//	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути;
						//	ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;	
						//--- GRADUM, Теплоухов А.В. 2020_10_02 Задача № 16627}
					КонецЕсли;
				КонецЕсли;	
				
				КлючКэша = "Партнер.Подразделение."+Строка(ДокОбъект.Партнер.УникальныйИдентификатор());
				Подразделение = КэшСсылок[КлючКэша];
				Если Подразделение = Неопределено Тогда 
					ДокОбъект.Подразделение = грОбработкаПакетовИнтеграции.ПодразделениеПоУзлуСКС(ДокОбъект.Партнер);
					КэшСсылок[КлючКэша] = ДокОбъект.Подразделение;
				Иначе
					ДокОбъект.Подразделение = Подразделение;
				КонецЕсли;
				
				КлючКэша = "Договор.Соглашение." + Строка(ДокОбъект.Договор.УникальныйИдентификатор());
				Соглашение = КэшСсылок[КлючКэша];
				Если Соглашение = Неопределено Тогда 
					ДокОбъект.Соглашение = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Договор,
					"Справочник.СоглашенияСПоставщиками", ВидИдентификатора, "229", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов );
					КэшСсылок[КлючКэша] = ДокОбъект.Соглашение;
				Иначе
					ДокОбъект.Соглашение = Соглашение;
				КонецЕсли;
				
				КлючКэша = "Договор.УсловиеОплаты." + Строка(ДокОбъект.Соглашение.УникальныйИдентификатор());
				УсловиеОплаты = КэшСсылок[КлючКэша];
				Если УсловиеОплаты = Неопределено 
					И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	СоглашенияСПоставщикамигрУсловияОплаты.УсловиеОплаты КАК УсловиеОплаты
					|ИЗ
					|	Справочник.СоглашенияСПоставщиками.грУсловияОплаты КАК СоглашенияСПоставщикамигрУсловияОплаты
					|ГДЕ
					|	СоглашенияСПоставщикамигрУсловияОплаты.Ссылка = &Соглашение
					|	И СоглашенияСПоставщикамигрУсловияОплаты.Основное
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	СоглашенияСПоставщикамигрУсловияОплаты.УсловиеОплаты
					|ИЗ
					|	Справочник.СоглашенияСПоставщиками.грУсловияОплаты КАК СоглашенияСПоставщикамигрУсловияОплаты
					|ГДЕ
					|	СоглашенияСПоставщикамигрУсловияОплаты.Ссылка = &Соглашение
					|	И НЕ СоглашенияСПоставщикамигрУсловияОплаты.Основное
					|	И НЕ СоглашенияСПоставщикамигрУсловияОплаты.Ссылка В
					|				(ВЫБРАТЬ
					|					СоглашенияСПоставщикамигрУсловияОплаты.Ссылка КАК Ссылка
					|				ИЗ
					|					Справочник.СоглашенияСПоставщиками.грУсловияОплаты КАК СоглашенияСПоставщикамигрУсловияОплаты
					|				ГДЕ
					|					СоглашенияСПоставщикамигрУсловияОплаты.НомерСтроки > 1
					|					И СоглашенияСПоставщикамигрУсловияОплаты.Ссылка = &Соглашение)";
					Запрос.УстановитьПараметр("Соглашение", ДокОбъект.Соглашение);
					
					Результат = Запрос.Выполнить();
					
					Если Не Результат.Пустой() Тогда
						Выборка = Результат.Выбрать();
						Выборка.Следующий();
						ДокОбъект.грУсловиеОплаты = Выборка.УсловиеОплаты;
					КонецЕсли;
					
					КэшСсылок[КлючКэша] = ДокОбъект.грУсловиеОплаты;
					
				Иначе
					ДокОбъект.грУсловиеОплаты = УсловиеОплаты;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
					ДокОбъект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Договор, "ПорядокОплаты");
					ДокОбъект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоУмолчанию(ДокОбъект);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДокОбъект.ПорядокОплаты) Тогда
					Если ЗначениеЗаполнено(ДокОбъект.Валюта) Тогда
						Если ДокОбъект.Валюта = Рубли Тогда
							ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
						Иначе
							ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				грСтатус = Справочники.грСтатусыЗаказа.Подготовлен;
				
				//Табличная часть Товары
				КорректировкаЗаказа = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "КорректировкаЗаказа", "Булево");
				
				// + Семейкин Д.С. 10.12.2020, задача 18753, рефакторинг механизма проведения 
				Если ДокОбъект.грПроведенВременная
					И Не ДокОбъект.ПометкаУдаления Тогда 
					СписокДокументов_ОбработкаПроведения.Добавить(ДокОбъект);
				КонецЕсли;	
				Если Не ДокОбъект.ЭтоНовый() Тогда 
					ОбменДаннымиСервер.УдалитьДвиженияУДокумента(ДокОбъект);
				КонецЕсли;	
				ДокОбъект.Проведен = Ложь;
				// - Семейкин Д.С. 10.12.2020, задача 18753, рефакторинг механизма проведения
				
				Если грОбработкаПакетовИнтеграции.РеквизитЕстьВПакете(xdtoОбъект, "Товары") Тогда
					
					ДокОбъект.Товары.Очистить();
					
					Товары = грОбработкаПакетовИнтеграции.ТаблицаЗначенийПоТабличнойЧасти(
					ИмяТипаОбъекта, 
					"Товары", 
					"Номенклатура, КоличествоУпаковок, Количество, Цена, Сумма, ПроцентРучнойСкидки,
					|грКоличествоПаллет, СтавкаНДС, ДатаПоступления, СуммаНДС, ЦенаКУ");
					
					Товары.Колонки.Добавить("ЦенаКУ",Новый ОписаниеТипов("Число"));
					Товары.Колонки.Добавить("ВесБрутто",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
					
					ВидНоменклатурыДляСклада = Неопределено;
					xdtoТовары = xdtoОбъект.Товары.Последовательность();
					Для Инд = 0 По xdtoТовары.Количество()-1 Цикл
						
						xdtoСтрока = xdtoТовары.ПолучитьЗначение(Инд);
						Стр = Товары.Добавить();
						
						//Номенклатура
						Стр.Номенклатура = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(
						xdtoСтрока.Номенклатура, 
						"Справочник.Номенклатура",
						ВидИдентификатора,
						"263",
						НенайденныеОбъекты,
						КэшСсылок,
						ДопПараметрыДозапросов );
						
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "КоличествоУпаковок", "Число");
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "Количество", "Число");
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "Цена", "Число");
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ЦенаКУ", "Число");
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ВесБрутто", "Число");
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "Сумма", "Число");
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ПроцентРучнойСкидки", "Число");
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр.грКоличествоПаллет, xdtoСтрока, "КоличествоПаллет", "Число");
						
						Если НЕ ЗначениеЗаполнено(ВидНоменклатурыДляСклада) Тогда
							ВидНоменклатурыДляСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.Номенклатура, "ВидНоменклатуры");
						КонецЕсли;
						
						Если ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту или
							ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
							Стр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							Стр.СуммаНДС = 0;
						Иначе
							грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "СтавкаНДС", "Перечисление.СтавкиНДС");
							грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "СуммаНДС", "Число");
						КонецЕсли;
						
						Стр.ДатаПоступления = ДокОбъект.ДатаПоступления;
						
					КонецЦикла;
					
					Если ЗначениеЗаполнено(ВидНоменклатурыДляСклада) и ЗначениеЗаполнено(ДокОбъект.Организация)  Тогда
						
						КлючКэша = "ДокОбъект.Склад."+Строка(ВидНоменклатурыДляСклада.УникальныйИдентификатор())+"."+Строка(ДокОбъект.Организация.УникальныйИдентификатор());
						Склад = КэшСсылок[КлючКэша];
						Если Склад = Неопределено Тогда 
							Запрос = Новый Запрос(
							"ВЫБРАТЬ
							|	грСкладыПоУмолчанию.Склад КАК Склад
							|ИЗ
							|	РегистрСведений.грСкладыПоУмолчанию КАК грСкладыПоУмолчанию
							|ГДЕ
							|	грСкладыПоУмолчанию.ВидНоменклатуры = &ВидНоменклатуры
							|	И грСкладыПоУмолчанию.Организация = &Организация"
							);
							
							Запрос.УстановитьПараметр("ВидНоменклатуры",ВидНоменклатурыДляСклада);
							Запрос.УстановитьПараметр("Организация",ДокОбъект.Организация);
							
							РезультатЗапроса = Запрос.Выполнить();
							Если Не РезультатЗапроса.Пустой() Тогда
								
								Выборка = РезультатЗапроса.Выбрать();
								Если Выборка.Следующий() Тогда
									ДокОбъект.Склад = Выборка.Склад;
								КонецЕсли;
								
							КонецЕсли;
							КэшСсылок[КлючКэша] = ДокОбъект.Склад;
						Иначе
							ДокОбъект.Склад = Склад;
						КонецЕсли;
						
					КонецЕсли;
					
					Статус = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Статус",,,"");
					
					Если КорректировкаЗаказа Тогда
						грСтатус = Справочники.грСтатусыЗаказа.Отменен;
					ИначеЕсли Статус = "На пути в Ригу" Тогда
						грСтатус = Справочники.грСтатусыЗаказа.НаПутиНаТранзитныйСклад;
					ИначеЕсли Статус = "На пути в Москву" Тогда
						грСтатус = Справочники.грСтатусыЗаказа.НаПутиНаСклад15;
					ИначеЕсли Статус = "СВХ" Тогда
						грСтатус = Справочники.грСтатусыЗаказа.ВыгруженНаСВХ;
					ИначеЕсли Статус = "Рига" Тогда
						грСтатус = Справочники.грСтатусыЗаказа.ГотовКОтгрузкеСТранзитногоСклада;
					ИначеЕсли Статус = "Заказ размещен" Тогда
						грСтатус = Справочники.грСтатусыЗаказа.Размещен;
					ИначеЕсли Статус = "Готов к отгрузке" Тогда
						грСтатус = Справочники.грСтатусыЗаказа.ПодтвержденПоставщиком;
					ИначеЕсли Статус = "Отгружается" Тогда
						грСтатус = Справочники.грСтатусыЗаказа.НаЗагрузкеУПоставщика;
					КонецЕсли;
					
					//+++ GRADUM, Теплоухов А.В. 2020_10_14 Задача № 17379{
					//АктуальныеСтроки = Истина;
					//Если ДокОбъект.грЕстьКорректировка Тогда
					//	
					//	АктуальныеСтроки = Ложь;
					//	
					//Иначе
					//	
					//	РегистрыСведений.грТекущиеДокументыСтроки.ОчиститьПоДокументу(ДокОбъект.Ссылка);
					//	РегистрыСведений.грСуммарныеЗначенияДокументовСтрок.ОчиститьПоДокументу(ДокОбъект.Ссылка);
					//	
					//КонецЕсли;
					//
					
					//Удаляем строковые документы
					//Запрос = Новый Запрос;
					//Запрос.Текст = 
					//"ВЫБРАТЬ
					//|	грСтрокаЗаказаПоставщику.Ссылка КАК ДокументСтрока
					//|ИЗ
					//|	Документ.грСтрокаЗаказаПоставщику КАК грСтрокаЗаказаПоставщику
					//|ГДЕ
					//|	грСтрокаЗаказаПоставщику.ДокументВладелец = &ДокументВладелец
					//|	И грСтрокаЗаказаПоставщику.ИдентификаторКорректировки = """"";
					//
					//Запрос.УстановитьПараметр("ДокументВладелец", ДокОбъект.Ссылка);
					//
					//Выборка = Запрос.Выполнить().Выбрать();
					//Пока Выборка.Следующий() Цикл
					//	
					//	ДокументСтрокаОбъект = Выборка.ДокументСтрока.ПолучитьОбъект();
					//	ДокументСтрокаОбъект.ОбменДанными.Загрузка = Истина;
					//	//ДокументСтрокаОбъект.ДополнительныеСвойства.Вставить("НеУдалятьИзТПК");
					//	ДокументСтрокаОбъект.Удалить();
					//	
					//КонецЦикла;
					
					//Прикрутим универсальный механизм очистки строк по документу владельцу
					// Требуется уточнить удаление строк по Корректировкам заказа
					//+++ GRADUM, Теплоухов А.В. 2020_12_22 Задача № 18963{
					ДокументВладелец = ДокОбъект;
					ПараметрыОчистки = Новый Структура("ТолькоПроведеные", Ложь);
					ПараметрыОчистки.Вставить("ДопУсловиеОтбора", 
						Новый Структура("ТекстУсловия, Параметры",
							" грТекущиеДокументыСтроки.Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока) ", Новый Структура));
				
					ПараметрыОчистки.Вставить("ДопУсловиеОтбораДокСтрока", Новый Структура("ТекстУсловия, Параметры",
						" ДокументСтрока.ИдентификаторКорректировки = """" " 
						+ " И ДокументСтрока.Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока)", Новый Структура));

					Выполнить(грОбработкаПакетовИнтеграции.ПолучитьТекстОбработчика("УНИКУМ_ОчисткаСтрокСтроковойМодели", 
						Перечисления.сшпТипыИнтеграции.Исходящая));
					//--- GRADUM, Теплоухов А.В. 2020_12_22 Задача № 18963}
					//Конец Удаляем строковые документы
					
					МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Товары"					, Товары);
					Запрос.УстановитьПараметр("ТаблицаSKU"				, грОбработкаПакетовИнтеграции.ТаблицаSKUАГТ(ДокОбъект.Дата, МассивНоменклатуры)); 
					Запрос.УстановитьПараметр("Упаковки"				, грОбработкаПакетовИнтеграции.ТаблицаУпаковокНоменклатуры(МассивНоменклатуры)); 
					Запрос.УстановитьПараметр("СвободныйПродукт"		, Найти(ДокОбъект.Номер, "FR") > 0);
					Запрос.УстановитьПараметр("КачествоТовара"			, Справочники.грКачествоТоваров.Кондиция);
					Запрос.УстановитьПараметр("МестоХранения"			, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Организация,"РегионПоУмолчанию"));
					Запрос.УстановитьПараметр("ДокументВладелец"		, ДокОбъект.Ссылка);
					Запрос.УстановитьПараметр("Склад"					, ДокОбъект.грСкладПоставщика);
					Запрос.УстановитьПараметр("Помещение"				, ДокОбъект.грПомещениеПоставщика);
					Запрос.УстановитьПараметр("ФактическаяДатаРозлива"	, ДокОбъект.грФактическаяДатаРозлива);
					Запрос.УстановитьПараметр("Статус"					, грСтатус);
					Запрос.УстановитьПараметр("ПланируемаяДатаОтгрузки"	, ДокОбъект.грПланируемаяДатаОтгрузки);
					Запрос.УстановитьПараметр("ВнешняяСистема"			, ПараметрыОбработки.Отправитель);
					Запрос.УстановитьПараметр("УсловиеОплаты"			, ДокОбъект.грУсловиеОплаты);
					Запрос.УстановитьПараметр("Сценарий"				, ДокОбъект.Сценарий);
					Запрос.УстановитьПараметр("ИдентификаторОбъекта"	, xdtoОбъект.Ссылка);
					Запрос.УстановитьПараметр("грПроведенВременная"		, ДокОбъект.грПроведенВременная);
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Товары.Номенклатура КАК Номенклатура,
					|	Товары.Количество КАК Количество,
					|	Товары.Цена КАК Цена,
					|	Товары.Сумма КАК Сумма,
					|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
					|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
					|	Товары.грКоличествоПаллет КАК грКоличествоПаллет,
					|	Товары.СтавкаНДС КАК СтавкаНДС,
					|	Товары.СуммаНДС КАК СуммаНДС,
					|	Товары.ДатаПоступления КАК ДатаПоступления,
					|	Товары.ЦенаКУ КАК ЦенаКУ,
					|	Товары.ВесБрутто КАК ВесБрутто
					|ПОМЕСТИТЬ втТовары
					|ИЗ
					|	&Товары КАК Товары
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаSKU.Номенклатура КАК Номенклатура,
					|	ТаблицаSKU.АГТ КАК АГТ
					|ПОМЕСТИТЬ втТаблицаSKU
					|ИЗ
					|	&ТаблицаSKU КАК ТаблицаSKU
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Упаковки.Номенклатура КАК Номенклатура,
					|	Упаковки.УпаковкаШтука КАК УпаковкаШтука,
					|	Упаковки.УпаковкаКороб КАК УпаковкаКороб,
					|	Упаковки.УпаковкаПаллет КАК УпаковкаПаллет
					|ПОМЕСТИТЬ втУпаковки
					|ИЗ
					|	&Упаковки КАК Упаковки
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	втТаблицаSKU.АГТ КАК АГТ,
					|	втТовары.Номенклатура КАК SKU,
					|	втУпаковки.УпаковкаШтука КАК Упаковка,
					|	втТовары.Количество КАК Количество,
					|	втУпаковки.УпаковкаКороб КАК Короб,
					|	втТовары.КоличествоУпаковок КАК КоличествоУпаковок,
					|	втУпаковки.УпаковкаПаллет КАК Паллет,
					|	втТовары.грКоличествоПаллет КАК КоличествоПаллет,
					|	втТовары.Цена КАК Цена,
					|	втТовары.Сумма КАК Сумма,
					|	втТовары.Цена КАК ЦенаРегламентированная,
					|	втТовары.Сумма КАК СуммаРегламентированная,
					|	втТовары.СтавкаНДС КАК СтавкаНДС,
					|	втТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
					|	&СвободныйПродукт КАК СвободныйПродукт,
					|	втТовары.СуммаНДС КАК СуммаНДС,
					|	втТовары.ДатаПоступления КАК ДатаПоступления,
					|	втТовары.ЦенаКУ КАК ЦенаКУ,
					|	НЕОПРЕДЕЛЕНО КАК СтрокаПлан,
					|	НЕОПРЕДЕЛЕНО КАК СтрокаФакт,
					|	Товары.грНормаВложенности КАК ВложенностьВКороб,
					|	&КачествоТовара КАК КачествоТовара,
					|	&Статус КАК Статус,
					|	&Склад КАК Склад,
					|	&Помещение КАК Помещение,
					|	&ФактическаяДатаРозлива КАК ФактическаяДатаРозлива,
					|	&ПланируемаяДатаОтгрузки КАК ПланируемаяДатаОтгрузки,
					|	&МестоХранения КАК МестоХранения,
					|	&УсловиеОплаты КАК УсловиеОплаты,
					|	&Сценарий КАК Сценарий,
					|	&грПроведенВременная КАК грПроведенВременная,
					|	втТовары.ВесБрутто КАК ВесБрутто
					|ИЗ
					|	втТовары КАК втТовары
					|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаSKU КАК втТаблицаSKU
					|		ПО втТовары.Номенклатура = втТаблицаSKU.Номенклатура
					|		ЛЕВОЕ СОЕДИНЕНИЕ втУпаковки КАК втУпаковки
					|		ПО втТовары.Номенклатура = втУпаковки.Номенклатура
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
					|		ПО втТовары.Номенклатура = Товары.Ссылка";
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ДопУсловиеОтбора =  Новый Структура("ТекстУсловия, Параметры", " ЛОЖЬ ", Новый Структура);
					
					//+++ GRADUM, Теплоухов А.В. 2020_12_22 Задача № 18963{
					ДокОбъект.ДополнительныеСвойства.Вставить("НеФормироватьФактические", Истина);
					//--- GRADUM, Теплоухов А.В. 2020_12_22 Задача № 18963}
					
					грОбработкаПакетовИнтеграции.СоздатьИзменитьДокументыСтроки(ДокОбъект, 
					РезультатЗапроса, xdtoОбъект.Ссылка, ПараметрыОбработки.Отправитель,, ДопУсловиеОтбора);
					
				КонецЕсли;
				
				//Табличная часть ЭтапыГрафикаОплаты 
				ДокОбъект.ЭтапыГрафикаОплаты.Очистить();
				
				Если грОбработкаПакетовИнтеграции.РеквизитЕстьВПакете(xdtoОбъект,"ЭтапыГрафикаОплаты") Тогда
					xdtoЭтапыГрафикаОплаты = xdtoОбъект.ЭтапыГрафикаОплаты.Последовательность();
					Для Инд = 0 По xdtoЭтапыГрафикаОплаты.Количество()-1 Цикл
						xdtoСтрока = xdtoЭтапыГрафикаОплаты.ПолучитьЗначение(Инд);
						
						ДатаПлатежа = Неопределено;
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(ДатаПлатежа, xdtoСтрока, "ДатаПлатежа", "Дата");
						ПроцентПлатежа = 0;
						грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(ПроцентПлатежа, xdtoСтрока, "ПроцентПлатежа", "Число");
						Если ЗначениеЗаполнено(ДатаПлатежа) И ЗначениеЗаполнено(ПроцентПлатежа)  Тогда
							Стр = ДокОбъект.ЭтапыГрафикаОплаты.Добавить();
							
							грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ВариантОплаты", "Перечисление.ВариантыОплатыПоставщику");
							грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "КоличествоУпаковок", "Число");
							грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "Сдвиг", "Число");
							грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "СуммаПлатежа", "Число");
							
							Стр.ДатаПлатежа = ДатаПлатежа;
							Стр.ПроцентПлатежа = ПроцентПлатежа; 
							ДатаОтсчетаСдвига = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoСтрока, "ДатаОтсчетаСдвига");
							Если ДатаОтсчетаСдвига = "Дата выезда" Тогда
								Стр.грДатаОтсчетаСдвига = Справочники.грДатаОтсчетаСдвига.ДатаВыезда
							ИначеЕсли ДатаОтсчетаСдвига = "Дата оформления" Тогда
								Стр.грДатаОтсчетаСдвига = Справочники.грДатаОтсчетаСдвига.ДатаОформления;
							ИначеЕсли ДатаОтсчетаСдвига = "Срок выполнения" Тогда
								Стр.грДатаОтсчетаСдвига = Справочники.грДатаОтсчетаСдвига.СрокВыполнения;
							КонецЕсли;
						КонецЕсли;		
					КонецЦикла;
				КонецЕсли;
							
				ДокОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				//++ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617 
				// + Семейкин Д.С. 10.12.2020, задача 18753, рефакторинг механизма проведения
				//грОбработкаПакетовИнтеграции.ЗаполнитьСписокДокументов_ОбрабоктаПроведения(ДокОбъект, СписокДокументов_ОбработкаПроведения);
				// - Семейкин Д.С. 10.12.2020, задача 18753, рефакторинг механизма проведения
				//--ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617
				
				ТекСтатус = РегистрыСведений.грСтатусыЗаказов.ПолучитьТекущийСтатусЗаказаПоставщику(ДокОбъект.Ссылка);
			
				Если ТекСтатус <> Справочники.грСтатусыЗаказа.Отменен Тогда
					НаборСтатусыЗаказов = РегистрыСведений.грСтатусыЗаказов.СоздатьНаборЗаписей();
					НаборСтатусыЗаказов.Отбор.Заказ.Установить(ДокОбъект.Ссылка);
					НаборСтатусыЗаказов.Прочитать();
					Если НаборСтатусыЗаказов.Количество() Тогда
						НаборСтатусыЗаказов.Очистить();
						НаборСтатусыЗаказов.Записать();
					КонецЕсли;
				
					ДанныеСтатуса = Новый Структура("Заказ, ДокументОснование, ДатаУстановкиСтатуса, Статус, Пользователь, ПорядокСтатуса",
					ДокОбъект.Ссылка, ДокОбъект.Ссылка, ДокОбъект.Дата, грСтатус, 
					ПараметрыСеанса.ТекущийПользователь, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(грСтатус, "Порядок"));
				
					РегистрыСведений.грСтатусыЗаказов.ВыполнитьЗаписьВРегистр(ДанныеСтатуса);
				КонецЕсли;
				
				грОбработкаПакетовИнтеграции.УстановитьКлюч_v2(
				ДокОбъект.Ссылка, 
				Ключ, 
				ПараметрыОбработки.Отправитель,  
				новый Структура(
				"ВидИдентификатораСтрока, ДатаОбновления, Версия",
				ВидИдентификатора,
				ПараметрыОбработки.ВремяПакета, ВерсияОбъекта));
				
				грОбработкаПакетовИнтеграции.УдалитьЗаписьОДозапросе(Ключ, "УНИКУМ.Документ.ЗаказПоставщику", ТаблицаИдентификаторовПотоков);
				
				//+++ GRADUM, Теплоухов А.В. 2021_03_24 Задача № 20785{
				спрИмяТипаОбъекта = "Документ.Заказ";
				ИдентификаторОбъекта = Ключ;
				Выполнить(грОбработкаПакетовИнтеграции.ПолучитьТекстОбработчика("ВыполнитьАлгоритмСборки", 
					Перечисления.сшпТипыИнтеграции.Исходящая));
				//--- GRADUM, Теплоухов А.В. 2021_03_24 Задача № 20785}
			
				// Конец изменения объекта
				
			    //+++ Градум; Курпяев Е.Д. ; 22.10.2020; //Дозапросы
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить( "Дата", ДокОбъект.Дата); 
				грОбработкаПакетовИнтеграции.ЗаписатьОтложенныеДозапросы( Ключ, ИмяТипаОбъекта, КлассСообщения, xdtoОбъект, ПараметрыОбработки, НенайденныеОбъекты, ДопПараметры );
				//--- Градум; Курпяев Е.Д. ; 23.10.2020; //Дозапросы
				
				~ПерейтиКСледующему:
			
				ОценкаПроизводительности.ЗакончитьЗамерВремени(СткОбработчик.Наименование, Начало);
				
				КоличествоЗаписейВБлоке = КоличествоЗаписейВБлоке + 1;
				
				Если ПараметрыОбработки.МассоваяЗагрузка И КоличествоЗаписейВБлоке = ПараметрыОбработки.РазмерБлока Тогда 
					
					Если ПараметрыОбработки.ВыполнятьДозапросы И НенайденныеОбъекты.Количество() > 0 Тогда 
						грОбработкаПакетовИнтеграции.СоздатьДозапросыПоТаблице(
						НенайденныеОбъекты, 
						ПараметрыОбработки.ТаймаутДозапроса, 
						ПараметрыОбработки.КоличествоПопытокБлокировки, 
						ТаблицаИдентификаторовПотоков);
					КонецЕсли;
					
					Пока ТранзакцияАктивна() Цикл
						ЗафиксироватьТранзакцию();
					КонецЦикла;
					
					//+++Логирование прогресса загрузки
					ЗагруженоОбъектов = ЗагруженоОбъектов + КоличествоЗаписейВБлоке;
					ОсталосьОбработать = КоличествоЭлементов - ЗагруженоОбъектов;
						
					ТекстСообщения = СтрШаблон( "Загружено %1 объектов из %2, остаток %3, класс %4, сообщение %5, номер сеанса %6", 
							ЗагруженоОбъектов, КоличествоЭлементов, ОсталосьОбработать, КлассСообщения, Идентификатор, ПараметрыОбработки.НомерСеанса);
						
					сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Предупреждение,
								 "Datareon. Обработка сообщения. Прогресс загрузки пакета." + Идентификатор, ТекстСообщения);
					//---Логирование прогресса загрузки
					
					КоличествоЗаписейВБлоке = 0;
					НачатьТранзакцию();
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПараметрыОбработки.ВыполнятьДозапросы И НенайденныеОбъекты.Количество() > 0 Тогда 
				грОбработкаПакетовИнтеграции.СоздатьДозапросыПоТаблице(
				НенайденныеОбъекты, 
				ПараметрыОбработки.ТаймаутДозапроса, 
				ПараметрыОбработки.КоличествоПопытокБлокировки, 
				ТаблицаИдентификаторовПотоков);
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
				Задержка = ПараметрыОбработки.ЗадержкаПриДозапросе;
			КонецЕсли;
			
			Пока ТранзакцияАктивна() Цикл
				ЗафиксироватьТранзакцию();
			КонецЦикла;
			
			Если НенайденныеОбъекты.Количество() > 0 Тогда 
				
				ПараметрыОбработки.МассоваяЗагрузка = Истина;
				
				Если ПараметрыОбработки.МассоваяЗагрузка Тогда 
					грОбработкаПакетовИнтеграции.ОбработатьИсключениеНенайденныхОбъектов( Идентификатор, НенайденныеОбъекты, ПараметрыОбработки);
				Иначе
					Если ПараметрыОбработки.ВыполнятьДозапросы Тогда 
						ДостигнутТаймаут = грОбработкаПакетовИнтеграции.ОпределитьТаймаутСообщения(
						КоличествоПопытокОжидания, 
						ДатаРегистрации, 
						ПараметрыОбработки);
						Если ДостигнутТаймаут Тогда 
							УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
							ВызватьИсключение "Истекло время ожидания ответов на дозапросы. См. журнал регистрации.";
						Иначе
							УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
						КонецЕсли;
						грОбработкаПакетовИнтеграции.ЗаписатьНенайденныеОбъектыВЖР(НенайденныеОбъекты, Идентификатор,, УровеньЖР);
					Иначе
						грОбработкаПакетовИнтеграции.ОбработатьИсключениеНенайденныхОбъектов( Идентификатор, НенайденныеОбъекты, ПараметрыОбработки);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			//++ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617 
			Выполнить(грОбработкаПакетовИнтеграции.ПолучитьТекстОбработчика("Служебный_ПроведениеДокументовЕРП", Перечисления.сшпТипыИнтеграции.Исходящая));
			//--ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617
			
		Исключение
			
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если Не ПараметрыОбработки.МассоваяЗагрузка И Найти(ТекстОшибки,"Ошибка блокировки") > 0 Тогда 
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
				Задержка = ПараметрыОбработки.ЗадержкаПриНеудачнойБлокировке;
			Иначе
				ВызватьИсключение
				"Ошибка в Datareon при загрузке объекта «" + ИмяТипаОбъекта + "». ID: " + ОбъектСообщение.ID 
				+ ". " + ТекстОшибки;
			КонецЕсли;
			
		КонецПопытки;

		~Возврат:

		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;
