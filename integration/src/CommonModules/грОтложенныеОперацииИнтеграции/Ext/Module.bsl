
#Область СлужебныеПроцедурыИФункции

#Область РегламентныеЗадания

Функция ПараметрыДобавленияРегламентныхЗаданий() Экспорт
	
	ПараметрыЗадания = Новый Структура;
	//+++ GRADUM, Теплоухов А.В. 2021_06_23 Задача № 21723{
	//ПараметрыЗадания.Вставить("Метаданные"									, Метаданные.РегламентныеЗадания.грОбработкаИсточниковДозапросов);
	ПараметрыЗадания.Вставить("Метаданные"									, Метаданные.РегламентныеЗадания.грОтложенныеОперацииИнтеграции);
	//--- GRADUM, Теплоухов А.В. 2021_06_23 Задача № 21723}
	
	ПараметрыЗадания.Вставить("Использование"								, Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении"		, 10);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении"	, 3);
	ПараметрыЗадания.Вставить("Наименование");
	ПараметрыЗадания.Вставить("Ключ");
	ПараметрыЗадания.Вставить("Параметры");
	
	Возврат ПараметрыЗадания;
	
КонецФункции

Процедура ЗапуститьФоновыеЗаданияПоРегламентному(ДополнительныеПараметры) Экспорт
	
	Для каждого Параметр Из ДополнительныеПараметры Цикл
		
		ПараметрыЗадания = грОтложенныеОперацииИнтеграцииКлиентСервер.ПараметрыЗапускаФоновыхЗаданий(
			Новый Структура("Метод", Параметр.Ключ));
		ПараметрыЗадания.Вставить("ЭтоОбработкаКомандРегламентногоЗадания");
		ПараметрыЗадания.Вставить("ИспользоватьНаименованиеМетодаИсточникиДанных");
		
		//+++ GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539{
		//ПараметрыЗадания.Вставить("КлючФоновогоЗадания" , Новый УникальныйИдентификатор);
		ПараметрыЗадания.Вставить("КлючФоновогоЗадания" , "" + Параметр.Значение.ИмяМетода + "_" + Новый УникальныйИдентификатор);
		//--- GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539}
		
		ПараметрыЗадания.Вставить("Отборы"				, Параметр.Значение.Отборы);
		ПараметрыЗадания.Вставить("ПараметрыПорций"		, Параметр.Значение.ПараметрыПорций);
		
		Если Параметр.Значение.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов Тогда
			ПараметрыЗадания.Вставить("ДобавитьОтборыВНаименование");
		КонецЕсли;
		
		ПараметрыЗадания.Вставить("ДобавитьПараметрыПорцийВНаименование");
		
		Если Параметр.Значение.Свойство("ОчиститьОтложенныеДозапросы") Тогда
			ПараметрыЗадания.Вставить("ОчиститьОтложенныеДозапросы" , Параметр.Значение.ОчиститьОтложенныеДозапросы);
		КонецЕсли;
		
		Результат = ЗапуститьОбработкуВФоновомРежиме(
			ПараметрыЗадания.ВыполняемыйМетодИсточникиДанных,
			ПараметрыЗадания);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаИсточниковДозапросов(ДополнительныеПараметры) Экспорт
	
	ЗапуститьФоновыеЗаданияПоРегламентному(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОчиститьВыключенныеРегламентыеЗадания() Экспорт 
	
	ПараметрыЗапускаРегламентныхЗаданий = грОтложенныеОперацииИнтеграцииКлиентСервер.ПараметрыЗапускаРегламентныхЗаданий();
	Для каждого ПараметрЗадания Из ПараметрыЗапускаРегламентныхЗаданий Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить( "Использование", Ложь );
		Отбор.Вставить( "Ключ", ПараметрЗадания.Ключ );
		УдалитьРегламентыеЗадания( Отбор );
		
		Отбор.Вставить( "Ключ", ПараметрЗадания.Значение.Наименование );
		УдалитьРегламентыеЗадания( Отбор );
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ФоновыеЗадания

Функция НайтиФоновоеЗадание(ДополнительныйОтбор = Неопределено)

	Отбор = Новый Структура;
	Отбор.Вставить("Состояние"	, СостояниеФоновогоЗадания.Активно);
	
	Если Не ДополнительныйОтбор = Неопределено Тогда
		
		Для каждого ЭлементОтбора Из ДополнительныйОтбор Цикл
			Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Неопределено;
	
	НайденныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если НайденныеЗадания.Количество() > 0 Тогда
		Результат = НайденныеЗадания[0];
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // НайтиФоновоеЗадание()

Функция НаименованиеЗадания(Наименование, ПараметрыЗадания) Экспорт
	
	Результат						= Наименование;
	МассивПараметровНаименования	= Новый Массив;
	
	Если  ПараметрыЗадания.Свойство("ДобавитьОтборыВНаименование")
		И ПараметрыЗадания.Свойство("Отборы")
		И ПараметрыЗадания.Отборы.Количество() > 0 Тогда
	
		МассивКлючейОтборов = Новый Массив;
		Для каждого ЭлементОтбора Из ПараметрыЗадания.Отборы Цикл
			
			Если ЭлементОтбора.Ключ = "ТипДозапроса" Тогда
				ПредставлениеКлюча = "Тип";
			Иначе
				ПредставлениеКлюча = ЭлементОтбора.Ключ;
			КонецЕсли;
			
			МассивКлючейОтборов.Добавить(СтрШаблон("%1=%2", ПредставлениеКлюча, ЭлементОтбора.Значение));
			
		КонецЦикла;
		
		Если МассивКлючейОтборов.Количество() Тогда
			МассивПараметровНаименования.Добавить(СтрШаблон("Отборы:%1", СтрСоединить(МассивКлючейОтборов, ",")));
		КонецЕсли;
			
	КонецЕсли;
	
	Если  ПараметрыЗадания.Свойство("ДобавитьПараметрыПорцийВНаименование")
		И ПараметрыЗадания.Свойство("ПараметрыПорций")
		И ПараметрыЗадания.ПараметрыПорций.Количество() > 0 Тогда
	
		МассивПараметровПорций = Новый Массив;
		Для каждого ПараметрПорции Из ПараметрыЗадания.ПараметрыПорций Цикл
			МассивПараметровПорций.Добавить(СтрШаблон("%1=%2", ПараметрПорции.Ключ, Формат(ПараметрПорции.Значение, "ЧЦ=12; ЧДЦ=0; ЧГ=0")));
		КонецЦикла;
		
		Если МассивПараметровПорций.Количество() Тогда
			МассивПараметровНаименования.Добавить(СтрШаблон("Порции:%1", СтрСоединить(МассивПараметровПорций, ",")));
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивПараметровНаименования.Количество() Тогда
		Результат = СтрШаблон("%1 (%2)", Результат, СтрСоединить(МассивПараметровНаименования, ", "));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НаименованиеЗадания()

Функция ЗапуститьОбработкуВФоновомРежиме(ВыполняемыйМетод, ПараметрыЗадания ) Экспорт 
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне( ПараметрыЗадания.УникальныйИдентификатор );
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	Если ПараметрыЗадания.Свойство("ИспользоватьНаименованиеМетодаИсточникиДанных") Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания	= ПараметрыЗадания.НаименованиеЗаданияИсточникиДанных;
		
		ПараметрыЗадания.Удалить("ИспользоватьНаименованиеМетодаИсточникиДанных");
		
	Иначе
		ПараметрыВыполнения.НаименованиеФоновогоЗадания	= ПараметрыЗадания.НаименованиеЗадания;
	КонецЕсли;
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания(
		ПараметрыВыполнения.НаименованиеФоновогоЗадания,
		ПараметрыЗадания);
		
	Если ПараметрыЗадания.Свойство("ДобавитьОтборыВНаименование") Тогда
		ПараметрыЗадания.Удалить("ДобавитьОтборыВНаименование");
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ДобавитьПараметрыПорцийВНаименование") Тогда
		ПараметрыЗадания.Удалить("ДобавитьПараметрыПорцийВНаименование");
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("КлючФоновогоЗадания") Тогда
		ПараметрыВыполнения.Вставить("КлючФоновогоЗадания", ПараметрыЗадания.КлючФоновогоЗадания);
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ИдентификаторЗаданияРодитель") Тогда
		ПараметрыВыполнения.Вставить("ИдентификаторЗаданияРодитель", ПараметрыЗадания.ИдентификаторЗаданияРодитель);
	КонецЕсли;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне( ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения );
	
	Возврат Результат;
	
КонецФункции

Функция ОчиститьОтложенныеДозапросыВФоне( ПараметрыОбработки, АдресРезультата )
	
	Результат = ПолучитьИзВременногоХранилища( АдресРезультата );
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Метод", Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОчиститьОтложенныеДозапросы);
	
	ПараметрыЗапускаФоновыхЗаданий = грОтложенныеОперацииИнтеграцииКлиентСервер.ПараметрыЗапускаФоновыхЗаданий(ДополнительныеПараметры);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить( "НаименованиеЗадания"				, ПараметрыЗапускаФоновыхЗаданий.НаименованиеЗадания );
	ПараметрыЗадания.Вставить( "ДанныеДляОбработки"					, Результат );
	ПараметрыЗадания.Вставить( "УникальныйИдентификатор"			, Новый УникальныйИдентификатор );
	ПараметрыЗадания.Вставить( "Метод"								, Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОчиститьОтложенныеДозапросы );
	
	Если ПараметрыОбработки.Свойство("Отборы") Тогда
		ПараметрыЗадания.Вставить("Отборы", ПараметрыОбработки.Отборы);
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("КлючФоновогоЗадания") Тогда
		ПараметрыЗадания.Вставить("КлючФоновогоЗадания", ПараметрыОбработки.КлючФоновогоЗадания);
		ПараметрыОбработки.Удалить("КлючФоновогоЗадания");
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ИдентификаторЗаданияРодитель") Тогда
		ПараметрыЗадания.Вставить("ИдентификаторЗаданияРодитель", ПараметрыОбработки.ИдентификаторЗаданияРодитель);
		ПараметрыОбработки.Удалить("ИдентификаторЗаданияРодитель");
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ЭтоОбработкаКомандРегламентногоЗадания") Тогда
		ПараметрыЗадания.Вставить("ЭтоОбработкаКомандРегламентногоЗадания", ПараметрыОбработки.ЭтоОбработкаКомандРегламентногоЗадания);
	КонецЕсли; 
	
	Возврат ЗапуститьОбработкуВФоновомРежиме(ПараметрыЗапускаФоновыхЗаданий.ВыполняемыйМетод, ПараметрыЗадания );
	
КонецФункции

Процедура ПроверитьВыполнениеОбработкиФоновыхЗаданий( ЗаданияНаОбработку, ПараметрыОбработки ) Экспорт
	
	МетодыЗаданий = Новый Соответствие;
	
	ЭтоОперацияИсточникиДозапросов = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов = ПараметрыОбработки.Операция;
	
	//+++ GRADUM, Теплоухов А.В. 2021_06_16 Задача № 21583{
	ЭтоОперацияСборки = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку = ПараметрыОбработки.Метод
						Или Перечисления.грМетодыОтложенныхОперацийИнтеграции.ЗарегистрироватьЦеныПоставщика = ПараметрыОбработки.Метод;
	//--- GRADUM, Теплоухов А.В. 2021_06_16 Задача № 21583}
	//+++ GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751{
	ЭтоОперацияПомещенияВОтложенноеПроведение =
		Перечисления.грМетодыОтложенныхОперацийИнтеграции.ПоместитьВОчередьОтложенногоПроведения = ПараметрыОбработки.Метод;
	//--- GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751}
	
	ЗаданияНаОбработкуПакетовИнтеграции = Неопределено;
	ПараметрыОбработки.Свойство("ЗаданияНаОбработкуПакетовИнтеграции", ЗаданияНаОбработкуПакетовИнтеграции);
	
	Пока ЗаданияНаОбработку.Количество() > 0 Цикл
		
		СтрокиКУдалению = Новый Массив;
		АктивныеЗадания = Новый Массив;
		
		Для каждого СтрокаОписанияЗадания Из ЗаданияНаОбработку Цикл
			
			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(СтрокаОписанияЗадания.ИдентификаторЗадания);
			
			//ЭтоОперацияИсточникиДозапросов
			Если ЭтоОперацияИсточникиДозапросов 
				Или ЭтоОперацияСборки 
				Или ЭтоОперацияПомещенияВОтложенноеПроведение Тогда //GRADUM, Теплоухов А.В.2021_06_22 {Задача № 21751, добавлен параметр ЭтоОперацияПомещенияВОтложенноеПроведение}
			
				ЭтоЗаданиеНаОбработкуПакетовИнтеграции = Ложь;
				Если Не ЗаданияНаОбработкуПакетовИнтеграции = Неопределено
					И Не ЗаданияНаОбработкуПакетовИнтеграции.Найти(СтрокаОписанияЗадания) = Неопределено Тогда
					
					ЭтоЗаданиеНаОбработкуПакетовИнтеграции	= Истина;
					
				КонецЕсли;
			
			КонецЕсли;
			//Конец ЭтоОперацияИсточникиДозапросов
			
			ТекстДляПротокола = "";
			Если Задание = Неопределено Тогда
				
				// Задание не найдено в списке фоновых заданий.
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Фоновое задание %1 не найдено. Вероятно задание завершено аварийно, см. Журнал регистрации.'"),
					"""" + СокрЛП(СтрокаОписанияЗадания.ИдентификаторЗадания) + """");
				
			ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
				ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
				
				// Состояние задания "ЗавершеноАварийно" или "Отменено".
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Фоновое задание %1 %2:
					|%3'"),
					"""" + СокрЛП(Задание.Ключ) + """",
					?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, НСтр("ru='отменено'"), НСтр("ru='завершено аварийно'")),
					?(Задание.ИнформацияОбОшибке = Неопределено,
					НСтр("ru='<Нет описания ошибки>'"),
					ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
				
			ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
				
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);
				
				//ЭтоОперацияИсточникиДозапросов
				Если ЭтоОперацияИсточникиДозапросов 
					Или ЭтоОперацияСборки 
					Или ЭтоОперацияПомещенияВОтложенноеПроведение Тогда //GRADUM, Теплоухов А.В.2021_06_22 {Задача № 21751, добавлен параметр ЭтоОперацияПомещенияВОтложенноеПроведение}
				
					Если ЭтоЗаданиеНаОбработкуПакетовИнтеграции Тогда
						
						ДанныеВременногоХранилища = ПолучитьИзВременногоХранилища(СтрокаОписанияЗадания.АдресРезультата);
						
						ПараметрыЗадания = грОтложенныеОперацииИнтеграцииКлиентСервер.ПараметрыЗапускаМетодовИзМетодаИсточникиДанных(
							ПараметрыОбработки,
							ДанныеВременногоХранилища.ДанныеДляОбработки);
						ПараметрыЗадания.Вставить("КлючФоновогоЗадания"				, ДанныеВременногоХранилища.ИдЗаданияОбработкиПакетовИнтеграции);
						ПараметрыЗадания.Вставить("ИдентификаторЗаданияРодитель"	, ДанныеВременногоХранилища.ИдентификаторЗаданияРодитель);
						ПараметрыЗадания.Вставить("Отборы"							, ДанныеВременногоХранилища.Отборы);
						
						Если ПараметрыОбработки.Свойство("ЭтоОбработкаКомандРегламентногоЗадания") Тогда
							ПараметрыЗадания.Вставить("ЭтоОбработкаКомандРегламентногоЗадания");
						КонецЕсли; 
						
						ДлительнаяОперация = ЗапуститьОбработкуВФоновомРежиме(
							ПараметрыЗадания.ВыполняемыйМетод,
							ПараметрыЗадания );
							
						ЗаданияНаОбработку.Добавить(ДлительнаяОперация);
						
						МетодыЗаданий.Вставить(
							ДлительнаяОперация.ИдентификаторЗадания,
							ПараметрыОбработки.Метод);
						
					Иначе
						
						ОчиститьЗаданияОбработкиПакетовИнтеграции = Истина;
						
						Если МетодыЗаданий.Получить(СтрокаОписанияЗадания.ИдентификаторЗадания) = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОбработатьПакеты Тогда
							
							Если ПараметрыОбработки.Свойство("ОчиститьОтложенныеДозапросы")
								И ПараметрыОбработки.ОчиститьОтложенныеДозапросы Тогда
								
								ОчиститьЗаданияОбработкиПакетовИнтеграции = Ложь;
								ПараметрыОбработки.Вставить("ИдентификаторЗаданияРодитель"	, Задание.УникальныйИдентификатор);
								ПараметрыОбработки.Вставить("КлючФоновогоЗадания"			, Новый УникальныйИдентификатор);
								
								ДлительнаяОперация = ОчиститьОтложенныеДозапросыВФоне( ПараметрыОбработки, СтрокаОписанияЗадания.АдресРезультата );
								Если Не ДлительнаяОперация = Неопределено Тогда
									
									ЗаданияНаОбработку.Добавить( ДлительнаяОперация );
									
									МетодыЗаданий.Вставить(
										ДлительнаяОперация.ИдентификаторЗадания,
										Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОчиститьОтложенныеДозапросы);
									
								КонецЕсли;
								
							КонецЕсли;
						
						КонецЕсли;
						
						Если ОчиститьЗаданияОбработкиПакетовИнтеграции Тогда
						
							ОчиститьЗаданияОбработкиПакетовИнтеграции(Задание.Ключ);
						
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли;
				//Конец ЭтоОперацияИсточникиДозапросов
				
			Иначе
				
				// Задание еще активно, ничего с ним делать не нужно.
				АктивныеЗадания.Добавить(Задание);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
				
				ИмяСобытия = НСтр("ru = 'Отложенные операции интеграции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
				ЗаписьЖурналаРегистрации( ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ТекстДляПротокола);
					
				//ЭтоОперацияИсточникиДозапросов
				Если ЭтоОперацияИсточникиДозапросов Тогда
					
					Если ЭтоЗаданиеНаОбработкуПакетовИнтеграции Тогда
						ИдЗаданияОбработкиПакетовИнтеграции = ПолучитьИзВременногоХранилища(СтрокаОписанияЗадания.АдресРезультата).ИдЗаданияОбработкиПакетовИнтеграции;
					Иначе
						ИдЗаданияОбработкиПакетовИнтеграции = Задание.Ключ;
					КонецЕсли;
					
					ОчиститьЗаданияОбработкиПакетовИнтеграции(ИдЗаданияОбработкиПакетовИнтеграции);
					
				КонецЕсли;
				//Конец ЭтоОперацияИсточникиДозапросов
					
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаОписанияЗадания Из СтрокиКУдалению Цикл
			
			ИндексСтроки = ЗаданияНаОбработку.Найти( СтрокаОписанияЗадания );
			ЗаданияНаОбработку.Удалить(ИндексСтроки);
			
		КонецЦикла;
		
		Если СтрокиКУдалению.Количество() = 0 Тогда 
			
			// Если все задания еще активны, то сделаем паузу перед следующим циклом проверки заданий.
			Попытка
				ФоновыеЗадания.ОжидатьЗавершенияВыполнения(АктивныеЗадания, 1);
			Исключение
				СтрокиКУдалению = Неопределено; // для исключения срабатывания проверки стандарта 499 
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляОбработки

Функция ТаблицаЗначенийИсточниковДозапросов()
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная); 
	ОписаниеТипаСтрока = Новый ОписаниеТипов( "Строка", , , , КвалификаторСтроки );
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить( "Ключ"				, ОписаниеТипаСтрока );
	Таблица.Колонки.Добавить( "idflow"				, ОписаниеТипаСтрока );
	Таблица.Колонки.Добавить( "ID"					, ОписаниеТипаСтрока );
	Таблица.Колонки.Добавить( "Класс"				, ОписаниеТипаСтрока );
	Таблица.Колонки.Добавить( "ДатаОбработкиПакета"	, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя) );
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаИзменениеОбъектов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить( "Документ");
	
	Возврат Таблица;
	
КонецФункции

//+++ GRADUM, Теплоухов А.В. 2021_06_04 Задача № 21583{
Функция ТаблицаСборкиОбъектов()
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная); 
	ОписаниеТипаСтрока = Новый ОписаниеТипов( "Строка", , , , КвалификаторСтроки );
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СлужебныйОбъект",		Новый ОписаниеТипов("СправочникСсылка.грОбъекты"));
	Таблица.Колонки.Добавить("ОбластьОбработки",	Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Таблица.Колонки.Добавить("ID",					ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Класс",				ОписаниеТипаСтрока);
	
	Возврат Таблица;
	
КонецФункции
//--- GRADUM, Теплоухов А.В. 2021_06_04 Задача № 21583}

//+++ GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264{
Функция ТаблицаСборкиОбъектовЦеныПоставщика()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СлужебныйОбъект",		Новый ОписаниеТипов("СправочникСсылка.грОбъекты"));
	Таблица.Колонки.Добавить("ОбластьОбработки",	Новый ОписаниеТипов("СправочникСсылка.грОбъекты"));
	
	Возврат Таблица;
	
КонецФункции
//--- GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264}

//+++ GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751{
Функция ТаблицаОчередьОтложенногоПроведения()

	ОписаниеТипаОбластьОбработки = Новый ОписаниеТипов(Метаданные.РегистрыСведений.грЗаданияОбработкиПакетовИнтеграции.Измерения.ОбластьОбработки.Тип);

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Документ",			ОписаниеТипаОбластьОбработки);
	Таблица.Колонки.Добавить("ОбластьОбработки",	ОписаниеТипаОбластьОбработки);
	
	Возврат Таблица;

КонецФункции // ТаблицаОчередьОтложенногоПроведения()
//--- GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751}

Функция ДанныеДляОбработки(ПараметрыОбработки)

	ДанныеДляОбработки = Неопределено;
	Если ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов Тогда
		
		ДанныеДляОбработки = ТаблицаЗначенийИсточниковДозапросов();
		
	ИначеЕсли ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИзменениеОбъектов Тогда
		
		//+++ GRADUM, Теплоухов А.В. 2021_06_04 Задача № 21583{
		//ДанныеДляОбработки = ТаблицаИзменениеОбъектов();
		Если ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку Тогда
			ДанныеДляОбработки = ТаблицаСборкиОбъектов();
		//+++ GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264{
		ИначеЕсли ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ЗарегистрироватьЦеныПоставщика Тогда
			ДанныеДляОбработки = ТаблицаСборкиОбъектовЦеныПоставщика();
		//--- GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264}
		ИначеЕсли ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ПоместитьВОчередьОтложенногоПроведения Тогда
			ДанныеДляОбработки = ТаблицаОчередьОтложенногоПроведения();
		Иначе
			ДанныеДляОбработки = ТаблицаИзменениеОбъектов();
		КонецЕсли;
		//--- GRADUM, Теплоухов А.В. 2021_06_04 Задача № 21583}
		
	КонецЕсли;
	
	Возврат ДанныеДляОбработки;

КонецФункции // ДанныеДляОбработки()

#КонецОбласти

#Область ОбработкаПакетов

Функция ВыполнитьВходящийОбработчик(Знач КлассСообщения, Знач СтруктураСообщения, СостояниеСообщения, ТекстОшибки)
	
	СткОбработчик		= сшпКэшируемыеФункции.ПолучитьОбработчик(КлассСообщения, Перечисления.сшпТипыИнтеграции.Входящая, сшпФункциональныеОпции.ВерсияОбработчиков());
	ФорматСообщения		= сшпФункциональныеОпции.ФорматСообщения();
	Задержка			= 0;
	ДатаРегистрации		= ТекущаяДата();
	Компонента			= сшпКэшируемыеФункции.ПолучитьКомпоненту("RunInTemplate");
	СостояниеСообщения	= Перечисления.сшпСтатусыСообщений.Обработано;
	ИдШаблона			= СткОбработчик.ИдентификаторШаблона;
	
	ВерсияШаблона = СткОбработчик.Версия;
	Идентификатор = Строка( Новый УникальныйИдентификатор () );
	КоличествоПопытокОжидания = 30;
	
	Если Не СткОбработчик.ОбработчикНайден Тогда
		
		ТекстОшибки = "Отсутствует обработчик для класса " + КлассСообщения;
		
		Возврат Ложь;
		
	ИначеЕсли СткОбработчик.Отключен Тогда
		
		ТекстОшибки = "Обработчик для класса " + КлассСообщения + " найден, но отключен.";
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектСообщение =  сшпОбщегоНазначения.СформироватьСообщениеESB(ФабрикаXDTO, СтруктураСообщения);
	
	Попытка
		
		Выполнить(СткОбработчик.ПроцедураОбработки);
		
	Исключение
		
		ТекстОшибки = сшпОбщегоНазначения.ПолучитьТекстОшибкиОбработчика(ИнформацияОбОшибке());
		
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда
		
		ТекстОшибки = "Обработчик для класса " + КлассСообщения + " вернул состояние " + Строка(СостояниеСообщения);
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОтображениеПрогресса

Функция УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ИдентификаторЗаданияРодитель, Уровень)

	ТекущееФоновоеЗадание = НайтиФоновоеЗадание(Новый Структура("Ключ", ПараметрыОбработки.КлючФоновогоЗадания));
	
	ПараметрыДобавленияПрогресса = Новый Структура;
	ПараметрыДобавленияПрогресса.Вставить("ФоновоеЗадание"					, ТекущееФоновоеЗадание);
	ПараметрыДобавленияПрогресса.Вставить("ИдентификаторЗаданияРодитель"	, ИдентификаторЗаданияРодитель);
	ПараметрыДобавленияПрогресса.Вставить("Уровень"							, Уровень);
	
	РегистрыСведений.грПрогрессОтложенныхОперацийИнтеграции.ДобавитьЗапись(ПараметрыДобавленияПрогресса);
	
	Возврат ПараметрыДобавленияПрогресса;

КонецФункции // УстановитьСвязьФоновыхЗаданий()

Функция ПараметрыСообщенияПрогресса()

	Параметры = Новый Структура;
	Параметры.Вставить("КоличествоВсего"				, 0);
	Параметры.Вставить("Счетчик"						, 0);
	Параметры.Вставить("КоличествоСообщенийПрогресса"	, 0);
	
	Возврат Параметры;

КонецФункции // ПараметрыСообщенияПрогресса()

Процедура СообщитьПрогресс(Параметры)

	Параметры.Счетчик = Параметры.Счетчик + 1;//+Прогресс
	
	Процент = Цел(Параметры.Счетчик / Параметры.КоличествоВсего * 100);
	
	Если Не Процент = Параметры.КоличествоСообщенийПрогресса Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КоличествоОбработано"	, Параметры.Счетчик);
		ДополнительныеПараметры.Вставить("КоличествоВсего"		, Параметры.КоличествоВсего);
		
		ДлительныеОперации.СообщитьПрогресс(Формат(Процент, "ЧЦ=3; ЧДЦ="),,ДополнительныеПараметры);
		
		Параметры.КоличествоСообщенийПрогресса = Параметры.КоличествоСообщенийПрогресса + 1;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьПрогрессОтложенныхОперацийИнтеграции()

	ИнтервалОчистки = Константы.грИнтервалОчисткиПрогрессаОтложенныхОперацийИнтеграции.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	грПрогрессОтложенныхОперацийИнтеграции.Ключ КАК Ключ,
	|	грПрогрессОтложенныхОперацийИнтеграции.ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	грПрогрессОтложенныхОперацийИнтеграции.ИдентификаторЗаданияРодитель КАК ИдентификаторЗаданияРодитель
	|ИЗ
	|	РегистрСведений.грПрогрессОтложенныхОперацийИнтеграции КАК грПрогрессОтложенныхОперацийИнтеграции
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(грПрогрессОтложенныхОперацийИнтеграции.Начало, СЕКУНДА, &ИнтервалОчистки) <= &ТекущаяДата";
	
	Запрос.УстановитьПараметр("ИнтервалОчистки"	, ИнтервалОчистки);
	Запрос.УстановитьПараметр("ТекущаяДата"		, ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.грПрогрессОтложенныхОперацийИнтеграции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ключ.Установить(Выборка.Ключ);
		НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(Выборка.ИдентификаторЗадания);
		НаборЗаписей.Отбор.ИдентификаторЗаданияРодитель.Установить(Выборка.ИдентификаторЗаданияРодитель);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

Процедура УстановитьУсловноеОформление(Форма) Экспорт

	ПараметрыДерева = грОтложенныеОперацииИнтеграцииКлиентСервер.ПараметрыДереваЗаданий(Форма);
	
	//
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыДерева.ИмяДерева);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПараметрыДерева.ИмяДерева + ".НомерУровня");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= 0;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт" , Новый Шрифт(,,Истина));

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыполняемыеМетоды

#Область ОсновнойМетод

Функция УсловияПоТипуДозапроса(ТипДозапроса)

	Если ТипДозапроса = Перечисления.грТипыДозапросов.Дозапрос Тогда
		Префикс = "НЕ";
	ИначеЕсли ТипДозапроса = Перечисления.грТипыДозапросов.Пакет Тогда
		Префикс = "";
	КонецЕсли;
	
	УсловияПоТипуДозапроса = Новый Массив;
	УсловияПоТипуДозапроса.Добавить(СтрШаблон("%1 %2", Префикс, "грИсточникиДозапросов.Ключ = """""));
	УсловияПоТипуДозапроса.Добавить(СтрШаблон("%1 %2", Префикс, "грИсточникиДозапросов.idflow = """""));
	
	Возврат УсловияПоТипуДозапроса;
	
КонецФункции // УсловияПоТипуДозапроса() 

Процедура ЗаполнитьУсловияОтбораВТекстеЗапросаИсточникиДозапросов(Запрос, ПараметрыОбработки)
	
	Если ПараметрыОбработки.Свойство("ЭтоОбработкаКомандРегламентногоЗадания")Тогда
		
		//Условия отбора
		МассивСтрок = Новый Массив;
		
		//+++ GRADUM, Теплоухов А.В. 2021_05_19 Задача № 21539{
		//Если ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОтправитьДозапросы Тогда
		//	
		//	МассивСтрок.Добавить(" грИсточникиДозапросов.ДатаОбработкиПакета = ДАТАВРЕМЯ(1, 1, 1) И ");
		//	МассивСтрок.Добавить(" грОчередьДозапросов.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1) ");
		//
		//ИначеЕсли ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОбработатьПакеты Тогда
		Если ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОбработатьПакеты Тогда
		//--- GRADUM, Теплоухов А.В. 2021_05_19 Задача № 21539}
			
			МассивСтрок.Добавить(" грИсточникиДозапросов.ДатаОбработкиПакета = ДАТАВРЕМЯ(1, 1, 1) И ");
			МассивСтрок.Добавить(" грОчередьДозапросов.ДатаОтправки ЕСТЬ NULL ");
			
		ИначеЕсли ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОчиститьОтложенныеДозапросы Тогда
			
			МассивСтрок.Добавить(" НЕ грИсточникиДозапросов.ДатаОбработкиПакета = ДАТАВРЕМЯ(1, 1, 1) И ");
			МассивСтрок.Добавить(" грОчередьДозапросов.ДатаОтправки ЕСТЬ NULL ");
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбора", СтрСоединить(МассивСтрок, Символы.ПС));
		
	КонецЕсли;
	
	//Дополнительный отбор
	МассивСтрокДопОтбор = Новый Массив;
	Если ПараметрыОбработки.Свойство("Отборы") Тогда
		
		Для каждого ЭлементОтбора Из ПараметрыОбработки.Отборы Цикл
			
			Если ЭлементОтбора.Ключ = "ТипДозапроса" Тогда
				
				УсловияПоТипуДозапроса = УсловияПоТипуДозапроса(ЭлементОтбора.Значение);
				Для каждого Условие Из УсловияПоТипуДозапроса Цикл
					МассивСтрокДопОтбор.Добавить(Условие);
				КонецЦикла;
				
			Иначе
				
				МассивСтрокДопОтбор.Добавить(СтрШаблон("грИсточникиДозапросов.%1 = &%1", ЭлементОтбора.Ключ));
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокДопОтбор.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныйОтбор", СтрСоединить(МассивСтрокДопОтбор, " И" + Символы.ПС));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстЗапросаИсточникиДозапросовКлассID(Запрос, ПараметрыОбработки)

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	грИсточникиДозапросов.Ключ КАК Ключ,
	|	грИсточникиДозапросов.idflow КАК idflow,
	|	грИсточникиДозапросов.ID КАК ID,
	|	грИсточникиДозапросов.Класс КАК Класс,
	|	грИсточникиДозапросов.ДатаОбработкиПакета КАК ДатаОбработкиПакета
	|ПОМЕСТИТЬ ВТ_ИсточникиДозапросов
	|ИЗ
	|	РегистрСведений.грИсточникиДозапросов КАК грИсточникиДозапросов
	|ГДЕ
	|	&ДополнительныйОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	грЗаданияОбработкиПакетовИнтеграции.ID КАК ID,
	|	грЗаданияОбработкиПакетовИнтеграции.Класс КАК Класс
	|ПОМЕСТИТЬ ВТ_ЗаданияОбработкиПакетовИнтеграции
	|ИЗ
	|	РегистрСведений.грЗаданияОбработкиПакетовИнтеграции КАК грЗаданияОбработкиПакетовИнтеграции
	|ГДЕ
	|	грЗаданияОбработкиПакетовИнтеграции.Метод = &Метод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	грИсточникиДозапросов.ID КАК ID,
	|	грИсточникиДозапросов.Класс КАК Класс
	|ИЗ
	|	ВТ_ИсточникиДозапросов КАК грИсточникиДозапросов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грОчередьДозапросов КАК грОчередьДозапросов
	|		ПО грИсточникиДозапросов.Ключ = грОчередьДозапросов.Ключ
	|			И грИсточникиДозапросов.idflow = грОчередьДозапросов.idflow
	|ГДЕ
	|	НЕ (грИсточникиДозапросов.ID, грИсточникиДозапросов.Класс) В
	|				(ВЫБРАТЬ
	|					ВТ_ЗаданияОбработкиПакетовИнтеграции.ID КАК ID,
	|					ВТ_ЗаданияОбработкиПакетовИнтеграции.Класс КАК Класс
	|				ИЗ
	|					ВТ_ЗаданияОбработкиПакетовИнтеграции КАК ВТ_ЗаданияОбработкиПакетовИнтеграции)
	|	И &УсловияОтбора";
	
	Запрос.УстановитьПараметр("Метод"					, ПараметрыОбработки.Метод);
	Запрос.УстановитьПараметр("УсловияОтбора"			, Истина);
	Запрос.УстановитьПараметр("ДополнительныйОтбор"		, Истина);
	
	Если Не ПараметрыОбработки.ВсеЗаписи Тогда
		
		ТаблицаДозапросов = ТаблицаЗначенийИсточниковДозапросов();
		Для каждого Дозапрос Из ПараметрыОбработки.Дозапросы Цикл
			
			НоваяСтрока = ТаблицаДозапросов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Дозапрос);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаДозапросов", ТаблицаДозапросов);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.грИсточникиДозапросов", "&ТаблицаДозапросов");
		
	КонецЕсли;
	
	ЗаполнитьУсловияОтбораВТекстеЗапросаИсточникиДозапросов(Запрос, ПараметрыОбработки);
	
КонецПроцедуры // ТекстЗапросаОперацииИсточникиДозапросов()

Процедура ТекстЗапросаОтправкаДозапросов(Запрос, ПараметрыОбработки)

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	грЗаданияОбработкиПакетовИнтеграции.ID КАК ID,
	|	грЗаданияОбработкиПакетовИнтеграции.Класс КАК Класс
	|ПОМЕСТИТЬ ВТ_ЗаданияОбработкиПакетовИнтеграции
	|ИЗ
	|	РегистрСведений.грЗаданияОбработкиПакетовИнтеграции КАК грЗаданияОбработкиПакетовИнтеграции
	|ГДЕ
	|	грЗаданияОбработкиПакетовИнтеграции.Метод = &Метод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	грОчередьДозапросов.Ключ КАК ID,
	|	грОчередьДозапросов.idflow КАК Класс,
	|	грОчередьДозапросов.СчетчикОтправки КАК СчетчикОтправки
	|ИЗ
	|	РегистрСведений.грОчередьДозапросов КАК грОчередьДозапросов
	|ГДЕ
	|	НЕ (грОчередьДозапросов.Ключ, грОчередьДозапросов.idflow) В
	|				(ВЫБРАТЬ
	|					ВТ_ЗаданияОбработкиПакетовИнтеграции.ID КАК ID,
	|					ВТ_ЗаданияОбработкиПакетовИнтеграции.Класс КАК Класс
	|				ИЗ
	|					ВТ_ЗаданияОбработкиПакетовИнтеграции КАК ВТ_ЗаданияОбработкиПакетовИнтеграции)
	|	И ВЫБОР
	|			КОГДА &КоличествоПопытокОтправки = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ грОчередьДозапросов.СчетчикОтправки < &КоличествоПопытокОтправки
	|		КОНЕЦ
	|	И грОчередьДозапросов.ДатаОтправки < &ДатаПовторнойОтправки
	|
	|УПОРЯДОЧИТЬ ПО
	|	грОчередьДозапросов.СчетчикОтправки";
	
	ДатаПовторнойОтправки = ТекущаяДата() - Константы.грИнтервалОтправкиДозапроса.Получить();
	
	Запрос.УстановитьПараметр("ДатаПовторнойОтправки",		ДатаПовторнойОтправки);
	Запрос.УстановитьПараметр("Метод",						ПараметрыОбработки.Метод);
	Запрос.УстановитьПараметр("КоличествоПопытокОтправки",	Константы.грКоличествоПопытокОтправкиДозапросов.Получить());
	
КонецПроцедуры // ТекстЗапросаОперацииИсточникиДозапросов()

Процедура ТекстЗапросаИсточникиОтправкиДозапросов(Запрос, ПараметрыОбработки)
	
	Запрос.УстановитьПараметр("ДанныеДляОбработки"	, ПараметрыОбработки.ДанныеДляОбработки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.ID КАК ID,
	|	ДанныеДляОбработки.Класс КАК Класс
	|ПОМЕСТИТЬ ВТ_ДанныеДляОбработки
	|ИЗ
	|	&ДанныеДляОбработки КАК ДанныеДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	грОчередьДозапросов.Ключ КАК Ключ,
	|	грОчередьДозапросов.idflow КАК idflow
	|ИЗ
	|	РегистрСведений.грОчередьДозапросов КАК грОчередьДозапросов
	|ГДЕ
	|	(грОчередьДозапросов.Ключ, грОчередьДозапросов.idflow) В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеДляОбработки.ID КАК ID,
	|				ВТ_ДанныеДляОбработки.Класс КАК Класс
	|			ИЗ
	|				ВТ_ДанныеДляОбработки КАК ВТ_ДанныеДляОбработки)";
	
КонецПроцедуры // ТекстЗапросаОперацииИсточникиДозапросов()

Процедура ТекстЗапросаИсточникиДозапросов(Запрос, ПараметрыОбработки)
	
	Запрос.УстановитьПараметр("ДанныеДляОбработки"	, ПараметрыОбработки.ДанныеДляОбработки);
	Запрос.УстановитьПараметр("УсловияОтбора"		, Истина);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.ID КАК ID,
	|	ДанныеДляОбработки.Класс КАК Класс
	|ПОМЕСТИТЬ ВТ_ДанныеДляОбработки
	|ИЗ
	|	&ДанныеДляОбработки КАК ДанныеДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	грИсточникиДозапросов.Ключ КАК Ключ,
	|	грИсточникиДозапросов.idflow КАК idflow,
	|	грИсточникиДозапросов.ID КАК ID,
	|	грИсточникиДозапросов.Класс КАК Класс
	|ИЗ
	|	РегистрСведений.грИсточникиДозапросов КАК грИсточникиДозапросов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грОчередьДозапросов КАК грОчередьДозапросов
	|		ПО грИсточникиДозапросов.Ключ = грОчередьДозапросов.Ключ
	|			И грИсточникиДозапросов.idflow = грОчередьДозапросов.idflow
	|ГДЕ
	|	(грИсточникиДозапросов.ID, грИсточникиДозапросов.Класс) В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеДляОбработки.ID КАК ID,
	|				ВТ_ДанныеДляОбработки.Класс КАК Класс
	|			ИЗ
	|				ВТ_ДанныеДляОбработки КАК ВТ_ДанныеДляОбработки)
	|	И &ДополнительныйОтбор
	|	И &УсловияОтбора";
	
	Если ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОбработатьПакеты Тогда
	
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
			"ИТОГИ ПО
			|	Класс,
			|	ID";
	
	КонецЕсли;
	
	ЗаполнитьУсловияОтбораВТекстеЗапросаИсточникиДозапросов(Запрос, ПараметрыОбработки);
	
КонецПроцедуры // ТекстЗапросаОперацииИсточникиДозапросов()

Процедура ТекстЗапросаОперацииИзменениеОбъектов(Запрос, ПараметрыОбработки)

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	|	грОтложеннноеПроведение.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.грОтложеннноеПроведение КАК грОтложеннноеПроведение
	|ГДЕ
	|	НЕ грОтложеннноеПроведение.Ошибка";

КонецПроцедуры // ТекстЗапросаОперацииИзменениеОбъектов()

//+++ GRADUM, Теплоухов А.В. 2021_06_03 Задача № 21583{
Процедура ТекстЗапросаОперацииСборкиОбъектов(Запрос, ПараметрыОбработки)

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СлужебныеОбъекты.Ссылка КАК СлужебныйОбъект
	|ПОМЕСТИТЬ ВтПакетыДляСборки
	|ИЗ
	|	Справочник.грОбъекты КАК СлужебныеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грИсточникиДозапросов КАК ИсточникиДозапросов
	|		ПО СлужебныеОбъекты.КлючОснования = ИсточникиДозапросов.ID
	|			И СлужебныеОбъекты.Класс = ИсточникиДозапросов.Класс
	|ГДЕ
	|	СлужебныеОбъекты.ГотовКСборке
	|	И СлужебныеОбъекты.Класс = ""352""
	|	И ИсточникиДозапросов.ID ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПакетыДляСборки.СлужебныйОбъект КАК СлужебныйОбъект,
	|	спрВидыЦен.Ссылка КАК ВидЦены
	|ПОМЕСТИТЬ ВтСлужебныйОбъектВидЦены
	|ИЗ
	|	ВтПакетыДляСборки КАК ВтПакетыДляСборки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.грОбъекты.ДополнительныеРеквизиты КАК ВидыЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|			ПО ВидыЦен.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|				И (ДополнительныеРеквизитыИСведения.Имя ПОДОБНО ""ВидЦены_%"")
	|				И (ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_грОбъекты))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК спрВидыЦен
	|			ПО ВидыЦен.Значение = спрВидыЦен.Ссылка
	|		ПО ВтПакетыДляСборки.СлужебныйОбъект = ВидыЦен.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10000
	|	ВтСлужебныйОбъектВидЦены.СлужебныйОбъект КАК СлужебныйОбъект,
	|	ВтСлужебныйОбъектВидЦены.ВидЦены КАК ОбластьОбработки,
	|	ЕСТЬNULL(ВзКоличествоОбъектов.КоличествоОбъектов, 0) КАК КоличествоОбъектов
	|ИЗ
	|	ВтСлужебныйОбъектВидЦены КАК ВтСлужебныйОбъектВидЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВтСлужебныйОбъектВидЦены.ВидЦены КАК ВидЦены,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтСлужебныйОбъектВидЦены.СлужебныйОбъект) КАК КоличествоОбъектов
	|		ИЗ
	|			ВтСлужебныйОбъектВидЦены КАК ВтСлужебныйОбъектВидЦены
	|		ГДЕ
	|			НЕ ВтСлужебныйОбъектВидЦены.ВидЦены В
	|						(ВЫБРАТЬ
	|							грЗаданияОбработкиПакетовИнтеграции.ОбластьОбработки КАК ОбластьОбработки
	|						ИЗ
	|							РегистрСведений.грЗаданияОбработкиПакетовИнтеграции КАК грЗаданияОбработкиПакетовИнтеграции
	|						ГДЕ
	|							грЗаданияОбработкиПакетовИнтеграции.Метод = ЗНАЧЕНИЕ(Перечисление.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтСлужебныйОбъектВидЦены.ВидЦены) КАК ВзКоличествоОбъектов
	|		ПО ВтСлужебныйОбъектВидЦены.ВидЦены = ВзКоличествоОбъектов.ВидЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоОбъектов УБЫВ,
	|	ОбластьОбработки";
	
КонецПроцедуры // ТекстЗапросаОперацииСборкиОбъектов

Процедура ТекстЗапросаОбъектыИАлгоритмыСборки(Запрос, ПараметрыОбработки)

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.СлужебныйОбъект КАК СлужебныйОбъект
	|ПОМЕСТИТЬ ВтСлужебныйОбъект
	|ИЗ
	|	&ДанныеДляОбработки КАК ДанныеДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТиповПрефиксовКлючей.ТипОбъекта КАК ТипОбъекта,
	|	ТаблицаТиповПрефиксовКлючей.Префикс КАК Префикс
	|ПОМЕСТИТЬ ВтТипыИПерфиксыОбъектов
	|ИЗ
	|	&ТаблицаТиповПрефиксовКлючей КАК ТаблицаТиповПрефиксовКлючей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзМаксТипОбъекта.Префикс КАК Префикс,
	|	ВзМаксТипОбъекта.Ссылка.АлгоритмОбработки КАК АлгоритмОбработки
	|ПОМЕСТИТЬ ВтАлгоритмСборки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзМаксВерсия.Префикс КАК Префикс,
	|		МАКСИМУМ(ТипыОбъектов.Ссылка) КАК Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВтТипыИПерфиксыОбъектов.ТипОбъекта КАК ТипОбъекта,
	|			ВтТипыИПерфиксыОбъектов.Префикс КАК Префикс,
	|			МАКСИМУМ(ТипыОбъектов.Версия) КАК Версия
	|		ИЗ
	|			ВтТипыИПерфиксыОбъектов КАК ВтТипыИПерфиксыОбъектов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.грТипыОбъектов КАК ТипыОбъектов
	|				ПО ВтТипыИПерфиксыОбъектов.ТипОбъекта = ТипыОбъектов.Наименование
	|					И (НЕ ТипыОбъектов.ПометкаУдаления)
	|					И (ТипыОбъектов.Включен)
	|					И ((ВЫРАЗИТЬ(ТипыОбъектов.АлгоритмОбработки КАК СТРОКА(1000))) <> """")
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтТипыИПерфиксыОбъектов.Префикс,
	|			ВтТипыИПерфиксыОбъектов.ТипОбъекта) КАК ВзМаксВерсия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.грТипыОбъектов КАК ТипыОбъектов
	|			ПО ВзМаксВерсия.ТипОбъекта = ТипыОбъектов.Наименование
	|				И ВзМаксВерсия.Версия = ТипыОбъектов.Версия
	|				И (ТипыОбъектов.Включен)
	|				И (НЕ ТипыОбъектов.ПометкаУдаления)
	|				И ((ВЫРАЗИТЬ(ТипыОбъектов.АлгоритмОбработки КАК СТРОКА(1000))) <> """")
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзМаксВерсия.Префикс) КАК ВзМаксТипОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтСлужебныйОбъект.СлужебныйОбъект КАК СлужебныйОбъект,
	|	Объекты.КлючОснования КАК Ключ,
	|	Объекты.Класс КАК Класс,
	|	ВтАлгоритмСборки.АлгоритмОбработки КАК Алгоритм,
	|	Объекты.Пакет КАК Пакет,
	|	ВзДанныеПоТПК.ВремяПакета КАК ВремяПакета,
	|	ВзДанныеПоТПК.ВидИдентификатора КАК ВидИдентификатора,
	|	ВзДанныеПоТПК.Отправитель КАК Отправитель
	|ИЗ
	|	ВтСлужебныйОбъект КАК ВтСлужебныйОбъект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.грОбъекты КАК Объекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтАлгоритмСборки КАК ВтАлгоритмСборки
	|			ПО (ПОДСТРОКА(Объекты.КлючОснования, 1, 4) = ВтАлгоритмСборки.Префикс)
	|		ПО ВтСлужебныйОбъект.СлужебныйОбъект = Объекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВтСлужебныйОбъект.СлужебныйОбъект КАК СлужебныйОбъект,
	|			МАКСИМУМ(грТаблицаПереходныхКлючейERP.ДатаОбновления) КАК ВремяПакета,
	|			МАКСИМУМ(грТаблицаПереходныхКлючейERP.ВидИдентификатораСтрока) КАК ВидИдентификатора,
	|			МАКСИМУМ(грТаблицаПереходныхКлючейERP.ВнешняяСистема) КАК Отправитель
	|		ИЗ
	|			ВтСлужебныйОбъект КАК ВтСлужебныйОбъект
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грТаблицаПереходныхКлючейERP КАК грТаблицаПереходныхКлючейERP
	|				ПО ВтСлужебныйОбъект.СлужебныйОбъект = грТаблицаПереходныхКлючейERP.ОбъектERP
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтСлужебныйОбъект.СлужебныйОбъект) КАК ВзДанныеПоТПК
	|		ПО ВтСлужебныйОбъект.СлужебныйОбъект = ВзДанныеПоТПК.СлужебныйОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Класс";
	
КонецПроцедуры
//--- GRADUM, Теплоухов А.В. 2021_06_03 Задача № 21583}

//+++ GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264{
Процедура ТекстЗапросаОперацииЗарегистрироватьЦеныПоставщика(Запрос, ПараметрыОбработки)

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СлужебныеОбъекты.Ссылка КАК СлужебныйОбъект
	|ПОМЕСТИТЬ ВтПакетыДляСборки
	|ИЗ
	|	Справочник.грОбъекты КАК СлужебныеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грИсточникиДозапросов КАК ИсточникиДозапросов
	|		ПО СлужебныеОбъекты.КлючОснования = ИсточникиДозапросов.ID
	|			И СлужебныеОбъекты.Класс = ИсточникиДозапросов.Класс
	|ГДЕ
	|	СлужебныеОбъекты.ГотовКСборке
	|	И СлужебныеОбъекты.Класс = ""10006""
	|	И ИсточникиДозапросов.ID ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10000
	|	ВтПакетыДляСборки.СлужебныйОбъект КАК СлужебныйОбъект,
	|	ВтПакетыДляСборки.СлужебныйОбъект КАК ОбластьОбработки
	|ИЗ
	|	ВтПакетыДляСборки КАК ВтПакетыДляСборки
	|ГДЕ
	|	НЕ ВтПакетыДляСборки.СлужебныйОбъект В
	|				(ВЫБРАТЬ
	|					грЗаданияОбработкиПакетовИнтеграции.ОбластьОбработки КАК ОбластьОбработки
	|				ИЗ
	|					РегистрСведений.грЗаданияОбработкиПакетовИнтеграции КАК грЗаданияОбработкиПакетовИнтеграции
	|				ГДЕ
	|					грЗаданияОбработкиПакетовИнтеграции.Метод = ЗНАЧЕНИЕ(Перечисление.грМетодыОтложенныхОперацийИнтеграции.ЗарегистрироватьЦеныПоставщика))";
	
КонецПроцедуры // ТекстЗапросаОперацииСборкиОбъектов
//--- GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264}

Процедура ОбработатьИсточникиДанных( ПараметрыОбработки, АдресРезультата = Неопределено ) Экспорт 
	
	//Параметры
	КоличествоФЗ						= 10;
	
	КоличествоЗапущенныхФЗ				= 0;
	КоличествоОбработанныхПакетов		= 0;
	ДанныеДляОбработки					= Новый Массив;
	ЗаданияНаОбработку					= Новый Массив;
	ЗаданияНаОбработкуПакетовИнтеграции = Новый Массив;
	
	Если ПараметрыОбработки.Свойство( "ПараметрыПорций" ) Тогда
		РазмерПорции						= ПараметрыОбработки.ПараметрыПорций.Размер;
		КоличествоОбъектовДляОбработки		= ПараметрыОбработки.ПараметрыПорций.Количество;
	Иначе
		РазмерПорции						= сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грРазмерПорцииОтложенныхОперацийИнтеграции" );
		КоличествоОбъектовДляОбработки		= сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грКоличествоОбъектовДляОбработкиОтложеннымиОперациямиИнтеграции" );
	КонецЕсли;
	
	//+++ GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583{
	КонтрольПорцииОбластиОбработки	= Ложь;
	ОбластьОбработки				= Неопределено;
	Если ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку Тогда
		КонтрольПорцииОбластиОбработки = Истина;
	КонецЕсли;
	//--- GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583}
	
	//+++ GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583{
	//Если ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов Тогда
	Если ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов 
		ИЛИ ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку
		ИЛИ ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ПоместитьВОчередьОтложенногоПроведения 
		ИЛИ ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ЗарегистрироватьЦеныПоставщика Тогда
	//--- GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583}
		ПараметрыОбработки.Вставить("ЭтоПараметрыЗаданияОбработкиПакетовИнтеграции");
	КонецЕсли;
	
	ДанныеДляОбработки = ДанныеДляОбработки(ПараметрыОбработки);
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьНеиспользуемыеЗаданияОбработкиПакетовИнтеграции();
	
	//+Прогресс
	ОчиститьПрогрессОтложенныхОперацийИнтеграции();
	
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.КлючФоновогоЗадания, 0);
	//-Прогресс
	
	ЗначениеКоличествоФЗ = Константы.грКоличествоОдновременноЗапущенныхФоновыхЗаданий.Получить();
	Если ЗначениеКоличествоФЗ <> 0 Тогда
		КоличествоФЗ = ЗначениеКоличествоФЗ;
	КонецЕсли;
	
	//Текст запроса
	Запрос = Новый Запрос;
	
	Если ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов Тогда
		
		//+++ GRADUM, Теплоухов А.В. 2021_05_19 Задача № 21539{
		//ТекстЗапросаИсточникиДозапросовКлассID(Запрос, ПараметрыОбработки);

		Если ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ОтправитьДозапросы Тогда
			ТекстЗапросаОтправкаДозапросов(Запрос, ПараметрыОбработки);
		Иначе
			ТекстЗапросаИсточникиДозапросовКлассID(Запрос, ПараметрыОбработки);
		КонецЕсли;
		//--- GRADUM, Теплоухов А.В. 2021_05_19 Задача № 21539}
		
	//+++ GRADUM, Теплоухов А.В. 2021_06_03 Задача № 21583{
	//ИначеЕсли ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИзменениеОбъектов Тогда
		//ТекстЗапросаОперацииИзменениеОбъектов(Запрос, ПараметрыОбработки);
	ИначеЕсли ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИзменениеОбъектов
		И ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ПровестиДокументы Тогда
		ТекстЗапросаОперацииИзменениеОбъектов(Запрос, ПараметрыОбработки);
	ИначеЕсли ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИзменениеОбъектов
		И ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку Тогда
		ПараметрыОбработки.Вставить("КоличествоФЗ", КоличествоФЗ);
		ТекстЗапросаОперацииСборкиОбъектов(Запрос, ПараметрыОбработки);
	//--- GRADUM, Теплоухов А.В. 2021_06_03 Задача № 21583}
	//+++ GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751{
	ИначеЕсли ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИзменениеОбъектов
		И ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ПоместитьВОчередьОтложенногоПроведения Тогда
		ТабДанные = ПолучитьДанныеДляОтложенногоПроведения(ДанныеДляОбработки, КоличествоОбъектовДляОбработки, ПараметрыОбработки);
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Вт ИЗ &ТабДанные КАК ТабДанные; ВЫБРАТЬ * ИЗ Вт КАК Вт";
		Запрос.УстановитьПараметр("ТабДанные", ТабДанные);
	//--- GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751}
	//+++ GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264{
	ИначеЕсли ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИзменениеОбъектов
		И ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ЗарегистрироватьЦеныПоставщика Тогда
		ТекстЗапросаОперацииЗарегистрироватьЦеныПоставщика(Запрос, ПараметрыОбработки);
	//--- GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264}
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 10000", ?(КоличествоОбъектовДляОбработки = 0, "", "ПЕРВЫЕ " + Формат(КоличествоОбъектовДляОбработки, "ЧГ=0")));

	РезультатЗапроса	= Запрос.Выполнить();
	ВыборкаДанных		= РезультатЗапроса.Выбрать();
	
	//+++ GRADUM, Теплоухов А.В. 2021_04_28 Задача № 21329 {
	
	Если ПараметрыОбработки.Свойство("Метод") Тогда
		
		Отбор = Новый Структура("ИмяМетода, Конец", 
			"ДлительныеОперации.ВыполнитьСКонтекстомКлиента", Дата(1,1,1));
		ЗапущенныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Для Каждого Фз Из ЗапущенныеФЗ Цикл
			Если СтрНайти(Фз.Ключ, "" + ПараметрыОбработки.Метод) <> 0 Тогда
				КоличествоЗапущенныхФЗ = КоличествоЗапущенныхФЗ + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//--- GRADUM, Теплоухов А.В. 2021_04_28 Задача № 21329 }
	
	//Запуск заданий
	Пока ВыборкаДанных.Следующий() Цикл
		
		//+++ GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583{
		Если КоличествоЗапущенныхФЗ >= КоличествоФЗ Тогда
			Прервать;
		КонецЕсли;
		
		Если КонтрольПорцииОбластиОбработки Тогда
			
			Если ОбластьОбработки = Неопределено Тогда
				ОбластьОбработки = ВыборкаДанных.ОбластьОбработки;
			КонецЕсли;
			
			Если ОбластьОбработки = ВыборкаДанных.ОбластьОбработки
				И КоличествоОбработанныхПакетов >= РазмерПорции Тогда
				
				КоличествоОбработанныхПакетов = КоличествоОбработанныхПакетов + 1;
				Продолжить;
				
			ИначеЕсли ОбластьОбработки <> ВыборкаДанных.ОбластьОбработки
				И КоличествоОбработанныхПакетов >= РазмерПорции Тогда
				
				ОбластьОбработки = ВыборкаДанных.ОбластьОбработки;
				КоличествоОбработанныхПакетов = 0;
				
			ИначеЕсли ОбластьОбработки <> ВыборкаДанных.ОбластьОбработки
				И КоличествоЗапущенныхФЗ <= КоличествоФЗ Тогда
				
				ДлительнаяОперация = ЗапуститьДлительнуюОперациюПорцией(ПараметрыОбработки, ДанныеДляОбработки, ПараметрыСвязиЗаданий);
				
				ЗаданияНаОбработку.Добавить(ДлительнаяОперация);
				ЗаданияНаОбработкуПакетовИнтеграции.Добавить(ДлительнаяОперация);
				
				КоличествоЗапущенныхФЗ			= КоличествоЗапущенныхФЗ + 1;
				КоличествоОбработанныхПакетов	= 0;
				
				ДанныеДляОбработки	= ДанныеДляОбработки(ПараметрыОбработки);
				ОбластьОбработки	= ВыборкаДанных.ОбластьОбработки;
				
			КонецЕсли;
			
		КонецЕсли;
		//--- GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583}
		
		НоваяСтрока = ДанныеДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанных);
			
		КоличествоОбработанныхПакетов = КоличествоОбработанныхПакетов + 1;
		
		Если КоличествоОбработанныхПакетов = РазмерПорции И КоличествоЗапущенныхФЗ <= КоличествоФЗ Тогда
			
			ДлительнаяОперация = ЗапуститьДлительнуюОперациюПорцией(ПараметрыОбработки, ДанныеДляОбработки, ПараметрыСвязиЗаданий);
			
			ЗаданияНаОбработку.Добавить( ДлительнаяОперация );
			ЗаданияНаОбработкуПакетовИнтеграции.Добавить( ДлительнаяОперация );
			
			КоличествоЗапущенныхФЗ			= КоличествоЗапущенныхФЗ + 1;
			
			//+++ GRADUM, Теплоухов А.В. 2021_06_16 Задача № 21583{
			//КоличествоОбработанныхПакетов	= 0;
			//--- GRADUM, Теплоухов А.В. 2021_06_16 Задача № 21583}
			
			ДанныеДляОбработки				= ДанныеДляОбработки(ПараметрыОбработки);
			
			//+++ GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583{
			Если Не КонтрольПорцииОбластиОбработки Тогда
				КоличествоОбработанныхПакетов = 0;
			КонецЕсли;
			//--- GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583}
			
		КонецЕсли;
		
	КонецЦикла;
	
	//+++ GRADUM, Теплоухов А.В. 2021_04_28 Задача № 21329{
	//Если ДанныеДляОбработки.Количество() Тогда
	Если ДанныеДляОбработки.Количество() И КоличествоЗапущенныхФЗ < КоличествоФЗ Тогда
	//--- GRADUM, Теплоухов А.В. 2021_04_28 Задача № 21329}
	
		ДлительнаяОперация = ЗапуститьДлительнуюОперациюПорцией(ПараметрыОбработки, ДанныеДляОбработки, ПараметрыСвязиЗаданий);
		
		ЗаданияНаОбработку.Добавить( ДлительнаяОперация );
		ЗаданияНаОбработкуПакетовИнтеграции.Добавить( ДлительнаяОперация );
		
	КонецЕсли;
	
	//+++ GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21751{
	//Если ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов Тогда
	Если ПараметрыОбработки.Операция = Перечисления.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов 
		ИЛИ ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку 
		ИЛИ ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ПоместитьВОчередьОтложенногоПроведения 
		ИЛИ ПараметрыОбработки.Метод = Перечисления.грМетодыОтложенныхОперацийИнтеграции.ЗарегистрироватьЦеныПоставщика 
		Тогда
	//--- GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21751}
		ПараметрыОбработки.Удалить("ЭтоПараметрыЗаданияОбработкиПакетовИнтеграции");
		ПараметрыОбработки.Вставить("ЗаданияНаОбработкуПакетовИнтеграции", ЗаданияНаОбработкуПакетовИнтеграции);
	КонецЕсли; 
	
	ПроверитьВыполнениеОбработкиФоновыхЗаданий( ЗаданияНаОбработку, ПараметрыОбработки );
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияОбработкиПакетовИнтеграции 

Процедура ДобавитьЗаданияОбработкиПакетовИнтеграции( ПараметрыОбработки, АдресРезультата = Неопределено ) Экспорт

	//+Прогресс
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 1);
	//-Прогресс
	
	ИдЗаданияОбработкиПакетовИнтеграции = Новый УникальныйИдентификатор;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдЗаданияОбработкиПакетовИнтеграции", ИдЗаданияОбработкиПакетовИнтеграции);
	Результат.Вставить("ДанныеДляОбработки"					, ПараметрыОбработки.ДанныеДляОбработки);
	Результат.Вставить("Метод"								, ПараметрыОбработки.Метод);
	Результат.Вставить("ИдентификаторЗаданияРодитель"		, ПараметрыСвязиЗаданий.ФоновоеЗадание.УникальныйИдентификатор); //+Прогресс
	Результат.Вставить("Отборы"								, ПараметрыОбработки.Отборы);
	
	ПоместитьВоВременноеХранилище( Результат, АдресРезультата );
	
	ДатаЗаписи = ТекущаяДатаСеанса();
	
	КоличествоВсего						= ПараметрыОбработки.ДанныеДляОбработки.Количество();
	Счетчик								= 0;
	КоличествоСообщенийПрогресса		= 0;
	
	Для каждого СтрокаТаблицы Из ПараметрыОбработки.ДанныеДляОбработки Цикл
		
		Счетчик = Счетчик + 1;
		
		МенеджерЗаписи = РегистрыСведений.грЗаданияОбработкиПакетовИнтеграции.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( МенеджерЗаписи, СтрокаТаблицы );
		МенеджерЗаписи.Метод				= ПараметрыОбработки.Метод;
		МенеджерЗаписи.ИдентификаторЗадания	= ИдЗаданияОбработкиПакетовИнтеграции;
		МенеджерЗаписи.ДатаЗаписи			= ДатаЗаписи;
		МенеджерЗаписи.Записать();
		
		Процент = Цел(Счетчик/КоличествоВсего*100);
		
		Если Не Процент = КоличествоСообщенийПрогресса Тогда
			
			ДлительныеОперации.СообщитьПрогресс(Формат(Процент, "ЧЦ=3; ЧДЦ="));
			
			КоличествоСообщенийПрогресса = КоличествоСообщенийПрогресса + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЗаданияОбработкиПакетовИнтеграции( КлючЗадания ) Экспорт
	
	Если ТипЗнч(КлючЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(КлючЗадания);
	Иначе
		ИдентификаторЗадания = КлючЗадания;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.грЗаданияОбработкиПакетовИнтеграции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(ИдентификаторЗадания);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеЗаданияОбработкиПакетовИнтеграции() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	грЗаданияОбработкиПакетовИнтеграции.ИдентификаторЗадания КАК ИдентификаторЗадания
	|ИЗ
	|	РегистрСведений.грЗаданияОбработкиПакетовИнтеграции КАК грЗаданияОбработкиПакетовИнтеграции";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ"		, Строка(Выборка.ИдентификаторЗадания));
		Отбор.Вставить("Состояние"	, СостояниеФоновогоЗадания.Активно);
		
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Если МассивФоновыхЗаданий.Количество() = 0 Тогда
		
			ОчиститьЗаданияОбработкиПакетовИнтеграции( Выборка.ИдентификаторЗадания );
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыИсточниковДозапросов

Процедура ОчиститьОтложенныеДозапросы( ПараметрыОбработки, АдресРезультата = Неопределено ) Экспорт 
	
	//+Прогресс
	ПараметрыСвязиЗаданий		= УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 3);
	
	ПараметрыСообщенияПрогресса	= ПараметрыСообщенияПрогресса();
	//-Прогресс
	
	Запрос = Новый Запрос;
	ТекстЗапросаИсточникиДозапросов(Запрос, ПараметрыОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//+Прогресс
	ПараметрыСообщенияПрогресса.КоличествоВсего	= Выборка.Количество();
	//-Прогресс
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.грИсточникиДозапросов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( МенеджерЗаписи, Выборка );
		МенеджерЗаписи.Удалить();
		
		СообщитьПрогресс(ПараметрыСообщенияПрогресса);//+Прогресс
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает пакеты отложенных дозапросов
//
// Параметры:
//   ПараметрыОбработки - Структура:
//     * Дозапросы - Массив из Структуры:
//	 АдресРезультата - Строка    - адрес временного хранилища, в которое нужно поместить результат работы процедуры
//
Процедура ОбработатьПакеты( ПараметрыОбработки, АдресРезультата = Неопределено ) Экспорт 
	
	//+Прогресс
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 2);
	
	ПараметрыСообщенияПрогресса = ПараметрыСообщенияПрогресса();
	ПараметрыСообщенияПрогресса.КоличествоВсего	= ПараметрыОбработки.ДанныеДляОбработки.Количество();
	//-Прогресс
	
	ОбработанныеПакеты	= ТаблицаЗначенийИсточниковДозапросов();
	ТекстОшибки			= "";
	
	Запрос = Новый Запрос;
	ТекстЗапросаИсточникиДозапросов(Запрос, ПараметрыОбработки);
	
	ВыборкаКласс = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКласс.Следующий() Цикл
		
		ВыборкаID = ВыборкаКласс.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаID.Следующий() Цикл
			
			ПакетОбработан = Ложь;
			
			ВыборкаДетально = ВыборкаID.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетально.Следующий() Цикл
				
				xmlПакет = "";
				
				Запись = РегистрыСведений.грИсточникиДозапросов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств( Запись, ВыборкаДетально );
				Запись.Прочитать();
				
				Если Не ПакетОбработан Тогда
				
					Если Запись.Выбран() Тогда
						xmlПакет = Запись.ПакетXDTO.Получить();
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(xmlПакет) Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураСообщения = сшпОбщегоНазначения.СформироватьСтруктуруПакета( , ВыборкаДетально.Класс, xmlПакет );
					
					Properties = Новый Структура;
					Properties.Вставить( "ВремяПакета", XMLСтрока(ТекущаяДатаСеанса()) );
					
					СтруктураСообщения.Properties	= Properties;
					Если Не ЗначениеЗаполнено( Запись.Source ) Тогда
						СтруктураСообщения.Source		= "FileTestIn";
					Иначе
						СтруктураСообщения.Source		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Запись.Source, "НазваниеАдаптера" );
					КонецЕсли;
					
					ВыполнитьВходящийОбработчик( ВыборкаДетально.Класс, СтруктураСообщения, Неопределено, ТекстОшибки );
					
					ПакетОбработан = Истина;
					
				КонецЕсли;
				
				Запись.ДатаОбработкиПакета = ТекущаяДатаСеанса();
				Запись.Записать();
				
				НоваяСтрока = ОбработанныеПакеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетально);
				
			КонецЦикла;
			
			СообщитьПрогресс(ПараметрыСообщенияПрогресса);//+Прогресс
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище( ОбработанныеПакеты, АдресРезультата );
	
КонецПроцедуры

// Отправляет дозапросы
//
// Параметры:
//   ПараметрыОбработки - Структура:
//     * Дозапросы - Массив из РегистрСведенийКлючЗаписи.грИсточникиДозапросов.
//	 АдресРезультата - Строка    - адрес временного хранилища, в которое нужно поместить результат работы процедуры
//
Процедура ОтправитьДозапросы( ПараметрыОбработки, АдресРезультата = Неопределено  ) Экспорт 
	
	//+Прогресс
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 2);
	
	ПараметрыСообщенияПрогресса = ПараметрыСообщенияПрогресса();
	ПараметрыСообщенияПрогресса.КоличествоВсего	= ПараметрыОбработки.ДанныеДляОбработки.Количество();
	//-Прогресс
	
	ОбработанныеДозапросы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	ТекстЗапросаИсточникиОтправкиДозапросов(Запрос, ПараметрыОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СообщитьПрогресс(ПараметрыСообщенияПрогресса);//+Прогресс
		
		ПараметрыДозапроса = Новый Структура;
		ПараметрыДозапроса.Вставить("idflow", Выборка.idflow);
		ПараметрыДозапроса.Вставить("Ключ"	, Выборка.Ключ);
		
		Если Не ОбработанныеДозапросы.Получить( ПараметрыДозапроса ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.грОчередьДозапросов.ОтправитьДозапрос( Выборка.idflow, Выборка.Ключ );
		
		ОбработанныеДозапросы.Вставить( ПараметрыДозапроса, ПараметрыДозапроса );
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище( ОбработанныеДозапросы, АдресРезультата );
	
КонецПроцедуры

#КонецОбласти

#Область МетодыИзмененияОбъектов

Процедура ПровестиДокументы(ПараметрыОбработки, АдресРезультата = Неопределено) Экспорт
	
	//+Прогресс
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 1);
	
	ПараметрыСообщенияПрогресса = ПараметрыСообщенияПрогресса();
	ПараметрыСообщенияПрогресса.КоличествоВсего	= ПараметрыОбработки.ДанныеДляОбработки.Количество();
	//-Прогресс
	
	Для Каждого Данные Из ПараметрыОбработки.ДанныеДляОбработки Цикл
		
		//+++ GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977{
		//Если Не ОбщегоНазначения.СсылкаСуществует(Данные.Документ) Тогда
		Если Не ОбщегоНазначения.СсылкаСуществует(Данные.Документ)
			Или ДокументПомеченНаУдалениеИлиНеПроведенВременная(Данные.Документ) Тогда
		//--- GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977}
			
			МенеджерЗаписи = РегистрыСведений.грОтложеннноеПроведение.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Документ	= Данные.Документ;
			МенеджерЗаписи.Удалить();

			Продолжить;
		КонецЕсли;
		
		ВыполнитьОтложенноеПроведениеДокумента ( Данные.Документ );
		
		СообщитьПрогресс(ПараметрыСообщенияПрогресса);//+Прогресс
		
	КонецЦикла;
	
КонецПроцедуры

//+++ GRADUM, Теплоухов А.В. 2021_06_02 Задача № 21583{
Процедура ВыполнитьСборку(ПараметрыОбработки, АдресРезультата = Неопределено) Экспорт
	
	//+Прогресс
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 1);
	
	ПараметрыСообщенияПрогресса = ПараметрыСообщенияПрогресса();
	ПараметрыСообщенияПрогресса.КоличествоВсего	= ПараметрыОбработки.ДанныеДляОбработки.Количество();
	//-Прогресс

	ТаблицаТиповПрефиксовКлючей = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуТиповПрефиксовКлючейESB();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеДляОбработки",				ПараметрыОбработки.ДанныеДляОбработки);
	Запрос.УстановитьПараметр("ТаблицаТиповПрефиксовКлючей",	ТаблицаТиповПрефиксовКлючей);
	
	ТекстЗапросаОбъектыИАлгоритмыСборки(Запрос, ПараметрыОбработки);
	
	ДанныеДляОбработки = Запрос.Выполнить().Выгрузить();
	
	РезультатВыполнения = ВыполнитьАлгоритмСборкиОбъектов(ДанныеДляОбработки);
	
	СообщитьПрогресс(ПараметрыСообщенияПрогресса);//+Прогресс
	
КонецПроцедуры
//--- GRADUM, Теплоухов А.В. 2021_06_02 Задача № 21583}

//+++ GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264{
Процедура ЗарегистрироватьЦеныПоставщика(ПараметрыОбработки, АдресРезультата = Неопределено) Экспорт
	
	//+Прогресс
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 1);
	
	ПараметрыСообщенияПрогресса = ПараметрыСообщенияПрогресса();
	ПараметрыСообщенияПрогресса.КоличествоВсего	= ПараметрыОбработки.ДанныеДляОбработки.Количество();
	//-Прогресс

	Для Каждого Данные Из ПараметрыОбработки.ДанныеДляОбработки Цикл
		
		ВыполнитьАлгоритмРегистрацииЦеныПоставщика(Данные.СлужебныйОбъект);
		
		СообщитьПрогресс(ПараметрыСообщенияПрогресса);//+Прогресс
		
	КонецЦикла;
	
КонецПроцедуры
//--- GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264}

//+++ GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751{
Процедура ПоместитьВОчередьОтложенногоПроведения(ПараметрыОбработки, АдресРезультата = Неопределено) Экспорт

	//+Прогресс
	ПараметрыСвязиЗаданий = УстановитьСвязьФоновыхЗаданий(ПараметрыОбработки, ПараметрыОбработки.ИдентификаторЗаданияРодитель, 1);
	
	ПараметрыСообщенияПрогресса = ПараметрыСообщенияПрогресса();
	ПараметрыСообщенияПрогресса.КоличествоВсего	= ПараметрыОбработки.ДанныеДляОбработки.Количество();
	//-Прогресс
	
	ДатаПакета = ТекущаяДата();
	Для Каждого Данные Из ПараметрыОбработки.ДанныеДляОбработки Цикл
		
		МенеджерЗаписи = РегистрыСведений.грОтложеннноеПроведение.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ		= Данные.Документ;
		МенеджерЗаписи.ДатаПакета	= ДатаПакета;
		МенеджерЗаписи.Записать();
		
		СообщитьПрогресс(ПараметрыСообщенияПрогресса);//+Прогресс
		
	КонецЦикла;

	СформироватьПротоколПомещенныхДокументовДляПроведения(ПараметрыОбработки.ДанныеДляОбработки, ДатаПакета);
	
КонецПроцедуры
//--- GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751}

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьОтложенноеПроведениеДокумента(
		ДокументСсылка,
		ДополнительныеСвойстваОбъекта = Неопределено) Экспорт
	
	ОписаниеОшибки          = "";
	ДокументПроведенУспешно = Ложь;
	
	НачатьТранзакцию();
	
	//+++ GRADUM, Теплоухов А.В. 2021_05_12 Задача № 21447{
	БлокировкаУстановлена = Ложь;
	Для СчетчикПопыток = 1 По 10 Цикл
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументСсылка));
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
			Блокировка.Заблокировать();
			
			БлокировкаУстановлена = Истина;
			Прервать;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Если НЕ БлокировкаУстановлена Тогда 
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	//--- GRADUM, Теплоухов А.В. 2021_05_12 Задача № 21447}
	
	Попытка
		
		//+++ GRADUM, Теплоухов А.В. 2021_05_12 Задача № 21447{
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументСсылка));
		//ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		//Блокировка.Заблокировать();
		//--- GRADUM, Теплоухов А.В. 2021_05_12 Задача № 21447}
		
		Объект = ДокументСсылка.ПолучитьОбъект();
		
		//+++ GRADUM, Теплоухов А.В. 2021_06_01 Задача № 21601{
		Если Объект = Неопределено Тогда
			РегистрыСведений.грОтложеннноеПроведение.ОчиститьЗаписиПоДокументу(ДокументСсылка);
			Пока ТранзакцияАктивна() Цикл
				ЗафиксироватьТранзакцию();
			КонецЦикла;
			Возврат;
		КонецЕсли;
		//--- GRADUM, Теплоухов А.В. 2021_06_01 Задача № 21601}
		
		Объект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);     // Тимофеев 03.02.2021
		Объект.ДополнительныеСвойства.Вставить("ОтложенноеПроведение");
		
		Если Объект.ПроверитьЗаполнение() Тогда
			
			// При проведении документа снимаем запрет на выполнение ПРО,
			// т.к. ПРО были проигнорированы при обычной записи документа с целью оптимизации скорости загрузки данных.
			Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
				Объект.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииОбъектов");
			КонецЕсли;
			
			Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			
			// Выполняем попытку проведения документа.
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			ДокументПроведенУспешно = Объект.Проведен;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ДокументПроведенУспешно = Ложь;
		
	КонецПопытки;
	
	ЗаписатьРезультатОтложенногоПроведения( Объект, ОписаниеОшибки, ДокументПроведенУспешно);
	
КонецПроцедуры

//+++ GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583{
Функция ЗапуститьДлительнуюОперациюПорцией(ПараметрыОбработки, ДанныеДляОбработки, ПараметрыСвязиЗаданий)

	ПараметрыЗадания = грОтложенныеОперацииИнтеграцииКлиентСервер.ПараметрыЗапускаМетодовИзМетодаИсточникиДанных(
		ПараметрыОбработки,
		ДанныеДляОбработки);
	ПараметрыЗадания.Вставить("КлючФоновогоЗадания"				,  "" + ПараметрыОбработки.Метод + "_" + Строка(Новый УникальныйИдентификатор));
	ПараметрыЗадания.Вставить("ИдентификаторЗаданияРодитель"	, ПараметрыСвязиЗаданий.ФоновоеЗадание.УникальныйИдентификатор); //+Прогресс
	ПараметрыЗадания.Вставить("Отборы"							, ПараметрыОбработки.Отборы);
	
	ДлительнаяОперация	= ЗапуститьОбработкуВФоновомРежиме(
		ПараметрыЗадания.ВыполняемыйМетод,
		ПараметрыЗадания);
		
	Возврат ДлительнаяОперация;
	
КонецФункции // ЗапуститьДлительнуюОперациюПорцией
//--- GRADUM, Теплоухов А.В. 2021_06_15 Задача № 21583

//+++ GRADUM, Теплоухов А.В. 2021_06_03 Задача № 21583{
Функция ВыполнитьАлгоритмСборкиОбъектов(ДанныеДляОбработки) 
										
	РезультатВыполнения = Новый Структура("Ошибки", Новый Массив);
	
	//Контекст функции, обязательные параметры
	Если Ложь Тогда
		ПараметрыОбработки		= Новый Структура;
		Ключ					= "";
		ИдентификаторОбъекта	= "";
		ВидИдентификатора		= "";
		Пакет					= "";
		КлассСообщения			= "";
	КонецЕсли;
	
	СписокДокументов_ОбработкаПроведения = Новый Массив;
	НенайденныеОбъекты	= грОбработкаПакетовИнтеграции.СоздатьТаблицуНенайденныхОбъектов();
	
	Попытка
		
		//Выполнить(АлгоритмСборки);
		
		#Область АлгоритмСборки
		
	///// Контекст обработчика /////
	Если Ложь Тогда 
		Ключ = "";
		ИдентификаторОбъекта = "";
		ПараметрыОбработки = Новый Структура;
		НенайденныеОбъекты = Новый ТаблицаЗначений;
		xdtoОбъект = Неопределено;
		КлассСообщения = "";
		ОбъектСборки = Справочники.грОбъекты.ПустаяСсылка();
		Пакет = "";
	КонецЕсли;
	
	Если НЕ Константы.грСборкаКомплексныхОбъектов.Получить() Тогда
		Перейти ~ВыйтиИзСборки;
	КонецЕсли;
	
	#Область ФормированиеОбщейТаблицыСЦенами
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("МассоваяЗагрузка",				Ложь);
	ПараметрыОбработки.Вставить("КоличествоПопытокБлокировки",	10);
	
	ТаблицаЦен = Новый ТаблицаЗначений;
	ТаблицаЦен.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЦен.Колонки.Добавить("Упаковка",			Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаЦен.Колонки.Добавить("ВидЦены",			Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаЦен.Колонки.Добавить("Цена",				ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаЦен.Колонки.Добавить("Дата",				ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаЦен.Колонки.Добавить("СлужебныйОбъект",	Новый ОписаниеТипов("СправочникСсылка.грОбъекты"));
	ТаблицаЦен.Колонки.Добавить("Ключ",				ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	КэшСсылок = Новый Соответствие;
	
	Для Каждого стрДанные ИЗ ДанныеДляОбработки Цикл
		
		ЧтениеXML = сшпОбщегоНазначения.ПолучитьОбъектПотоковогоЧтения(Перечисления.сшпФорматыСообщений.XML, стрДанные.Пакет);
		спр_xdtoОбъект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		ВидИдентификатора = "УНИКУМGUID";
		
		ПараметрыОбработки.Вставить("Отправитель",	стрДанные.Отправитель);
		ПараметрыОбработки.Вставить("ВремяПакета",	стрДанные.ВремяПакета);
		
		ДопПараметрыДозапросов = Новый Структура;
		ДопПараметрыДозапросов.Вставить("ID",		стрДанные.Ключ);
		ДопПараметрыДозапросов.Вставить("Класс",	стрДанные.Класс);

		ПорцияНенайденых = НенайденныеОбъекты.СкопироватьКолонки();
		
		Номенклатура = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(спр_xdtoОбъект.Номенклатура, "Справочник.Номенклатура",
			ВидИдентификатора, "263", ПорцияНенайденых, КэшСсылок, ДопПараметрыДозапросов);
			
		ВидЦены = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(спр_xdtoОбъект.ВидЦены, "Справочник.ВидыЦен",
			ВидИдентификатора, "345", ПорцияНенайденых, КэшСсылок, ДопПараметрыДозапросов);
			
		Если ПорцияНеНайденых.Количество() Тогда
			грОбработкаПакетовИнтеграции.ЗаписатьОтложенныеДозапросы(стрДанные.Ключ, "",
				стрДанные.Класс, спр_xdtoОбъект, ПараметрыОбработки, ПорцияНенайденых);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номенклатура)
			И ЗначениеЗаполнено(ВидЦены) 
			И грОбработкаПакетовИнтеграции.РеквизитЕстьВПакете(спр_xdtoОбъект,"ЦеныНоменклатуры") Тогда
			ПоследовательностьЦены = спр_xdtoОбъект.ЦеныНоменклатуры.Последовательность();
			Для ИндексЦена = 0 По ПоследовательностьЦены.Количество() - 1 Цикл
				
				xdtoСтрока = ПоследовательностьЦены.ПолучитьЗначение(ИндексЦена);
				
				НоваяСтрока = ТаблицаЦен.Добавить();
				
				НоваяСтрока.Номенклатура	= Номенклатура;
				НоваяСтрока.ВидЦены			= ВидЦены;
				НоваяСтрока.Цена			= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoСтрока, "Цена", "Число");
				НоваяСтрока.Дата			= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoСтрока, "Дата", "Дата");
				НоваяСтрока.СлужебныйОбъект	= стрДанные.СлужебныйОбъект;
				НоваяСтрока.Ключ			= стрДанные.Ключ;

			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	// Блокировка по Справочнику Объекты
	БлокировкаУстановлена = Ложь;
	Для СчетчикПопыток = 1 По ПараметрыОбработки.КоличествоПопытокБлокировки Цикл
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.грОбъекты");
			ЭлементБлокировки.ИсточникДанных = ТаблицаЦен;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОснования", "Ключ");
			Блокировка.Заблокировать();
			
			БлокировкаУстановлена = Истина;
			Прервать;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Если НЕ БлокировкаУстановлена Тогда 
		ВызватьИсключение "Ошибка блокировки Справочника объекта по списку ключей";
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗаполнениеСозданиеДокументовИСлужебныхОбъектов
	
	МаксимумСтрок = 50000;
	
	#Область ЗапросПоТоварамИДокументам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.ВидЦены КАК ВидЦены,
	|	ТаблицаЦен.Цена КАК Цена,
	|	ТаблицаЦен.Дата КАК Дата,
	|	ТаблицаЦен.СлужебныйОбъект КАК СлужебныйОбъект,
	|	ТаблицаЦен.Ключ КАК Ключ
	|ПОМЕСТИТЬ ВтЦены
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзДокУЦ.СлужебныйОбъект КАК СлужебныйОбъект,
	|	УстановкаЦенНоменклатурыТовары.Ссылка КАК ДокУЦ,
	|	УстановкаЦенНоменклатурыТовары.Ссылка.Дата КАК Дата,
	|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.ВидЦены КАК ВидЦены,
	|	УстановкаЦенНоменклатурыТовары.Цена КАК Цена
	|ПОМЕСТИТЬ ВтСтрокиУЦ_РезультатСборки
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабРезультатСборки.Ссылка КАК СлужебныйОбъект,
	|		ТабРезультатСборки.Объект КАК ДокУЦ
	|	ИЗ
	|		Справочник.грОбъекты.РезультатСборки КАК ТабРезультатСборки
	|	ГДЕ
	|		ТабРезультатСборки.Ссылка В
	|				(ВЫБРАТЬ
	|					ВтЦены.СлужебныйОбъект КАК СлужебныйОбъект
	|				ИЗ
	|					ВтЦены КАК ВтЦены)) КАК ВзДокУЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|		ПО ВзДокУЦ.ДокУЦ = УстановкаЦенНоменклатурыТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЦены.Ключ КАК Ключ,
	|	ВтЦены.СлужебныйОбъект КАК СлужебныйОбъект,
	|	ВтЦены.Дата КАК Дата,
	|	ВтЦены.Номенклатура КАК Номенклатура,
	|	ВтЦены.ВидЦены КАК ВидЦены,
	|	ВтЦены.Цена КАК Цена,
	|	ЕСТЬNULL(ВтСтрокиУЦ_РезультатСборки.ДокУЦ, НЕОПРЕДЕЛЕНО) КАК ДокУЦ
	|ПОМЕСТИТЬ ВтДанныеСДокументамиУЦ
	|ИЗ
	|	ВтЦены КАК ВтЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСтрокиУЦ_РезультатСборки КАК ВтСтрокиУЦ_РезультатСборки
	|		ПО ВтЦены.СлужебныйОбъект = ВтСтрокиУЦ_РезультатСборки.СлужебныйОбъект
	|			И ВтЦены.ВидЦены = ВтСтрокиУЦ_РезультатСборки.ВидЦены
	|			И ВтЦены.Дата = ВтСтрокиУЦ_РезультатСборки.Дата
	|			И ВтЦены.Номенклатура = ВтСтрокиУЦ_РезультатСборки.Номенклатура
	|ГДЕ
	|	ВтЦены.Цена <> ЕСТЬNULL(ВтСтрокиУЦ_РезультатСборки.Цена, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыТовары.Ссылка КАК ДокУЦ,
	|	УстановкаЦенНоменклатурыТовары.Ссылка.Дата КАК Дата,
	|	УстановкаЦенНоменклатурыТовары.ВидЦены КАК ВидЦены,
	|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтПодборУЦБезРезультатаСборки
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|ГДЕ
	|	(УстановкаЦенНоменклатурыТовары.ВидЦены, УстановкаЦенНоменклатурыТовары.Ссылка.Дата) В
	|			(ВЫБРАТЬ
	|				ВтЦены.ВидЦены КАК ВидЦены,
	|				ВтЦены.Дата КАК Дата
	|			ИЗ
	|				ВтЦены КАК ВтЦены)
	|	И НЕ УстановкаЦенНоменклатурыТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановкаЦенНоменклатурыТовары.Ссылка.Дата,
	|	УстановкаЦенНоменклатурыТовары.Ссылка,
	|	УстановкаЦенНоменклатурыТовары.ВидЦены,
	|	УстановкаЦенНоменклатурыТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеСДокументамиУЦ.Ключ КАК Ключ,
	|	ВтДанныеСДокументамиУЦ.СлужебныйОбъект КАК СлужебныйОбъект,
	|	ВтДанныеСДокументамиУЦ.Дата КАК Дата,
	|	ВтДанныеСДокументамиУЦ.Номенклатура КАК Номенклатура,
	|	ВтДанныеСДокументамиУЦ.ВидЦены КАК ВидЦены,
	|	ВтДанныеСДокументамиУЦ.Цена КАК Цена,
	|	ИСТИНА КАК ЦенаИзмененаВручную,
	|	ВтДанныеСДокументамиУЦ.ДокУЦ КАК ДокУЦ
	|ПОМЕСТИТЬ ВтЦеныИДаты
	|ИЗ
	|	ВтДанныеСДокументамиУЦ КАК ВтДанныеСДокументамиУЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзДокУЦ.ДокУЦ КАК ДокУЦ,
	|	УстановкаЦенНоменклатурыТовары.Ссылка.Дата КАК Дата,
	|	УстановкаЦенНоменклатурыТовары.ВидЦены КАК ВидЦены,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УстановкаЦенНоменклатурыТовары.НомерСтроки) КАК КоличествоСтрок
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВтПодборУЦБезРезультатаСборки.ДокУЦ КАК ДокУЦ
	|	ИЗ
	|		ВтПодборУЦБезРезультатаСборки КАК ВтПодборУЦБезРезультатаСборки
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВтЦеныИДаты.ДокУЦ
	|	ИЗ
	|		ВтЦеныИДаты КАК ВтЦеныИДаты
	|	ГДЕ
	|		ВтЦеныИДаты.ДокУЦ <> НЕОПРЕДЕЛЕНО) КАК ВзДокУЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|		ПО ВзДокУЦ.ДокУЦ = УстановкаЦенНоменклатурыТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзДокУЦ.ДокУЦ,
	|	УстановкаЦенНоменклатурыТовары.Ссылка.Дата,
	|	УстановкаЦенНоменклатурыТовары.ВидЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ВидЦены,
	|	КоличествоСтрок УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПодборУЦБезРезультатаСборки.ДокУЦ КАК ДокУЦ,
	|	ВтПодборУЦБезРезультатаСборки.Дата КАК Дата,
	|	ВтПодборУЦБезРезультатаСборки.ВидЦены КАК ВидЦены,
	|	ВтПодборУЦБезРезультатаСборки.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВтПодборУЦБезРезультатаСборки КАК ВтПодборУЦБезРезультатаСборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЦеныИДаты.Ключ КАК Ключ,
	|	ВтЦеныИДаты.СлужебныйОбъект КАК СлужебныйОбъект,
	|	ВтЦеныИДаты.Дата КАК Дата,
	|	ВтЦеныИДаты.Номенклатура КАК Номенклатура,
	|	ВтЦеныИДаты.ВидЦены КАК ВидЦены,
	|	ВтЦеныИДаты.Цена КАК Цена,
	|	ВтЦеныИДаты.ЦенаИзмененаВручную КАК ЦенаИзмененаВручную,
	|	ВтЦеныИДаты.ДокУЦ КАК ДокУЦ
	|ИЗ
	|	ВтЦеныИДаты КАК ВтЦеныИДаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЦены,
	|	Дата");
	
	Запрос.УстановитьПараметр("МаксимумСтрок",	МаксимумСтрок);
	Запрос.УстановитьПараметр("ТаблицаЦен",		ТаблицаЦен);
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("ВтЦены",							СтруктураЗапроса.Количество());
	СтруктураЗапроса.Вставить("ВтСтрокиУЦ_РезультатСборки",		СтруктураЗапроса.Количество());
	СтруктураЗапроса.Вставить("ВтДанныеСДокументамиУЦ",			СтруктураЗапроса.Количество());
	СтруктураЗапроса.Вставить("ВтПодборУЦБезРезультатаСборки",	СтруктураЗапроса.Количество());
	СтруктураЗапроса.Вставить("ВтЦеныИДаты",					СтруктураЗапроса.Количество());
	СтруктураЗапроса.Вставить("НайденныеДокументыУЦ",			СтруктураЗапроса.Количество());
	СтруктураЗапроса.Вставить("ДокУЦНоменклатура",				СтруктураЗапроса.Количество());
	СтруктураЗапроса.Вставить("ЦеныДокУЦ",						СтруктураЗапроса.Количество());
	
	мсвРезультат = Запрос.ВыполнитьПакет();
	#КонецОбласти
	
	#Область БлокировкаДанныхПодготовкаДанныхДляЗаполнения
	
	// Блокировка по Документам Установка цен номенклатуры
	БлокировкаУстановлена = Ложь;
	Для СчетчикПопыток = 1 По ПараметрыОбработки.КоличествоПопытокБлокировки Цикл
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.УстановкаЦенНоменклатуры");
			ЭлементБлокировки.ИсточникДанных = мсвРезультат[СтруктураЗапроса.НайденныеДокументыУЦ];
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ДокУЦ");
			Блокировка.Заблокировать();
			
			БлокировкаУстановлена = Истина;
			Прервать;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Если НЕ БлокировкаУстановлена Тогда 
		ВызватьИсключение "Ошибка блокировки документов установки цен номенклатуры";
	КонецЕсли;
	
	НайденныеДокументыУЦ = мсвРезультат[СтруктураЗапроса.НайденныеДокументыУЦ].Выгрузить();
	НайденныеДокументыУЦ.Индексы.Добавить("ВидЦены, Дата");
	НайденныеДокументыУЦ.Индексы.Добавить("ДокУЦ");
	
	ДокУЦНоменклатура	= мсвРезультат[СтруктураЗапроса.ДокУЦНоменклатура].Выгрузить();
	ДокУЦНоменклатура.Индексы.Добавить("ВидЦены, Дата, Номенклатура");

	ЦеныДокУЦ = мсвРезультат[СтруктураЗапроса.ЦеныДокУЦ].Выгрузить();
	ЦеныДокУЦ.Индексы.Добавить("ВидЦены, Дата, ДокУЦ");
	ЦеныДокУЦ.Индексы.Добавить("ВидЦены, Дата");
	
	ВидЦеныДата = ЦеныДокУЦ.Скопировать(,"ВидЦены, Дата");
	
	КэшДокументовУЦ = Новый Соответствие;
	
	СлужебныйОбъектДокУЦ = Новый ТаблицаЗначений;
	СлужебныйОбъектДокУЦ.Колонки.Добавить("СлужебныйОбъект", Новый ОписаниеТипов("СправочникСсылка.грОбъекты"));
	СлужебныйОбъектДокУЦ.Колонки.Добавить("ДокУЦ", Новый ОписаниеТипов("ДокументСсылка.УстановкаЦенНоменклатуры"));
	СлужебныйОбъектДокУЦ.Индексы.Добавить("СлужебныйОбъект, ДокУЦ");
	СлужебныйОбъектДокУЦ.Индексы.Добавить("СлужебныйОбъект");
	
	#КонецОбласти
	
	Для Каждого стрВидЦеныДата Из ВидЦеныДата Цикл 
		
		ОтборВидЦеныДата = Новый Структура("ВидЦены, Дата, ДокУЦ", стрВидЦеныДата.ВидЦены, стрВидЦеныДата.Дата, Неопределено);
		
		#Область ЗаполнениеСтрокБезДокументов
		СтрокиЦенаДатаБезДокументов = ЦеныДокУЦ.НайтиСтроки(ОтборВидЦеныДата);
		
		Для Каждого стрЦенаДата Из СтрокиЦенаДатаБезДокументов Цикл
			
			ДокУЦ			= Неопределено;
			ДокУЦОбъект		= Неопределено;
			ЦенаВСтроке		= стрЦенаДата.Цена;
			
			#Область ПоискДокументаИСтрокиКонтроля
			ОтборСтрокДокументов = Новый Структура("ВидЦены, Дата, Номенклатура",
													стрЦенаДата.ВидЦены, стрЦенаДата.Дата, 
													стрЦенаДата.Номенклатура);
			//Первая итерация поиска
			СтрокиДокументы = ДокУЦНоменклатура.НайтиСтроки(ОтборСтрокДокументов);
				
			Если СтрокиДокументы.Количество() Тогда
				
				ДокУЦ = СтрокиДокументы[0].ДокУЦ;
				ДокУЦОбъект = КэшДокументовУЦ.Получить(ДокУЦ);
				
				Если ДокУЦОбъект = Неопределено Тогда
					ДокУЦОбъект = ДокУЦ.ПолучитьОбъект();
				КонецЕсли;
				
			КонецЕсли;
			
			//Вторая итерация поиска 
			ОтборСтрокБезНомеклатуры = Новый Структура("ВидЦены, Дата",
													стрЦенаДата.ВидЦены, стрЦенаДата.Дата);
			Если Не ЗначениеЗаполнено(ДокУЦ) Тогда
				
				СтрокиДокументы = НайденныеДокументыУЦ.НайтиСтроки(ОтборСтрокБезНомеклатуры);
				
				Для Каждого стрДокументы Из СтрокиДокументы Цикл
					
					Если стрДокументы.КоличествоСтрок >= МаксимумСтрок Тогда
						Продолжить;
					КонецЕсли;
					
					ДокУЦ = СтрокиДокументы[0].ДокУЦ;
					ДокУЦОбъект = КэшДокументовУЦ.Получить(ДокУЦ);
					
					Если ДокУЦОбъект = Неопределено Тогда
						ДокУЦОбъект = ДокУЦ.ПолучитьОбъект();
					КонецЕсли;
					
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
			//Создание документа Установка цен номенклатуры, если не найден при поиске 
			Если Не ЗначениеЗаполнено(ДокУЦ) Тогда
				
				ДокУЦ = Документы.УстановкаЦенНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор);
				ДокУЦОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ДокУЦОбъект.УстановитьСсылкуНового(ДокУЦ);
				
				ДокУЦОбъект.Дата = стрВидЦеныДата.Дата;
				ДокУЦОбъект.УстановитьНовыйНомер();
				
				КонтрольПоУЦ = НайденныеДокументыУЦ.Добавить();
				КонтрольПоУЦ.ДокУЦ				= ДокУЦ;
				КонтрольПоУЦ.КоличествоСтрок	= 0;
				КонтрольПоУЦ.ВидЦены			= стрВидЦеныДата.ВидЦены;
				КонтрольПоУЦ.Дата				= стрВидЦеныДата.Дата;
				
			КонецЕсли;
			
			Если ДокУЦОбъект.ВидыЦен.Количество() = 0 Тогда
				НоваяСтрокаВидЦены = ДокУЦОбъект.ВидыЦен.Добавить();
				НоваяСтрокаВидЦены.ВидЦены = стрВидЦеныДата.ВидЦены;
			КонецЕсли;

			КонтрльныеСтроки = НайденныеДокументыУЦ.НайтиСтроки(Новый Структура("ДокУЦ", ДокУЦ));
			КонтрольПоУЦ = КонтрльныеСтроки[0];
			
			КэшДокументовУЦ.Вставить(ДокУЦ, ДокУЦОбъект);
			
			#КонецОбласти
			
			СтрокиТовары = ДокУЦОбъект.Товары.НайтиСтроки(Новый Структура("ВидЦены, Номенклатура", 
															стрЦенаДата.ВидЦены, 
															стрЦенаДата.Номенклатура));
			
			Если СтрокиТовары.Количество() Тогда
				Сч = 0;
				Для Каждого СтрокаТовары Из СтрокиТовары Цикл
					
					Если ЦенаВСтроке = 0 Тогда
						
						ДокУЦОбъект.Товары.Удалить(СтрокаТовары);
						
						КонтрольПоУЦ.КоличествоСтрок = КонтрольПоУЦ.КоличествоСтрок - 1;
						СтрокиДокументы = ДокУЦНоменклатура.НайтиСтроки(ОтборСтрокДокументов);
						
						Для Каждого стрДокументы Из СтрокиДокументы Цикл
							ДокУЦНоменклатура.Удалить(стрДокументы);
						КонецЦикла;
						
						Продолжить;
					КонецЕсли;
					
					Сч = Сч + 1;
					
					Если Сч = 1 Тогда
						//Заполнение строки Товаров документа Установка цен
						ЗаполнитьЗначенияСвойств(СтрокаТовары, стрЦенаДата);
						СтрокаТовары.ЦенаИзмененаВручную = Истина;
						
						ОтборСлужебногоОбъекта = Новый Структура("СлужебныйОбъект,ДокУЦ", стрЦенаДата.СлужебныйОбъект, ДокУЦ);
						СтрокиСлужебногоОбъекта = СлужебныйОбъектДокУЦ.НайтиСтроки(ОтборСлужебногоОбъекта);
						
						Если СтрокиСлужебногоОбъекта.Количество() = 0 Тогда
							ЗаполнитьЗначенияСвойств(СлужебныйОбъектДокУЦ.Добавить(), ОтборСлужебногоОбъекта);
						КонецЕсли;
						
						ЦеныДокУЦ.Удалить(стрЦенаДата);
						Продолжить;
					КонецЕсли;
					
					ДокУЦОбъект.Товары.Удалить(СтрокаТовары);
					
				КонецЦикла;
			Иначе
				
				СтрокаТовары = ДокУЦОбъект.Товары.Добавить();
				КонтрольПоУЦ.КоличествоСтрок = КонтрольПоУЦ.КоличествоСтрок + 1;
				
				//Заполнение строки Товаров документа Установка цен
				ЗаполнитьЗначенияСвойств(СтрокаТовары, стрЦенаДата);
				СтрокаТовары.ЦенаИзмененаВручную = Истина;
				
				ОтборСлужебногоОбъекта = Новый Структура("СлужебныйОбъект,ДокУЦ", стрЦенаДата.СлужебныйОбъект, ДокУЦ);
				СтрокиСлужебногоОбъекта = СлужебныйОбъектДокУЦ.НайтиСтроки(ОтборСлужебногоОбъекта);
				
				Если СтрокиСлужебногоОбъекта.Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(СлужебныйОбъектДокУЦ.Добавить(), ОтборСлужебногоОбъекта);
				КонецЕсли;
				
				ЦеныДокУЦ.Удалить(стрЦенаДата);
				
			КонецЕсли;
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ЗаполнениеСтрокСДокументами
		ОтборВидЦеныДата.Удалить("ДокУЦ");
		
		СтрокиЦенаДатаСДокументом = ЦеныДокУЦ.НайтиСтроки(ОтборВидЦеныДата);
		
		Для Каждого стрЦенаДата Из СтрокиЦенаДатаСДокументом Цикл
			
			ДокУЦ = стрЦенаДата.ДокУЦ;
			
			ДокУЦОбъект = КэшДокументовУЦ.Получить(ДокУЦ);
			
			Если ДокУЦОбъект = Неопределено Тогда
				ДокУЦОбъект = ДокУЦ.ПолучитьОбъект();
				КэшДокументовУЦ.Вставить(ДокУЦ, ДокУЦОбъект);
			КонецЕсли;

			СтрокиТовары = ДокУЦОбъект.Товары.НайтиСтроки(
				Новый Структура("Номенклатура, ВидЦены", 
								стрЦенаДата.Номенклатура, стрЦенаДата.ВидЦены));
								
			ЦенаВСтроке = стрЦенаДата.Цена;
			
			Сч = 0;
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				
				Если ЦенаВСтроке = 0 Тогда
					ДокУЦОбъект.Товары.Удалить(СтрокаТовары);
					Продолжить;
				КонецЕсли;
				
				Сч = Сч + 1;
				
				Если Сч = 1 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТовары, стрЦенаДата);
					СтрокаТовары.ЦенаИзмененаВручную = Истина;
					
					ОтборСлужебногоОбъекта = Новый Структура("СлужебныйОбъект,ДокУЦ", стрЦенаДата.СлужебныйОбъект, ДокУЦ);
					СтрокиСлужебногоОбъекта = СлужебныйОбъектДокУЦ.НайтиСтроки(ОтборСлужебногоОбъекта);
												
					Если СтрокиСлужебногоОбъекта.Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(СлужебныйОбъектДокУЦ.Добавить(),ОтборСлужебногоОбъекта) ;
					КонецЕсли;
					
					ЦеныДокУЦ.Удалить(стрЦенаДата);
					Продолжить;
				КонецЕсли;
				
				ДокУЦОбъект.Товары.Удалить(СтрокаТовары);
				
			КонецЦикла;
			
			Если ДокУЦОбъект.ВидыЦен.Количество() = 0 Тогда
				НоваяСтрокаВидЦены = ДокУЦОбъект.ВидыЦен.Добавить();
				НоваяСтрокаВидЦены.ВидЦены = стрВидЦеныДата.ВидЦены;
			КонецЕсли;
			
		КонецЦикла;
		#КонецОбласти
		
	КонецЦикла;
	
	#Область ЗаписьДокументовУстановкаЦен
	Для Каждого КлючЗначение Из КэшДокументовУЦ Цикл 
		
		ДокОбъект = КлючЗначение.Значение;
		ДокОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
		ДокОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
		ДокОбъект.ДополнительныеСвойства.Свойство("ОтключитьБизнесЛогику", Истина);

		Если ДокОбъект.Товары.Количество() = 0 Тогда
			ДокОбъект.ПометкаУдаления = Истина;
			ДокОбъект.Проведен = Ложь;
		Иначе
			ДокОбъект.ПометкаУдаления = Ложь;
			ДокОбъект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
			ДокОбъект.Согласован = Истина;
		КонецЕсли;
		
		Если ДокОбъект.ПометкаУдаления Тогда
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ОбменДаннымиСервер.УдалитьДвиженияУДокумента(ДокОбъект);
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ЗаписьСлужебныхОбъектов
	
	СлужебныеОбъекты = ТаблицаЦен.Скопировать(,"СлужебныйОбъект");
	СлужебныеОбъекты.Свернуть("СлужебныйОбъект");
	
	Для Каждого стрСлужебныйОбъект Из СлужебныеОбъекты Цикл
		
		ЭлементОбъект = стрСлужебныйОбъект.СлужебныйОбъект.ПолучитьОбъект();
		
		НайденныеСтроки = СлужебныйОбъектДокУЦ.НайтиСтроки(Новый Структура("СлужебныйОбъект", стрСлужебныйОбъект.СлужебныйОбъект));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДокУЦОбъект = КэшДокументовУЦ.Получить(НайденнаяСтрока.ДокУЦ);
			Если ДокУЦОбъект.ПометкаУдаления Тогда 
				СтрокиРезультатСборки = ЭлементОбъект.РезультатСборки.НайтиСтроки(Новый Структура("Объект", НайденнаяСтрока.ДокУЦ));
				Для Каждого СтрокаРезультат Из СтрокиРезультатСборки Цикл
					ЭлементОбъект.РезультатСборки.Удалить(СтрокаРезультат);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если ЭлементОбъект.РезультатСборки.Найти(НайденнаяСтрока.ДокУЦ, "Объект") = Неопределено Тогда
				стрРезультат = ЭлементОбъект.РезультатСборки.Добавить();
				стрРезультат.Объект = НайденнаяСтрока.ДокУЦ;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементОбъект.ГотовКСборке = Ложь;
		
		ЭлементОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Записать();
		
	КонецЦикла;
	#КонецОбласти
	
	#КонецОбласти
	
	~ВыйтиИзСборки:
	
		#КонецОбласти
		
		Пока ТранзакцияАктивна() Цикл
			ЗафиксироватьТранзакцию();
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		РезультатВыполнения.Ошибки.Добавить(ТекстОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка: " + ТекстОшибки);
		
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;
		
	КонецПопытки;
	
	Если СписокДокументов_ОбработкаПроведения.Количество() Тогда
		Выполнить(грОбработкаПакетовИнтеграции.ПолучитьТекстОбработчика("Служебный_ПроведениеДокументовЕРП", Перечисления.сшпТипыИнтеграции.Исходящая));
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции
//--- GRADUM, Теплоухов А.В. 2021_06_03 Задача № 21583}

//+++ GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264{
Функция ВыполнитьАлгоритмРегистрацииЦеныПоставщика(СсылкаНаОбъект) 
	
	РезультатВыполнения = Новый Структура("Ошибки", Новый Массив);
	
	Попытка
		
		#Область АлгоритмСборки
		НачатьТранзакцию();
		
		БлокировкаУстановлена = Ложь;
		Для СчетчикПопыток = 1 По 10 Цикл
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.грОбъекты");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
				Блокировка.Заблокировать();
				
				БлокировкаУстановлена = Истина;
				Прервать;
			Исключение КонецПопытки;
		КонецЦикла;
		
		Если НЕ БлокировкаУстановлена Тогда 
			ВызватьИсключение "Ошибка блокировки " + СсылкаНаОбъект;
		КонецЕсли;
		
		СлужебныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		
		Если СлужебныйОбъект = Неопределено Тогда
			ВызватьИсключение "Не удалось получить служебный объект";
		КонецЕсли;
		
		ЧтениеXML = сшпОбщегоНазначения.ПолучитьОбъектПотоковогоЧтения(Перечисления.сшпФорматыСообщений.XML, СлужебныйОбъект.Пакет);
		спр_xdtoОбъект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		#Область ЧтениеПакета
		
		Соглашение	= грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(спр_xdtoОбъект.Соглашение, "Справочник.СоглашенияСПоставщиками", "УНИКУМGUID");
		
		Если Не ЗначениеЗаполнено(Соглашение) 
			Или (ЗначениеЗаполнено(Соглашение) 
			И Не ОбщегоНазначения.СсылкаСуществует(Соглашение)) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось найти Соглашение по ключу %1'"), спр_xdtoОбъект.Соглашение);
		КонецЕсли;
		
		БизнесПартнер = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(спр_xdtoОбъект.Партнер, "Справочник.грБизнесПартнеры", "УНИКУМGUID");
		
		Партнер = грОбработкаПакетовИнтеграции.ПолучитьСКСПоБП(БизнесПартнер);
		
		Если Ложь И Не ЗначениеЗаполнено(Партнер) 
			Или (ЗначениеЗаполнено(Партнер) 
			И Не ОбщегоНазначения.СсылкаСуществует(Партнер)) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось найти Партнера по ключу бизнес партнера %1'"), спр_xdtoОбъект.Партнер);
		КонецЕсли;
		
		Дата		= НачалоДня(грОбработкаПакетовИнтеграции.ЗначениеРеквизита(спр_xdtoОбъект, "Дата", "Дата",, Дата(1,1,1)));
		Комментарий = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(спр_xdtoОбъект, "Комментарий", ,, "");
		
		Товары = грОбработкаПакетовИнтеграции.ТаблицаЗначенийПоТабличнойЧасти("Документ.РегистрацияЦенНоменклатурыПоставщика", 
			"Товары", "Номенклатура, Цена, ВидЦеныПоставщика, грВалюта");
		
		//Реквизиты по умолчанию
		ВидЦеныЗакупки = грУправлениеНастройками.ПолучитьЗначениеНастройки("ЦенаПоставщика");
		ВидЦеныТаможни = грУправлениеНастройками.ПолучитьЗначениеНастройки("ТаможеннаяЦена");
		
		ВалютаЗакупки = Справочники.Валюты.ПустаяСсылка();
		Если ЗначениеЗаполнено(ВидЦеныЗакупки) 
			И ТипЗнч(ВидЦеныЗакупки) = Тип("СправочникСсылка.ВидыЦенПоставщиков") Тогда
			ВалютаЗакупки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦеныЗакупки, "Валюта");
		КонецЕсли;
		
		ВалютаТаможни = Справочники.Валюты.ПустаяСсылка();
		Если ЗначениеЗаполнено(ВидЦеныТаможни) 
			И ТипЗнч(ВидЦеныТаможни) = Тип("СправочникСсылка.ВидыЦенПоставщиков") Тогда
			ВалютаТаможни = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦеныТаможни, "Валюта");
		КонецЕсли;
		
		КэшСсылок = Новый Соответствие;
		
		Если грОбработкаПакетовИнтеграции.РеквизитЕстьВПакете(спр_xdtoОбъект, "Товары") И Не спр_xdtoОбъект.Товары = Неопределено Тогда
			спр_xdtoТовары = спр_xdtoОбъект.Товары.Последовательность();
			Для ИндексТовары = 0 По спр_xdtoТовары.Количество()-1 Цикл
				xdtoСтрока = спр_xdtoТовары.ПолучитьЗначение(ИндексТовары);
				
				Номенклатура = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoСтрока.Номенклатура, 
					"Справочник.Номенклатура", "УНИКУМGUID",, КэшСсылок);
				
				ЦенаЗакупки = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoСтрока, "ЦенаЗакупки","Число",, 0);
				ЦенаТаможни = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoСтрока, "ЦенаТаможни","Число",, 0);
				
				//Цена закупки
				Если ЦенаЗакупки <> 0 Тогда
					НовСтр = Товары.Добавить();
					НовСтр.Номенклатура			= Номенклатура;
					НовСтр.ВидЦеныПоставщика	= ВидЦеныЗакупки;
					НовСтр.Цена					= ЦенаЗакупки;
					НовСтр.грВалюта				= ВалютаЗакупки;
				КонецЕсли;
				
				//Цена таможни
				Если ЦенаТаможни <> 0 Тогда
					НовСтр = Товары.Добавить();
					НовСтр.Номенклатура			= Номенклатура;
					НовСтр.ВидЦеныПоставщика	= ВидЦеныТаможни;
					НовСтр.Цена					= ЦенаТаможни;
					НовСтр.грВалюта				= ВалютаТаможни;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ФормированиеДокументаРегистрацияЦенНоменклатурыПоставщика
		ДокументыРегистрацияЦен = СлужебныйОбъект.РезультатСборки.Выгрузить();
		
		РегистрацияЦенСсылка = Неопределено;
		
		Если ДокументыРегистрацияЦен.Количество() Тогда
			РегистрацияЦенСсылка = ДокументыРегистрацияЦен[0].Объект;
			
			Если ТипЗнч(РегистрацияЦенСсылка) <> Тип("ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика")
				Или Не ЗначениеЗаполнено(РегистрацияЦенСсылка)
				Или (ЗначениеЗаполнено(РегистрацияЦенСсылка) 
						И Не ОбщегоНазначения.СсылкаСуществует(РегистрацияЦенСсылка)) Тогда
						
				РегистрацияЦенСсылка = Неопределено;
						
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РегистрацияЦенСсылка) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1  ДокЦеныПоставщика.Ссылка КАК Ссылка
			|ИЗ Документ.РегистрацияЦенНоменклатурыПоставщика КАК ДокЦеныПоставщика
			|ГДЕ ДокЦеныПоставщика.Дата = &Дата И ДокЦеныПоставщика.Соглашение = &Соглашение
			|	И НЕ ДокЦеныПоставщика.ПометкаУдаления И ДокЦеныПоставщика.Проведен
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1 ДокЦеныПоставщика.Ссылка
			|ИЗ Документ.РегистрацияЦенНоменклатурыПоставщика КАК ДокЦеныПоставщика
			|ГДЕ ДокЦеныПоставщика.Дата = &Дата И ДокЦеныПоставщика.Соглашение = &Соглашение
			|	И НЕ ДокЦеныПоставщика.ПометкаУдаления И НЕ ДокЦеныПоставщика.Проведен");
			
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Соглашение", Соглашение);
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				РегистрацияЦенСсылка = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрацияЦенСсылка) Тогда
			
			БлокировкаУстановлена = Ложь;
			Для СчетчикПопыток = 1 По 10 Цикл
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", РегистрацияЦенСсылка);
					Блокировка.Заблокировать();
					
					БлокировкаУстановлена = Истина;
					Прервать;
				Исключение КонецПопытки;
			КонецЦикла;
			
			Если НЕ БлокировкаУстановлена Тогда 
				ВызватьИсключение "Ошибка блокировки " + РегистрацияЦенСсылка;
			КонецЕсли;
			
			РегистрацияЦен = РегистрацияЦенСсылка.ПолучитьОбъект();
			
		Иначе
			РегистрацияЦен = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
			РегистрацияЦенСсылка = Документы.РегистрацияЦенНоменклатурыПоставщика.ПолучитьСсылку(Новый УникальныйИдентификатор);
			РегистрацияЦен.УстановитьСсылкуНового(РегистрацияЦенСсылка);
		КонецЕсли;
		
		#Область УдалениеНеИспользованнныхДокументовРегистрацияЦен
		
		Для Каждого Строка Из ДокументыРегистрацияЦен Цикл
			
			Если Строка.Объект = РегистрацияЦенСсылка Тогда
				Продолжить;
			КонецЕсли;
			
			БлокировкаУстановлена = Ложь;
			Для СчетчикПопыток = 1 По 10 Цикл
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Строка.Объект);
					Блокировка.Заблокировать();
					
					БлокировкаУстановлена = Истина;
					Прервать;
				Исключение КонецПопытки;
			КонецЦикла;
			
			Если НЕ БлокировкаУстановлена Тогда 
				ВызватьИсключение "Ошибка блокировки " + Строка.Объект;
			КонецЕсли;
			
			РегистрацияЦенУдалить = Строка.Объект.ПолучитьОбъект();
			
			Если РегистрацияЦенУдалить.Проведен Тогда
				ОбменДаннымиСервер.УдалитьДвиженияУДокумента(РегистрацияЦенУдалить);
			КонецЕсли;
			
			РегистрацияЦенУдалить.Проведен = Ложь;
			РегистрацияЦенУдалить.ПометкаУдаления = Истина;
			
			РегистрацияЦенУдалить.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
			РегистрацияЦенУдалить.ОбменДанными.Загрузка = Истина;
			РегистрацияЦенУдалить.Записать();
			
		КонецЦикла;
		#КонецОбласти
		
		РегистрацияЦен.Дата			= Дата;
		РегистрацияЦен.Партнер		= Партнер;
		РегистрацияЦен.Соглашение	= Соглашение;
		РегистрацияЦен.Комментарий	= Комментарий;
		
		Если Не ЗначениеЗаполнено(РегистрацияЦен.Номер) Тогда
			РегистрацияЦен.УстановитьНовыйНомер();
		КонецЕсли;
		
		РегистрацияЦен.Проведен = Ложь;
		РегистрацияЦен.ПометкаУдаления = Ложь;
		
		РегистрацияЦен.Товары.Очистить();
		РегистрацияЦен.Товары.Загрузить(Товары);
		
		РегистрацияЦен.Записать(РежимЗаписиДокумента.Проведение);
		
		#КонецОбласти
		
		#Область ЗаписьСлужебногоОбъекта
		
		СлужебныйОбъект.РезультатСборки.Очистить();
		
		НоваяСтрока = СлужебныйОбъект.РезультатСборки.Добавить();
		НоваяСтрока.Объект = РегистрацияЦен.Ссылка;
		
		СлужебныйОбъект.ГотовКСборке = Ложь;
		
		СлужебныйОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
		СлужебныйОбъект.ОбменДанными.Загрузка = Истина;
		СлужебныйОбъект.Записать();

		#КонецОбласти
		
		#КонецОбласти
		
		Пока ТранзакцияАктивна() Цикл
			ЗафиксироватьТранзакцию();
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		РезультатВыполнения.Ошибки.Добавить(ТекстОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка: " + ТекстОшибки);
		
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;
		
	КонецПопытки;
	
	Возврат РезультатВыполнения;

КонецФункции
//--- GRADUM, Теплоухов А.В. 2021_08_06 Задача СУРВ № 000517264}

//+++ GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751{
Функция ПолучитьДанныеДляОтложенногоПроведения(ДанныеДляОбработки, КоличествоОбъектовДляОбработки, ПараметрыОбработки)

	//Определим параметры функции и параметры получения, возврата данных
	ТаблицаДанных = ДанныеДляОбработки.СкопироватьКолонки();
	
	ДатаНачала		= Неопределено;
	ДатаОкончания	= Неопределено;
	Если ПараметрыОбработки.Свойство("ПараметрыПорций") Тогда
		ПараметрыПорций = ПараметрыОбработки.ПараметрыПорций;
		ПараметрыПорций.Свойство("ДатаНачала",		ДатаНачала);
		ПараметрыПорций.Свойство("ДатаОкончания",	ДатаОкончания);
	КонецЕсли;
	
	//Получим массив имен документов с общим реквизитом грПроведенВременная
	ИменаОбъектов = Новый Массив;
	
	СоставОбъектвПроведенВременная = Метаданные.ОбщиеРеквизиты.грПроведенВременная.Состав;
	ИспользуетсяРеквизит = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	
	Для Каждого МетаДокумент Из Метаданные.Документы Цикл
		
		Если СоставОбъектвПроведенВременная.Найти(МетаДокумент).Использование = ИспользуетсяРеквизит Тогда 
			ИменаОбъектов.Добавить(МетаДокумент.ПолноеИмя());
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем шаблон текста запроса и параметры для запроса
	ОтборПоДатеНачала		= ?(ЗначениеЗаполнено(ДатаНачала),  " ДокументСсылка.Дата >= ДАТАВРЕМЯ(" 
								+ Формат(Год(ДатаНачала),"ЧГ=") + "," + Месяц(ДатаНачала) + "," + День(ДатаНачала) + "," 
								+ Час(ДатаНачала) + "," + Минута(ДатаНачала) + "," + Секунда(ДатаНачала) + ")", "");
	ОтборПоДатеОкончания	= ?(ЗначениеЗаполнено(ДатаОкончания),  " ДокументСсылка.Дата <= ДАТАВРЕМЯ(" 
								+ Формат(Год(ДатаОкончания),"ЧГ=") + "," + Месяц(ДатаОкончания) + "," + День(ДатаОкончания) + "," 
								+ Час(ДатаОкончания) + "," + Минута(ДатаОкончания) + "," + Секунда(ДатаОкончания) + ")", "");
	ОтборПоПериоду			= ОтборПоДатеНачала + ?(ОтборПоДатеНачала = "", "", " И " ) + 
								?(ОтборПоДатеОкончания = "" , " ИСТИНА ", ОтборПоДатеОкончания);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ТПК.ОбъектERP КАК Документ
	|ПОМЕСТИТЬ ВтДокументы
	|ИЗ
	|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК ТПК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК ДокументСсылка
	|		ПО (ТПК.ВидИдентификатораСтрока = ""УНИКУМGUID"")
	|			И (ДокументСсылка.Дата >= ДАТАВРЕМЯ(2019, 1, 1))
	|			И ТПК.ОбъектERP = ДокументСсылка.Ссылка
	|			И (НЕ ДокументСсылка.Проведен)
	|			И (ДокументСсылка.грПроведенВременная)
	|			И (&ОтборПоПериоду)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПериоду", ОтборПоПериоду);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 10000 ", " ПЕРВЫЕ " + Формат(КоличествоОбъектовДляОбработки,"ЧГ=0") + " ");
	
	ОтборНеДобавленных = 
	"ВЫБРАТЬ
	|	ВтДокументы.Документ КАК Документ,
	|	ВтДокументы.Документ КАК ОбластьОбработки
	|ИЗ
	|	ВтДокументы КАК ВтДокументы
	|ГДЕ
	|	НЕ ВтДокументы.Документ В
	|				(ВЫБРАТЬ
	|					грОтложеннноеПроведение.Документ КАК Документ
	|				ИЗ
	|					РегистрСведений.грОтложеннноеПроведение КАК грОтложеннноеПроведение
	|				ГДЕ
	|					грОтложеннноеПроведение.Документ В
	|						(ВЫБРАТЬ
	|							ВтДокументы.Документ КАК Документ
	|						ИЗ
	|							ВтДокументы КАК ВтДокументы))
	|	И НЕ ВтДокументы.Документ В
	|				(ВЫБРАТЬ
	|					ЗаданияОбработки.ОбластьОбработки КАК Документ
	|				ИЗ
	|					РегистрСведений.грЗаданияОбработкиПакетовИнтеграции КАК ЗаданияОбработки
	|				ГДЕ
	|					ЗаданияОбработки.ОбластьОбработки В
	|						(ВЫБРАТЬ
	|							ВтДокументы.Документ КАК Документ
	|						ИЗ
	|							ВтДокументы КАК ВтДокументы))";
	
	//Сформируем запросы по порциям 50 документов в порции
	ПорцииЗапросовПо50 = Новый Структура;
	
	Сч = 0;
	ИтоговыйТекстЗапроса	= "";
	
	Для Каждого ЭлементИмя Из ИменаОбъектов Цикл
		
		Сч = Сч + 1;
		стрТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.CRM_Взаимодействие", ЭлементИмя);
		
		Если ЭлементИмя = "Документ.грРаспоряжениеНаДоставку" Тогда
			стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса, "(ДокументСсылка.Дата >= ДАТАВРЕМЯ(2019, 1, 1))", " ИСТИНА ");
		КонецЕсли;
		
		Если ИтоговыйТекстЗапроса = "" Тогда
			ИтоговыйТекстЗапроса = стрТекстЗапроса;
		Иначе
			
			ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса +
									"
									|
									| ОБЪЕДИНИТЬ
									|
									|" + СтрЗаменить(стрТекстЗапроса, "ПОМЕСТИТЬ ВтДокументы", "");
			
		КонецЕсли;
		
		Если Сч%50 = 0 
			Или Сч = ИменаОбъектов.Количество() Тогда
			
			ПорцииЗапросовПо50.Вставить("ТекстЗапроса_" + Сч, ИтоговыйТекстЗапроса + "; " +  ОтборНеДобавленных);
			ИтоговыйТекстЗапроса = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполним сформированные запросы порциями, до достижения нужного значения записей КоличествоОбъектовДляОбработки
	Для Каждого КлючЗначение Из ПорцииЗапросовПо50 Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = КлючЗначение.Значение;
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() 
				И ТаблицаДанных.Количество() < КоличествоОбъектовДляОбработки Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТаблицаДанных.Количество() >= КоличествоОбъектовДляОбработки Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // ПолучитьДанныеДляОтложенногоПроведения(ДанныеДляОбработки, КоличествоОбъектовДляОбработки, ПараметрыОбработки)()
//--- GRADUM, Теплоухов А.В. 2021_06_22 Задача № 21751}

// Регистрирует ошибки при отложенном проведении документа в мониторе проблем обмена.
//
// Параметры:
//	Объект - ДокументОбъект - документ при отложенном проведении которого возникли ошибки.
//	ОписаниеОшибки - Строка - текст сообщения для журнала регистрации.
//    Рекомендуется передавать в качестве этого параметра КраткоеПредставлениеОшибки(ИнформацияОбОшибке()).
//    Текст сообщения для отображения в мониторе формируется из системных сообщений пользователю, которые
//    были сформированы, но еще не были выведены пользователю. Поэтому рекомендуется, чтобы к моменту вызова
//    данного метода в буфере сообщений системы не содержалось сообщений.
//	РегистрироватьПроблемыВРезультатахОбмена - Булево - необходимо регистрировать проблемы.
//
Процедура ЗаписатьРезультатОтложенногоПроведения(
	Объект,
	ТекстИсключения,
	ДокументПроведенУспешно)
	
	МенеджерЗаписи = РегистрыСведений.грОтложеннноеПроведение.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ	= Объект.Ссылка;
	
	Если ДокументПроведенУспешно Тогда
		МенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	ТекстСообщения = ТекстИсключения;
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		Если СтрНайти(Сообщение.Текст, ДлительныеОперации.СообщениеПрогресса()) > 0 Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + Сообщение.Текст;
	КонецЦикла;
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	СтрокаСообщения = "";
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		СтрокаСообщения = НСтр("ru = 'Не удалось провести документ %1, полученный из другой системы.
			|По причине: %2.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СтрокаСообщения, Строка(Объект), ТекстСообщения);
	Иначе
		СтрокаСообщения = НСтр("ru = 'Не удалось провести документ %1, полученный из другой системы.
			|Возможно, не заполнены все реквизиты, обязательные к заполнению.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СтрокаСообщения, Строка(Объект));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаОтложенноеПроведение(), УровеньЖурналаРегистрации.Предупреждение,,, СтрокаСообщения);
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		
		//+++ GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977{
		//МенеджерЗаписи.Ошибка = Не ДокументПроведенУспешно;
		//МенеджерЗаписи.ОписаниеОшибки = СтрокаСообщения;
		//МенеджерЗаписи.Записать();
		Если НЕ ЕстьКонфликтБлокировокИДатаПакетаМеньшеНедели(СтрокаСообщения, МенеджерЗаписи.ДатаПакета) Тогда
			МенеджерЗаписи.Ошибка = Не ДокументПроведенУспешно;
			МенеджерЗаписи.ОписаниеОшибки = СтрокаСообщения;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		//--- GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977}
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаОтложенноеПроведение() Экспорт
	
	Возврат НСтр("ru = 'ESB отложенное проведение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Процедура УдалитьРегламентыеЗадания( Отбор )
	Массив_РегламентыхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания( Отбор );
	Для каждого РеглЗадание Из Массив_РегламентыхЗаданий Цикл
		РеглЗадание.Удалить();
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьПротоколПомещенныхДокументовДляПроведения(ДанныеДляОбработки, ДатаПротокола)

	ИмяПапкиПротоколов = "Протоколы помещения в отложенное проведение";
	
	ПапкаПротокола = Справочники.ПапкиФайлов.НайтиПоНаименованию(ИмяПапкиПротоколов, Истина);
	
	Если Не ЗначениеЗаполнено(ПапкаПротокола)
		Или (ЗначениеЗаполнено(ПапкаПротокола)
		И Не ОбщегоНазначения.СсылкаСуществует(ПапкаПротокола)) Тогда
		
		Папка = Справочники.ПапкиФайлов.СоздатьЭлемент();
		Папка.Ответственный = Пользователи.ТекущийПользователь();
		Папка.Наименование = ИмяПапкиПротоколов;
		Папка.ДатаСоздания = ТекущаяДатаСеанса();
		Папка.Заполнить(Неопределено);
		Папка.Записать();
		ПапкаПротокола = Папка.Ссылка;
		
	КонецЕсли;

	ТекстовыеДокумент = Новый ТекстовыйДокумент;
	Для Каждого Строка Из ДанныеДляОбработки Цикл
		ТекстовыеДокумент.ДобавитьСтроку("" + Строка.Документ + "<" + Строка.Документ.УникальныйИдентификатор() + ">");
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".txt");
	
	ТекстовыеДокумент.Записать(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(ТекстовыеДокумент.ПолучитьТекст());
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", Файл);
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	
	РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ПапкаПротокола, СведенияОФайле);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

//+++ GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977{
Функция ДокументПомеченНаУдалениеИлиНеПроведенВременная(Документ)

	ДокументПомеченИлиНеПроведен = Ложь;
	
	ПроверяемыеРеквизиты = "ПометкаУдаления";
	
	Если Метаданные.ОбщиеРеквизиты.грПроведенВременная.Состав.Найти(Документ.Метаданные()) <> Неопределено Тогда
		ПроверяемыеРеквизиты = ПроверяемыеРеквизиты + ",грПроведенВременная";
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, ПроверяемыеРеквизиты);
	
	Для Каждого КлючЗначение Из РеквизитыДокумента Цикл
		
		Если (КлючЗначение.Ключ = "ПометкаУдаления"
				И КлючЗначение.Значение)
			Или
			(КлючЗначение.Ключ = "грПроведенВременная"
				И Не КлючЗначение.Значение)
			Тогда
			
			ДокументПомеченИлиНеПроведен = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументПомеченИлиНеПроведен;

КонецФункции // ДокументПомеченНаУдалениеИлиНеПроведенВременная
//--- GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977}

//+++ GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977{
Функция ЕстьКонфликтБлокировокИДатаПакетаМеньшеНедели(СтрокаСообщения, ДатаПакета)

	Возврат СтрНайти(СтрокаСообщения, "Конфликт блокировок") <> 0 
		И (ТекущаяДата() - ДатаПакета) < 7*24*60*60;

КонецФункции // ЕстьКонфликтБлокировокИДатаПакетаМеньшеНедели


//--- GRADUM, Теплоухов А.В. 2021_08_05 Задача № 21977}

#КонецОбласти