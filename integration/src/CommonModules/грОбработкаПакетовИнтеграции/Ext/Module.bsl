
#Область ИнтеграционнаяБиблиотека_ПрограммныйИнтерфейс

//======================================================================================================================
//+++ Интеграционная библиотека

#Область DatareonESB

#Область ВходящаяОчередь

#Область ВходящаяОчередь_Задания

Процедура ЗапуститьЗаданияОчисткиОчередиВходящихСообщений() Экспорт 
	
	Если НЕ сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грESB_ИспользоватьВнутреннююОчередь" ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("грОбработкаПакетовИнтеграции.ОчиститьОчередьВходящихСообщений",,"ОчисткаОчередиВходящихСообщений","ОчисткаОчередиВходящихСообщений");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗапуститьЗаданияОбработкиВходящихСообщений() Экспорт 

	Если НЕ сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грESB_ИспользоватьВнутреннююОчередь" ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("грОбработкаПакетовИнтеграции.ЗапуститьЗаданияОбработкиВходящихСообщений_Диспетчер", , "ЗапуститьЗаданияОбработкиВходящихСообщений_Диспетчер", "ОбработатьВходящееСообщениеБезОчереди_Диспетчер");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗапуститьЗаданияОбработкиВходящихСообщений_Диспетчер() Экспорт
	
	// ++ Установка константы по умолчанию
	Если Константы.грESBКоличествоПотоковОбработкиОчередей.Получить() = 0 Тогда
		Константы.грESBКоличествоПотоковОбработкиОчередей.Установить(10);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	// -- Установка константы по умолчанию
	
	// ++ Очистка зависших сообщений
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяМетода", "грОбработкаПакетовИнтеграции.ОбработатьВходящиеСообщения");
	СтруктураОтбора.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Обработчики = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
	МассивКлючей = Новый Массив;
	Для Каждого Задание Из Обработчики Цикл
		МассивКлючей.Добавить(Задание.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	грESBВходящиеСообщенияВОбработке.ИдентификаторСообщения КАК ИдентификаторСообщения
	               |ИЗ
	               |	РегистрСведений.грESBВходящиеСообщенияВОбработке КАК грESBВходящиеСообщенияВОбработке
	               |ГДЕ
	               |	НЕ грESBВходящиеСообщенияВОбработке.КлючЗадания В (&МассивКлючей)";
	Запрос.УстановитьПараметр("МассивКлючей", МассивКлючей);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.грESBВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
		Менеджер.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		Менеджер.Удалить();
	КонецЦикла;
	// -- Очистка зависших сообщений
	
	// ++ Запрос статистики сообщений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	грОчередьВходящихСообщений.Очередь КАК Очередь,
	               |	ЕстьNULL(грОчередьВходящихСообщений.Очередь.Приоритет, 0) КАК Приоритет,
	               |	ЕстьNULL(грОчередьВходящихСообщений.Очередь.КоличествоЗарезервированныхПотоков, 0) КАК КоличествоРезервныхНастройка,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ грОчередьВходящихСообщений.ИдентификаторСообщения) КАК СообщенийВОбработке
	               |ИЗ
	               |	РегистрСведений.грОчередьВходящихСообщений КАК грОчередьВходящихСообщений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.грСостояниеВходящихСообщений КАК тбСостояние
	               |		ПО грОчередьВходящихСообщений.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
	               |			И (тбСостояние.СтатусСообщения В (&СписокСтатусов))
	               |			И (тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грESBВходящиеСообщенияВОбработке КАК грESBВходящиеСообщенияВОбработке
	               |		ПО грОчередьВходящихСообщений.ИдентификаторСообщения = грESBВходящиеСообщенияВОбработке.ИдентификаторСообщения
	               |ГДЕ
	               |	(НЕ грОчередьВходящихСообщений.Очередь.ОчередьОтключена
	               |			ИЛИ грОчередьВходящихСообщений.Очередь = ЗНАЧЕНИЕ(Справочник.грВходящиеВнутренниеОчереди.ПустаяСсылка))
	               |	И грESBВходящиеСообщенияВОбработке.ИдентификаторСообщения ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	грОчередьВходящихСообщений.Очередь";
	Запрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
	Запрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
	ТаблицаСтатистики = Запрос.Выполнить().Выгрузить();
	// -- Запрос статистики сообщений
	
	// ++ Проверяем Приоритеты
	Если ТаблицаСтатистики.Итог("Приоритет") = 0 Тогда
		ТаблицаСтатистики.ЗаполнитьЗначения(1, "Приоритет");
	КонецЕсли;
	// -- Проверяем Приоритеты
	
	// ++ Добавление нужных колонок
	ТаблицаСтатистики.Колонки.Добавить("КоличествоРезервных", Новый ОписаниеТипов("Число"));
	ТаблицаСтатистики.Колонки.Добавить("ЗапуститьОбщих", Новый ОписаниеТипов("Число"));
	ТаблицаСтатистики.Колонки.Добавить("ЗапуститьПриоритет", Новый ОписаниеТипов("Число"));
	ТаблицаСтатистики.Колонки.Добавить("ЗапуститьНагрузка", Новый ОписаниеТипов("Число"));
	// -- Добавление нужных колонок
	
	// ++ определение количества заданий по настройкам
	КоличествоВсехОбработчиковНастройка = Константы.грESBКоличествоПотоковОбработкиОчередей.Получить();
	КоличествоОбработчиковПриоритетНастройка = Константы.грESBКоличествоПотоковОбработкиПриоритетов.Получить();
	КоличествоОбработчиковНагрузкаНастройка = Константы.грESBКоличествоПотоковБалансировкиНагрузки.Получить();
	КоличествоОбработчиковОбщийРезерв = Константы.грESBКоличествоЗарезервированныхПотоковОбработкиОчередей.Получить();
	ЗапросРезервных = Новый Запрос;
	ЗапросРезервных.Текст = "ВЫБРАТЬ
	                        |	СУММА(грВходящиеВнутренниеОчереди.КоличествоЗарезервированныхПотоков) КАК КоличествоЗарезервированныхПотоков
	                        |ИЗ
	                        |	Справочник.грВходящиеВнутренниеОчереди КАК грВходящиеВнутренниеОчереди";
	ВыборкаРезервных = ЗапросРезервных.Выполнить().Выбрать();
	Если ВыборкаРезервных.Следующий() Тогда
		КоличествоРезевныхИзСправочникаОчередей = ВыборкаРезервных.КоличествоЗарезервированныхПотоков;
	Иначе
		КоличествоРезевныхИзСправочникаОчередей = 0;
	КонецЕсли;
	// -- определение количества заданий по настройкам
	
	// ++ Опредение количества работающих заданий
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяМетода", "грОбработкаПакетовИнтеграции.ОбработатьВходящиеСообщения");
	СтруктураОтбора.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Обработчики = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
	КоличествоВсехОбработчиков = Обработчики.Количество();
	
	КоличествоОбщихОбработчиков = 0;
	КоличествоОбработчиковПриоритет = 0;
	КоличествоОбработчиковНагрузка = 0;
	Для Каждого Задание Из Обработчики Цикл
		Если СтрНачинаетсяС(Задание.Ключ, "ОбщийОбработчик") Тогда
			КоличествоОбщихОбработчиков = КоличествоОбщихОбработчиков + 1;	
		КонецЕсли;
		Если СтрНачинаетсяС(Задание.Ключ, "ОбщийПриоритет") Тогда
			КоличествоОбработчиковПриоритет = КоличествоОбработчиковПриоритет + 1;	
		КонецЕсли;
		Если СтрНачинаетсяС(Задание.Ключ, "ОбщийНагрузка") Тогда
			КоличествоОбработчиковНагрузка = КоличествоОбработчиковНагрузка + 1;	
		КонецЕсли;
		Если СтрНачинаетсяС(Задание.Ключ, "РезервныйОчередь") Тогда
			УИДОчередиСтрокой = Прав(Задание.Ключ, 36);
			УИДОчереди = Новый УникальныйИдентификатор(УИДОчередиСтрокой);
			Очередь = Справочники.грВходящиеВнутренниеОчереди.ПолучитьСсылку(УИДОчереди);
			СтруктураПоиска = Новый Структура("Очередь", Очередь);
			МассивСтрок = ТаблицаСтатистики.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаТаблицыСтатистики = МассивСтрок.Получить(0);
				СтрокаТаблицыСтатистики.КоличествоРезервных = СтрокаТаблицыСтатистики.КоличествоРезервных + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// -- Опредение количества работающих заданий
	
	// ++ Определение сколько можно запустить потоков
	МожноЗапуститьНагрузка = КоличествоОбработчиковНагрузкаНастройка - КоличествоОбработчиковНагрузка;
	Если МожноЗапуститьНагрузка < 0 Тогда
		МожноЗапуститьНагрузка = 0;
	КонецЕсли;
	
	МожноЗапуститьПриоритет = КоличествоОбработчиковПриоритетНастройка - КоличествоОбработчиковПриоритет;
	Если МожноЗапуститьПриоритет < 0 Тогда
		МожноЗапуститьПриоритет = 0;
	КонецЕсли;
	
	МожноЗапуститьОбщих = КоличествоВсехОбработчиковНастройка - КоличествоОбщихОбработчиков - КоличествоОбработчиковОбщийРезерв - КоличествоРезевныхИзСправочникаОчередей;
	Если МожноЗапуститьОбщих < 0 Тогда
		МожноЗапуститьОбщих = 0;
	КонецЕсли;
	
	Если МожноЗапуститьНагрузка + МожноЗапуститьОбщих + МожноЗапуститьПриоритет + (ТаблицаСтатистики.Итог("КоличествоРезервныхНастройка") - ТаблицаСтатистики.Итог("КоличествоРезервных")) <= 0 Тогда
		Возврат;
	КонецЕсли;
	// -- Определение сколько можно запустить потоков
	
	// ++ Распределение потоков по очередям
	МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("СообщенийВОбработке");
	МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(МожноЗапуститьНагрузка, МассивДляРаспределения, 0);
	Если МассивРаспределения <> Неопределено Тогда
		Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
			КоличествоНагрузка = МассивРаспределения.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики.ЗапуститьНагрузка = КоличествоНагрузка;
		КонецЦикла;
	КонецЕсли;
	
	МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
	МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(МожноЗапуститьПриоритет, МассивДляРаспределения, 0);
	Если МассивРаспределения <> Неопределено Тогда
		Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
			КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики.ЗапуститьПриоритет = КоличествоПриоритет;
		КонецЦикла;
	КонецЕсли;
	
	МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
	МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(МожноЗапуститьОбщих, МассивДляРаспределения, 0);
	Если МассивРаспределения <> Неопределено Тогда
		Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
			КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики.ЗапуститьОбщих = КоличествоПриоритет;
		КонецЦикла;
	КонецЕсли;
	// -- Распределение потоков по очередям
	
	// ++ Передача сообщений на обработку
	ТаблицаСтатистики.Сортировать("Приоритет Возр");
	// ++ Делаем текст запроса порции
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 100
	               |	грОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	грОчередьВходящихСообщений.КлассСообщения КАК КлассСообщения,
	               |	грОчередьВходящихСообщений.Очередь КАК Очередь,
	               |	ВЫБОР
	               |		КОГДА тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.Новое)
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК ПриоритетСтатуса
	               |ПОМЕСТИТЬ ВТОчередь
	               |ИЗ
	               |	РегистрСведений.грОчередьВходящихСообщений КАК грОчередьВходящихСообщений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.грСостояниеВходящихСообщений КАК тбСостояние
	               |		ПО грОчередьВходящихСообщений.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
	               |			И (тбСостояние.СтатусСообщения В (&СписокСтатусов))
	               |			И (тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грESBВходящиеСообщенияВОбработке КАК грESBВходящиеСообщенияВОбработке
	               |		ПО грОчередьВходящихСообщений.ИдентификаторСообщения = грESBВходящиеСообщенияВОбработке.ИдентификаторСообщения
	               |ГДЕ
	               |	грОчередьВходящихСообщений.Очередь = &Очередь
	               |	И грESBВходящиеСообщенияВОбработке.ИдентификаторСообщения ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередь.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	ВЫБОР
	               |		КОГДА грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.НомерСтроки ЕСТЬ NULL
	               |			ТОГДА 999
	               |		ИНАЧЕ грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.НомерСтроки
	               |	КОНЕЦ КАК Приоритет,
	               |	ВТОчередь.ПриоритетСтатуса КАК ПриоритетСтатуса
	               |ПОМЕСТИТЬ ВТОчередьСПриоритетами
	               |ИЗ
	               |	ВТОчередь КАК ВТОчередь
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.грВходящиеВнутренниеОчереди.ОбрабатываемыеКлассы КАК грВходящиеВнутренниеОчередиОбрабатываемыеКлассы
	               |		ПО ВТОчередь.Очередь = грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка
	               |			И ВТОчередь.КлассСообщения = грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Класс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередьСПриоритетами.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	ВТОчередьСПриоритетами.Приоритет КАК Приоритет,
	               |	ВТОчередьСПриоритетами.ПриоритетСтатуса КАК ПриоритетСтатуса
	               |ИЗ
	               |	ВТОчередьСПриоритетами КАК ВТОчередьСПриоритетами
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриоритетСтатуса,
	               |	Приоритет";
	Запрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
	Запрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
	// -- Делаем текст запроса порции
	КоличествоСтрокТаблицыСтатистики = ТаблицаСтатистики.Количество();
	Для ИндексТаблицыСтатистики = 0 По ТаблицаСтатистики.Количество() - 1 Цикл
		СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(КоличествоСтрокТаблицыСтатистики - ИндексТаблицыСтатистики - 1);
		ОсвободилосьПриоритет = 0;
		ОсвободилосьНагрузка = 0;
		ОсвободилосьОбщих = 0;
		
		// ++ Запускаем резервные
		КоличествоЗапускаемыхРезервных = СтрокаТаблицыСтатистики.КоличествоРезервныхНастройка - СтрокаТаблицыСтатистики.КоличествоРезервных;
		Для КоличествоРезервные = 1 По КоличествоЗапускаемыхРезервных Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "РезервныйОчередь" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.грESBВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("грОбработкаПакетовИнтеграции.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем резервные
		
		// ++ Запускаем общие
		КоличествоЗапускаемыхОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих;
		Для КоличествоПотоковОбщих = 1 По КоличествоЗапускаемыхОбщих Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				СтрокаТаблицыСтатистики.ЗапуститьОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих - 1;	
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "ОбщийОбработчик" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.грESBВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("грОбработкаПакетовИнтеграции.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				ОсвободилосьОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих;
				Если ОсвободилосьОбщих < 0 Тогда
					ОсвободилосьОбщих = 0;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем общие
		
		// ++ Запускаем приоритет
		КоличествоЗапускаемыхПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет;
		Для КоличествоПотоковПриоритет = 1 По КоличествоЗапускаемыхПриоритет Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				СтрокаТаблицыСтатистики.ЗапуститьПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет - 1;	
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "ОбщийПриоритет" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.грESBВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("грОбработкаПакетовИнтеграции.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				ОсвободилосьПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет;
				Если ОсвободилосьПриоритет < 0 Тогда
					ОсвободилосьПриоритет = 0;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем приоритет
		
		// ++ Запускаем нагрузка
		КоличествоЗапускаемыхНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка;
		Для КоличествоПотоковНагрузка = 1 По КоличествоЗапускаемыхНагрузка Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				СтрокаТаблицыСтатистики.ЗапуститьНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка - 1;	
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "ОбщийНагрузка" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.грESBВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("грОбработкаПакетовИнтеграции.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				ОсвободилосьНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка;
				Если ОсвободилосьНагрузка < 0 Тогда
					ОсвободилосьНагрузка = 0;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем нагрузка
		
		// ++ Строка обработана
		ТаблицаСтатистики.Удалить(СтрокаТаблицыСтатистики);
		// -- Строка обработана
		
		// ++ Перераспределям потоки
		Если ТаблицаСтатистики.Количество() > 0 Тогда
			Если ОсвободилосьОбщих > 0 Тогда
				МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
				МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОсвободилосьОбщих, МассивДляРаспределения, 0);
				Если МассивРаспределения <> Неопределено Тогда
					Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
						КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики.ЗапуститьОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих + КоличествоПриоритет;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ОсвободилосьНагрузка > 0 Тогда
				МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("СообщенийВОбработке");
				МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОсвободилосьНагрузка, МассивДляРаспределения, 0);
				Если МассивРаспределения <> Неопределено Тогда
					Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
						КоличествоНагрузка = МассивРаспределения.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики.ЗапуститьНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка + КоличествоНагрузка;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
				
			Если ОсвободилосьПриоритет > 0 Тогда
				МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
				МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОсвободилосьПриоритет, МассивДляРаспределения, 0);
				Если МассивРаспределения <> Неопределено Тогда
					Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
						КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики.ЗапуститьПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет + КоличествоПриоритет;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// -- Перераспределям потоки
		
	КонецЦикла;
	// -- Передача сообщений на обработку
	
КонецПроцедуры

Процедура ЗапуститьЗаданиеОбновленияСтатистикиВнутреннихОчередей() Экспорт
	
	Если НЕ сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грESB_ИспользоватьВнутреннююОчередь" ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("грОбработкаПакетовИнтеграции.ЗафиксироватьСтатистикуВнутреннихОчередей",,"ЗафиксироватьСтатистикуВнутреннихОчередей","ЗафиксироватьСтатистикуВнутреннихОчередей");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ВходящаяОчередь_Методы

// Процедура - Поместить в очередь входящих сообщение ESB
//
// Параметры:
//  Идентификатор	- Строка - идентификатор сообщения. 
//  КлассСообщения	- Строка - класс ссобщения. 
//  ОбъектСобытия	- Строка - сообщение ESB. 
//  Формат			- Перечисление.сшпФорматыСообщений - формат поступившего сообщения. 
//  ДатаРегистрации	- Дата - дата регистрации в очереди входящих сообщений ESB. 
//
Функция ПоместитьВОчередьВходящих( Идентификатор, КлассСообщения, ОбъектСобытия, форматПакета, ДатаРегистрации ) Экспорт
	
	//+ Замер производительности
	КлючеваяОперация = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьПрефиксКлючевойОперации() + "Запись в очередь входящих сообщений";
	ЗамерОбщегоВремениРаботыОбработчикаВОбщемМодуле = ОценкаПроизводительности.НачатьЗамерВремени();
	//- Замер производительности
	
	СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано;

	Попытка
		
		ОбъектСообщение = сшпОбщегоНазначения.ПолучитьОбъектXDTO( форматПакета, объектсобытия);
		
	Исключение
		
		//Сообщение не валидно
		ТекстОшибки = "Не удалось десериализовать сообщение " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.НеВалидно;
		
		//+ Замер производительности
		ДанныеДляКомментария = Новый Структура("ТекстОшибки", ТекстОшибки);
		ОценкаПроизводительности.ЗакончитьЗамерВремени( грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьПрефиксКлючевойОперации()
		+ КлючеваяОперация + " - ошибка", ЗамерОбщегоВремениРаботыОбработчикаВОбщемМодуле,, ДанныеДляКомментария);
		//- Замер производительности
		
		Возврат СостояниеСообщения;
		
	КонецПопытки;
	
	ИдентификаторСообщения = ?(ТипЗнч(Идентификатор) = Тип("Строка"), Новый УникальныйИдентификатор(Идентификатор), Идентификатор);
	УстановитьСостояниеСообщения(ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.Новое);
	
	Набор = РегистрыСведений.грОчередьВходящихСообщений.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	ТекЗапись.ДатаРегистрации = ДатаРегистрации;
	ТекЗапись.ФорматСообщения = форматПакета;
	ТекЗапись.КлассСообщения = КлассСообщения;
	
	ДатаСоздания = XMLЗначение( Тип("Дата"), ОбъектСообщение.CreationTime );
	ТекЗапись.ДатаСоздания = МестноеВремя( ДатаСоздания, ЧасовойПояс());
	
	ТекЗапись.ВнешняяСистема = грОбработкаПакетовИнтеграции.ПолучитьВнешнююСистему(ОбъектСообщение.Source);
	
	ТекЗапись.Хранилище = Новый ХранилищеЗначения(ОбъектСобытия);
	
	Если ТипЗнч(ОбъектСобытия) = Тип("Строка") Тогда
		ТекЗапись.ДлинаСообщения = СтрДлина(ОбъектСобытия);
	КонецЕсли;
	
	ТекЗапись.Очередь = ПолучитьОчередь(КлассСообщения, ТекЗапись.ВнешняяСистема); 
	
	Набор.Записать(Истина);
	
	//++ Градум Гусев А.С. 05.05.2021
	ОценкаПроизводительности.ЗакончитьЗамерВремени( грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьПрефиксКлючевойОперации()
	+ КлючеваяОперация, ЗамерОбщегоВремениРаботыОбработчикаВОбщемМодуле);
	//-- Градум Гусев А.С. 05.05.2021
	
	Возврат СостояниеСообщения;
	
КонецФункции

Процедура ОбработатьВходящееСообщениеИзОчереди(Знач Идентификатор, Знач ФорматСообщения, Знач КлассСообщения, ДатаРегистрации, Хранилище) Экспорт
	
	Если сшпОбслуживаниеОчередей.ИдетОбработкаСистемныхСобытий() Тогда
		
		Возврат; //Если включена обработка системных событий останавливаем рабочие потоки.
	
	КонецЕсли;
	
	СткОбработчик = сшпКэшируемыеФункции.ПолучитьОбработчик(КлассСообщения, Перечисления.сшпТипыИнтеграции.Входящая, сшпФункциональныеОпции.ВерсияОбработчиков());
	
	Если Не ЗначениеЗаполнено(СткОбработчик.ПроцедураОбработки) Тогда
		
		ТекстСообщения = "В 1С отсутствует входящий обработчик для класса " + Строка(КлассСообщения);
	    грОбработкаПакетовИнтеграции.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОтсутствуетОбработчик, , ТекстСообщения );

	Иначе
			
		Если сткОбработчик.Статус = Перечисления.сшпСтатусыОбработчиков.Отключен Тогда
			
			ТекстСообщения = "Обработка исходящего сообщения была отменена! Обработчик отключен!";
		    грОбработкаПакетовИнтеграции.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена, , ТекстСообщения );

		Иначе
				
			Попытка
				
				//++ Градум Гусев А.С. 05.05.2021
				ЗамерОбщегоВремениРаботыОбработчикаВОбщемМодуле = ОценкаПроизводительности.НачатьЗамерВремени();
				//-- Градум Гусев А.С. 05.05.2021

				Задержка = 0;
				текЗаголовокЖурнала = "Datareon. Получение объекта события";
				
				ИдШаблона = СткОбработчик.ИдентификаторШаблона;
				ВерсияШаблона = СткОбработчик.Версия;
				
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано; // Переменная для установки нового состояние сообщения
				ОбъектСообщение = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Хранилище.Получить());
						
				КоличествоПопытокОжидания = сшпОбщегоНазначения.ПолучитьКоличествоПопытокОжидания(ОбъектСообщение);		
								
				Выполнить(сткОбработчик.ПроцедураОбработки);
				
				//++ Градум Гусев А.С. 05.05.2021
				ОценкаПроизводительности.ЗакончитьЗамерВремени( грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьПрефиксКлючевойОперации()
					+ сткОбработчик.Наименование + " - общее время", ЗамерОбщегоВремениРаботыОбработчикаВОбщемМодуле);
				//-- Градум Гусев А.С. 05.05.2021
				
				грОбработкаПакетовИнтеграции.УстановитьСостояниеСообщения(Идентификатор, СостояниеСообщения, Задержка );
				
			Исключение
				
				ТекстОшибки = сшпОбщегоНазначения.ДополнитьТекстОшибки(сшпОбщегоНазначения.ПолучитьТекстОшибкиОбработчика(ИнформацияОбОшибке()), СткОбработчик, Неопределено);			
				ЗаписьЖурналаРегистрации("Datareon. Обработка сообщения", УровеньЖурналаРегистрации.Ошибка, , Идентификатор, ТекстОшибки);
				//++ Градум Гусев А.С. 05.05.2021
				ДанныеДляКомментария = Новый Структура("ТекстОшибки", ТекстОшибки);
				ОценкаПроизводительности.ЗакончитьЗамерВремени( грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьПрефиксКлючевойОперации() 
					+ сткОбработчик.Наименование + " - общее время, ошибка", ЗамерОбщегоВремениРаботыОбработчикаВОбщемМодуле,, ДанныеДляКомментария);
				//-- Градум Гусев А.С. 05.05.2021
								
				грОбработкаПакетовИнтеграции.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОшибкаОбработки, , ТекстОшибки);
								
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Установить состояние сообщения
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор - индентификатор сообщения.
//  НовоеСостояние	 - Перечисление.сшпСтатусыСообщений - новое состояние сообщения. 
//	Задержка		 - Число - Секунд задержки
//	ОписаниеОшибки	 - Строка - Описание ошибки
//	ИндексПотока	 - Число - индекс потока
//
Процедура УстановитьСостояниеСообщения(ИдентификаторСообщения, НовоеСостояние, Задержка = 0, ОписаниеОшибки = "", ИндексПотока = 0) Экспорт
	
	Набор = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьОбъектНабораЗаписейСостоянияСообщений();
	
	Набор.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	грСостояниеВходящихСообщений.КоличествоОткладываний КАК КоличествоОткладываний
	               |ИЗ
	               |	РегистрСведений.грСостояниеВходящихСообщений КАК грСостояниеВходящихСообщений
	               |ГДЕ
	               |	грСостояниеВходящихСообщений.ИдентификаторСообщения = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоОткладываний = Выборка.КоличествоОткладываний;
	Иначе
		КоличествоОткладываний = 0;
	КонецЕсли;
		
	Если НовоеСостояние = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки И Задержка <> 0 Тогда
		КоличествоОткладываний = КоличествоОткладываний + 1;
		МаксимальноеКоличествоОткладываний = Константы.грESBМаксимальноеЧислоОткладыванияСообщенийв1С.Получить();
		Если МаксимальноеКоличествоОткладываний = 0 Тогда
			Константы.грESBМаксимальноеЧислоОткладыванияСообщенийв1С.Установить(30);
			МаксимальноеКоличествоОткладываний = 30;
		КонецЕсли;
		Если КоличествоОткладываний > МаксимальноеКоличествоОткладываний Тогда
			НовоеСостояние = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
			ОписаниеОшибки = "Превышено максимальное количесво попыток откладывания";
		КонецЕсли;
	КонецЕсли;
	
	
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
		
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ДатаИзменения = ТекущаяДатаСеанса();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	ТекЗапись.СтатусСообщения = НовоеСостояние;
	ТекЗапись.Задержка = Задержка;
	ТекЗапись.ЗадержкаЧисло = сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекЗапись.ДатаИзменения, ТекЗапись.Задержка);
	ТекЗапись.ОписаниеОшибки = ОписаниеОшибки;
	ТекЗапись.ИндексПотока = ИндексПотока;
	ТекЗапись.КоличествоОткладываний = КоличествоОткладываний;
	
	Набор.Записать(Истина);	
	
КонецПроцедуры

Процедура УдалитьВходящееСообщение(Идентификатор) Экспорт 
		
	ТекЗапись = РегистрыСведений.грОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
	
	ТекЗапись.ИдентификаторСообщения = Идентификатор;
	ТекЗапись.Удалить();
	
	ТекЗапись = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьОбъектНабораЗаписейСостоянияСообщений();
	ТекЗапись.Отбор.ИдентификаторСообщения.Установить(Идентификатор);
	
	ТекЗапись.Прочитать();
	
	Если ТекЗапись.Выбран() Тогда
		ТекЗапись.Очистить();
		ТекЗапись.Записать();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработатьВходящиеСообщения(МассивИдентификаторов) Экспорт 
	
	//+++ Градум; Курпяев Е.Д. ; 13.08.2021;
	//КоличествоПотоковМаксимум = сшпРаботаСКонстантами.МаксимальноеКоличествоПотоковОбработкиВходящих();
	КоличествоПотоковМаксимум = 30;
	//--- Градум; Курпяев Е.Д. ; 13.08.2021;
	//КоличествоПотоковЗапущено = сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", "ОбработатьВходящееСообщениеБезОчереди");
	//
	//КоличествоПопыток = 250;
	//
	//Пока КоличествоПотоковЗапущено >= КоличествоПотоковМаксимум Цикл
	//				
	//	Если КоличествоПопыток <= 0 Тогда 
	//		
	//		//Отправляем статус занято
	//		//ПакетПотокиЗаняты = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-1CIsBusy");
	//		//сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(ПакетПотокиЗаняты); 						
	//		
	//		//Запустить поток контроля
	//		//сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("КонтрольВходящихПотоков", "сшпВзаимодействиеСАдаптером");
	//		
	//		Возврат;
	//		
	//	КонецЕсли;
	//				
	//	КоличествоПотоковЗапущено = сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", "ОбработатьВходящееСообщениеБезОчереди");
	//	
	//	сшпОбщегоНазначения.ОжиданиеМСек(100); 
	//	
	//	КоличествоПопыток = КоличествоПопыток - 1;
	//	
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийгрОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	РегистрСведенийгрОчередьВходящихСообщений.Хранилище КАК Хранилище,
	               |	РегистрСведенийгрОчередьВходящихСообщений.КлассСообщения КАК КлассСообщения,
	               |	РегистрСведенийгрОчередьВходящихСообщений.ФорматСообщения КАК ФорматСообщения,
	               |	РегистрСведенийгрОчередьВходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
	               |ИЗ
	               |	РегистрСведений.грОчередьВходящихСообщений КАК РегистрСведенийгрОчередьВходящихСообщений
	               |ГДЕ
	               |	РегистрСведенийгрОчередьВходящихСообщений.ИдентификаторСообщения В(&МассивИдентификаторов)";
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		грОбработкаПакетовИнтеграции.ОбработатьВходящееСообщениеИзОчереди(Выборка.ИдентификаторСообщения, Выборка.ФорматСообщения, Выборка.КлассСообщения, Выборка.ДатаРегистрации, Выборка.Хранилище);
		МенеджерВОбработке = РегистрыСведений.грESBВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
		МенеджерВОбработке.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		МенеджерВОбработке.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОчередь(КлассСообщения, ВнешняяСистема)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	1 КАК Приоритет,
	               |	грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка КАК Очередь
	               |ПОМЕСТИТЬ ВТОчередиКлассы
	               |ИЗ
	               |	Справочник.грВходящиеВнутренниеОчереди.ОбрабатываемыеКлассы КАК грВходящиеВнутренниеОчередиОбрабатываемыеКлассы
	               |ГДЕ
	               |	грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Класс = &Класс
	               |	И НЕ грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка.ОчередьОтключена
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	2,
	               |	грВходящиеВнутренниеОчереди.Ссылка
	               |ИЗ
	               |	Справочник.грВходящиеВнутренниеОчереди КАК грВходящиеВнутренниеОчереди
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.грВходящиеВнутренниеОчереди.ВнешниеСистемы КАК грВходящиеВнутренниеОчередиВнешниеСистемы
	               |		ПО (грВходящиеВнутренниеОчередиВнешниеСистемы.Ссылка = грВходящиеВнутренниеОчереди.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.грВходящиеВнутренниеОчереди.ОбрабатываемыеКлассы КАК грВходящиеВнутренниеОчередиОбрабатываемыеКлассы
	               |		ПО (грВходящиеВнутренниеОчереди.Ссылка = грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка)
	               |ГДЕ
	               |	грВходящиеВнутренниеОчередиВнешниеСистемы.Система = &Система
	               |	И НЕ грВходящиеВнутренниеОчереди.ОчередьОтключена
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	грВходящиеВнутренниеОчереди.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ грВходящиеВнутренниеОчередиОбрабатываемыеКлассы.НомерСтроки) = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	грВходящиеВнутренниеОчередиВнешниеСистемы.Ссылка КАК Очередь
	               |ПОМЕСТИТЬ ВТОчередиСистемы
	               |ИЗ
	               |	Справочник.грВходящиеВнутренниеОчереди.ВнешниеСистемы КАК грВходящиеВнутренниеОчередиВнешниеСистемы
	               |ГДЕ
	               |	грВходящиеВнутренниеОчередиВнешниеСистемы.Система = &Система
	               |	И НЕ грВходящиеВнутренниеОчередиВнешниеСистемы.Ссылка.ОчередьОтключена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТОчередиКлассы.Приоритет КАК Приоритет,
	               |	ВТОчередиКлассы.Очередь КАК Очередь
	               |ПОМЕСТИТЬ ВТПодходищиеОчереди
	               |ИЗ
	               |	ВТОчередиКлассы КАК ВТОчередиКлассы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОчередиСистемы КАК ВТОчередиСистемы
	               |		ПО ВТОчередиКлассы.Очередь = ВТОчередиСистемы.Очередь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПодходищиеОчереди.Приоритет КАК Приоритет,
	               |	ВТПодходищиеОчереди.Очередь КАК Очередь,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ грОчередьВходящихСообщений.ИдентификаторСообщения) КАК КоличествоСообщений
	               |ПОМЕСТИТЬ ВТОчередиСКоличествомСообщенийИзОчереди
	               |ИЗ
	               |	ВТПодходищиеОчереди КАК ВТПодходищиеОчереди
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грОчередьВходящихСообщений КАК грОчередьВходящихСообщений
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.грСостояниеВходящихСообщений КАК тбСостояние
	               |			ПО грОчередьВходящихСообщений.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
	               |				И (тбСостояние.СтатусСообщения В (&СписокСтатусов))
	               |				И (тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло)
	               |		ПО ВТПодходищиеОчереди.Очередь = грОчередьВходящихСообщений.Очередь
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТПодходищиеОчереди.Приоритет,
	               |	ВТПодходищиеОчереди.Очередь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередиСКоличествомСообщенийИзОчереди.Приоритет КАК Приоритет,
	               |	ВТОчередиСКоличествомСообщенийИзОчереди.Очередь КАК Очередь,
	               |	ЕстьNULL(грСтатистикаВнутреннихОчередей.КоличествоСообщенийНаОбработку, ВТОчередиСКоличествомСообщенийИзОчереди.КоличествоСообщений) КАК КоличествоСообщений
	               |ПОМЕСТИТЬ ВТОчередиСКоличествомСообщений
	               |ИЗ
	               |	ВТОчередиСКоличествомСообщенийИзОчереди КАК ВТОчередиСКоличествомСообщенийИзОчереди
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грСтатистикаВнутреннихОчередей КАК грСтатистикаВнутреннихОчередей
	               |		ПО ВТОчередиСКоличествомСообщенийИзОчереди.Очередь = грСтатистикаВнутреннихОчередей.Очередь
	               |
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередиСКоличествомСообщений.Приоритет КАК Приоритет,
	               |	ВТОчередиСКоличествомСообщений.Очередь КАК Очередь,
	               |	ВТОчередиСКоличествомСообщений.КоличествоСообщений КАК КоличествоСообщений
	               |ИЗ
	               |	ВТОчередиСКоличествомСообщений КАК ВТОчередиСКоличествомСообщений
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет,
	               |	КоличествоСообщений";
	Запрос.УстановитьПараметр("Класс", КлассСообщения);
	Запрос.УстановитьПараметр("Система", ВнешняяСистема);
	Запрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
	Запрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Очередь;
	Иначе
		Возврат Справочники.грВходящиеВнутренниеОчереди.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции
	
Процедура ОчиститьОчередьВходящихСообщений() Экспорт 
	
	ТекЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДлительностиОжидания.СтатусСообщения КАК СтатусСообщения,
	|	ТаблицаДлительностиОжидания.ДлительностьХранения КАК Длительность
	|ПОМЕСТИТЬ ТаблицаДлительностиОжидания
	|ИЗ
	|	&ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тбОчередь.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.грОчередьВходящихСообщений КАК тбОчередь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.грСостояниеВходящихСообщений КАК тбСостояние
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
	|			ПО тбСостояние.СтатусСообщения = ТаблицаДлительностиОжидания.СтатусСообщения
	|				И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, 0) > 0)
	|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
	|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, ДЕНЬ) > ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию))
	|			И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию) > 0)");
	
	ТекЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ДлительностьХраненияПоУмолчанию = грESBРаботаСКонстантами.ПолучитьДлительностьХраненияПоУмолчанию();
	ТекЗапрос.УстановитьПараметр("СрокХраненияПоУмолчанию", ДлительностьХраненияПоУмолчанию);
	ТекЗапрос.УстановитьПараметр("ТаблицаДлительностиОжидания", грESBРаботаСКонстантами.ПолучитьДлительностьХранения());
	
	ТекВыборка = ТекЗапрос.Выполнить().Выбрать();
	
	Пока ТекВыборка.Следующий() Цикл
		
		грОбработкаПакетовИнтеграции.УдалитьВходящееСообщение(ТекВыборка.ИдентификаторСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьСтатистикуВнутреннихОчередей() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	грВходящиеВнутренниеОчереди.Ссылка КАК Очередь
	               |ПОМЕСТИТЬ ВТВсеОчереди
	               |ИЗ
	               |	Справочник.грВходящиеВнутренниеОчереди КАК грВходящиеВнутренниеОчереди
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.грВходящиеВнутренниеОчереди.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	грОчередьВходящихСообщений.Очередь КАК Очередь,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ грОчередьВходящихСообщений.ИдентификаторСообщения) КАК КоличествоСообщенийНаОбработку,
	               |	0 КАК КоличествоСообщений
	               |ПОМЕСТИТЬ ВТКоличествоСообщений
	               |ИЗ
	               |	РегистрСведений.грОчередьВходящихСообщений КАК грОчередьВходящихСообщений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.грСостояниеВходящихСообщений КАК грСостояниеВходящихСообщений
	               |		ПО грОчередьВходящихСообщений.ИдентификаторСообщения = грСостояниеВходящихСообщений.ИдентификаторСообщения
	               |ГДЕ
	               |	грСостояниеВходящихСообщений.СтатусСообщения В(&РабочиеСтатусы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	грОчередьВходящихСообщений.Очередь
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	грОчередьВходящихСообщений.Очередь,
	               |	0,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ грОчередьВходящихСообщений.ИдентификаторСообщения)
	               |ИЗ
	               |	РегистрСведений.грОчередьВходящихСообщений КАК грОчередьВходящихСообщений
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	грОчередьВходящихСообщений.Очередь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТВсеОчереди.Очередь КАК Очередь,
	               |	СУММА(ЕСТЬNULL(ВТКоличествоСообщений.КоличествоСообщений, 0)) КАК КоличествоСообщений,
	               |	СУММА(ЕСТЬNULL(ВТКоличествоСообщений.КоличествоСообщенийНаОбработку, 0)) КАК КоличествоСообщенийНаОбработку
	               |ИЗ
	               |	ВТВсеОчереди КАК ВТВсеОчереди
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСообщений КАК ВТКоличествоСообщений
	               |		ПО (ВТКоличествоСообщений.Очередь = ВТВсеОчереди.Очередь)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТВсеОчереди.Очередь";
	
	Запрос.УстановитьПараметр("РабочиеСтатусы", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.грСтатистикаВнутреннихОчередей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
				   
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИсходящаяОчередь

#Область ИсходящаяОчередь_Методы

Процедура ЗаписатьИсториюОбработкиИсходящегоСообщения(ИдентификаторСообщения, Класс, Источник) Экспорт 
	
	ДатаВыгрузки = ТекущаяДатаСеанса();
	ПорядковыйНомер = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(грИсторияОбработкиИсходящихСообщений.ПорядковыйНомер) КАК ПорядковыйНомер
	               |ПОМЕСТИТЬ ВТМаксимум
	               |ИЗ
	               |	РегистрСведений.грИсторияОбработкиИсходящихСообщений КАК грИсторияОбработкиИсходящихСообщений
	               |ГДЕ
	               |	грИсторияОбработкиИсходящихСообщений.ДатаВыгрузки = &ДатаВыгрузки
	               |	И грИсторияОбработкиИсходящихСообщений.ИдентификаторСообщения = &ИдентификаторСообщения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТМаксимум.ПорядковыйНомер КАК ПорядковыйНомер
	               |ИЗ
	               |	ВТМаксимум КАК ВТМаксимум
	               |ГДЕ
	               |	НЕ ВТМаксимум.ПорядковыйНомер ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ДатаВыгрузки", ДатаВыгрузки);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПорядковыйНомер = Выборка.ПорядковыйНомер + 1;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.грИсторияОбработкиИсходящихСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаВыгрузки = ДатаВыгрузки;
	МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;
	МенеджерЗаписи.ПорядковыйНомер = ПорядковыйНомер;
	МенеджерЗаписи.Класс = Класс;
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Источник) Тогда
		Если ЗначениеЗаполнено(Источник) И ОбщегоНазначения.СсылкаСуществует(Источник) Тогда
			МенеджерЗаписи.Источник = Новый ХранилищеЗначения(Источник);
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Дозапросы

// Процедура записывает в очередь дозапроса ( исходящий обработчик) 
// 
// Параметры:
//  Ключ - Строка - идентификатор объекта
//  idflow - дата – идентификатор потока
//
Процедура ЗаписатьВОчередьДозапросов_v2( Дозапрос ) Экспорт 
	
	НаборЗаписей = РегистрыСведений.грОчередьДозапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить( Дозапрос.Ключ );
	НаборЗаписей.Отбор.idflow.Установить( Дозапрос.idflow );
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств( Запись, Дозапрос );
	Запись.ДатаОтправки = ТекущаяДатаСеанса(); 
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура помещает дозапросы в очередь исходящих сообщений и регистрирует в РС грОчередьДозапросов
// Параметры:
//	ТаблицаНенайденных				- ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов.
//	Таймаут							- Таймаут дозапроса в секундах.
//	КоличествоПопытокБлокировки		- Число - количество попыток блокировки РС грОчередьДозапросов
//	ТаблицаИдентификаторовПотоков	- ТаблицаЗначений - таблица идентификаторов потоков.
//
Процедура СоздатьДозапросыПоТаблице(ТаблицаНенайденных, Таймаут = 3600, КоличествоПопытокБлокировки = 0, ТаблицаИдентификаторовПотоков = Неопределено) Экспорт
	
	Для Каждого Строка Из ТаблицаНенайденных Цикл 
		Если ЗначениеЗаполнено(Строка.ИдентификаторПотока) И ТаблицаИдентификаторовПотоков <> Неопределено Тогда 
			
			НайденнаяСтрока = ТаблицаИдентификаторовПотоков.Найти(Строка.ИдентификаторПотока, "Мнемокод");
			Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Включен Тогда 
				Строка.ИдентификаторПотока = НайденнаяСтрока.idflow;
			Иначе
				НайденнаяСтрока = ТаблицаИдентификаторовПотоков.Найти(Строка.ИдентификаторПотока, "idflow");
				Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Включен Тогда 
					Строка.ИдентификаторПотока = НайденнаяСтрока.idflow;
				Иначе
					Строка.ИдентификаторПотока = "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грОчередьДозапросов");
	ЭлементБлокировки.ИсточникДанных = ТаблицаНенайденных;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ключ", "Ключ");
	
	БлокировкаУстановлена = КоличествоПопытокБлокировки = 0;
	Для СчетчикПопыток = 1 По КоличествоПопытокБлокировки Цикл
		Попытка
			Блокировка.Заблокировать();
			БлокировкаУстановлена = Истина;
			Прервать;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ БлокировкаУстановлена Тогда 
		ВызватьИсключение "Ошибка блокировки";
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"Выбрать 
		|	ТаблицаНенайденных.Ключ,
		|	ТаблицаНенайденных.ИдентификаторПотока
		|ПОМЕСТИТЬ ВТ_ТаблицаНенайденных
		|ИЗ
		|	&ТаблицаНенайденных КАК ТаблицаНенайденных
		|;
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНенайденных.Ключ КАК Ключ,
		|	ВТ_ТаблицаНенайденных.ИдентификаторПотока
		|ИЗ
		|	ВТ_ТаблицаНенайденных КАК ВТ_ТаблицаНенайденных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грОчередьДозапросов КАК грОчередьДозапросов
		|		ПО ВТ_ТаблицаНенайденных.Ключ = грОчередьДозапросов.Ключ
		|			И ВТ_ТаблицаНенайденных.ИдентификаторПотока = грОчередьДозапросов.idflow
		|ГДЕ
		|	ВТ_ТаблицаНенайденных.ИдентификаторПотока <> """" 
		|	И (грОчередьДозапросов.Ключ ЕСТЬ NULL ИЛИ грОчередьДозапросов.ДатаОтправки < &Дата)"
	);
	
	Запрос.УстановитьПараметр("ТаблицаНенайденных", ТаблицаНенайденных);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - Таймаут);
	
	текДата = ТекущаяДатаСеанса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		сткДозапрос = Новый Структура;
		сткДозапрос.Вставить("Ключ", Выборка.Ключ);
		сткДозапрос.Вставить("idflow", Выборка.ИдентификаторПотока);
		сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("Дозапрос" , сткДозапрос);
				
		МЗ = РегистрыСведений.грОчередьДозапросов.СоздатьМенеджерЗаписи();
		МЗ.Ключ = Выборка.Ключ;
		МЗ.ДатаОтправки = текДата;
		МЗ.idflow = Выборка.ИдентификаторПотока;
		МЗ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура помещает в очередь исходящих сообщений и регистрирует в РС грОчередьДозапросов
// 
// Параметры:
//  Ключ - Строка - идентификатор объекта
//  idflow - дата – идентификатор потока
//
Процедура ПоместитьВОчередьИсходящихДозапрос( Ключ, idflow )
	
	ДоЗапрос = Новый Структура;
	ДоЗапрос.Вставить( "Ключ", Ключ);
	ДоЗапрос.Вставить( "idflow", idflow);
	сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих( "Дозапрос" , ДоЗапрос );
	
	грОбработкаПакетовИнтеграции.ЗаписатьВОчередьДозапросов_v2( ДоЗапрос );
	
КонецПроцедуры

// Процедура удаляет запись из РС грОчередьДозапросов.
// Параметры:
//	Ключ	- Строка - ключ дозапрашиваемого объекта.
//	ИдентификаторПотока	- Строка - идентификатор потока или мнемокод идентификатора потока. 
//							Мнемокод работает, если задана таблица идентификаторов потоков.
//	ТаблицаИдентификаторовПотоков - ТаблицаЗначений - таблица идентификаторов потоков.
//
Процедура УдалитьЗаписьОДозапросе(Ключ, Знач ИдентификаторПотока, ТаблицаИдентификаторовПотоков = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПотока) Тогда 
		Возврат;
	КонецЕсли;
	
		
	Если ТаблицаИдентификаторовПотоков <> Неопределено Тогда 
		
		НайденнаяСтрока = ТаблицаИдентификаторовПотоков.Найти(ИдентификаторПотока, "Мнемокод");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ИдентификаторПотока = НайденнаяСтрока.idflow;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПотока) Тогда 
	
		МЗ = РегистрыСведений.грОчередьДозапросов.СоздатьМенеджерЗаписи();
		МЗ.Ключ = Ключ;
		МЗ.idflow = ИдентификаторПотока;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			МЗ.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьФорматДозапроса(Строка, ТаблицаИдентификаторовПотоков, 
														ТаблицаТиповПрефиксовКлючей )
	Отказ = Ложь;
	
	Если Строка.Ключ = "" ИЛИ Строка.ИдентификаторПотока = "" Тогда
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
	
	СтрокиИдентификаторовПотоковESB = ТаблицаИдентификаторовПотоков.НайтиСтроки( Новый Структура("idflow", Строка.ИдентификаторПотока) );
	
	Если СтрокиИдентификаторовПотоковESB.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат Отказ; // См. ЗаписатьНенайденныеОбъектыВЖР
	КонецЕсли;
	
	ПрефиксКлюча = Сред(Строка.Ключ, 1, 4);
	НайденПрефикс = Ложь;
	
	Для Каждого СтрокаИдентификаторов Из СтрокиИдентификаторовПотоковESB Цикл
		
		СтрокиТиповПрефиксов = ТаблицаТиповПрефиксовКлючей.НайтиСтроки(
			Новый Структура("Префикс, ТипОбъекта", ПрефиксКлюча, СтрокаИдентификаторов.МетаданныеПолноеИмя));
			
		НайденПрефикс = СтрокиТиповПрефиксов.Количество() <> 0;
		
		Если НайденПрефикс Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Не НайденПрефикс;
	
	Возврат Отказ;
	
КонецФункции//ВыполнитьПроверкуКорректностиСтрокиДозапроса

#Область НенайденныеОбъекты

// Процедура записывает в ЖР предупреждения о ненайденных объектах
// Параметры:
//  ИдентификаторСообщения			- УникальныйИдентификатор - идентификатор входящего сообщения.
//	ТаблицаНенайденных				- ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов.
//	ПараметрыОбработки				- Структура - см. ПолучитьПараметрыОбработкиСообщения.
//	ДополнительныеПараметры			- Структура - дополнительные параметры.
// 
Процедура ОбработатьИсключениеНенайденныхОбъектов( ИдентификаторСообщения, ТаблицаНенайденных, ПараметрыОбработки, ДополнительныеПараметры = Неопределено ) Экспорт 
	
	ТекстОшибки = грОбработкаПакетовИнтеграции.ПолучитьТекстПредупрежденияОНенайденныхОбъектах(
		ТаблицаНенайденных, ИдентификаторСообщения);
	
	Если ПараметрыОбработки.ИспользоватьИсключенияДляНенайденныхОбъектов Тогда
		
		ВызватьИсключение ТекстОшибки;
		
	Иначе
		// +++ Градум; Кульчихин; 29.06.2021; №B21877 Идентификатор из заголовка перенесен в грДанные
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Предупреждение,
						 "Datareon. Обработка сообщения. Прогресс загрузки пакета.", ТекстОшибки, "" + ИдентификаторСообщения );

	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает пустую таблицу ненайденных объектов.
// Возвращаемое значение:
//	ТаблицаЗначений
//		Ключ - Строка - идентификатор объекта
//		МетаданныеПолноеИмя - Строка - полное имя метаданных
//		ВидИдентификатора - Строка - вид идентификатора
//		ИдентификаторПотока - Строка - идентификатор потока или его мнемокод
//		Ссылка - ЛюбаяСсылка - новая ссылка.
//		ID - Строка - ключ обрабатываемого объекта.
//		Класс - Строка - ключ обрабатываемого объекта.
//
Функция СоздатьТаблицуНенайденныхОбъектов() Экспорт
	мтдТПК = Метаданные.РегистрыСведений.грТаблицаПереходныхКлючейERP;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ключ", мтдТПК.Измерения.ИдентификаторОбъекта.Тип);
	Результат.Колонки.Добавить("МетаданныеПолноеИмя", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	Результат.Колонки.Добавить("ВидИдентификатора", мтдТПК.Измерения.ВидИдентификатораСтрока.Тип);
	Результат.Колонки.Добавить("ИдентификаторПотока", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	Результат.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	Результат.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));

	
	ТипВсеСсылки = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Документы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыСчетов.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыОбмена.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, БизнесПроцессы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Задачи.ТипВсеСсылки().Типы());
	
	Результат.Колонки.Добавить("Ссылка", ТипВсеСсылки);
	
	Результат.Индексы.Добавить("Ключ,МетаданныеПолноеИмя,ВидИдентификатора,ИдентификаторПотока,ID,Класс");
	
	Возврат Результат;
	
КонецФункции

// Процедура регистрирует ненайденный объект в таблице, если его в ней нет.
// Параметры:
//	Таблица							- ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов
//	Ключ                            - Строка    - ИдентификаторОбъекта для поиска объектов
//	МетаданныеПолноеИмя             - Строка    - полное имя метаданных
//	ВидИдентификатора				- Строка    - вид идентификатора
//	ИдентификаторПотока				- Строка	- идентификатор потока дозапроса или его мнемокод
//	Ссылка							- ЛюбаяСсылка - ссылка, присвоенная ненайденному объекту
//
Процедура ЗарегистрироватьНенайденныйОбъект(Таблица, Ключ, МетаданныеПолноеИмя, ВидИдентификатора,  
											ИдентификаторПотока = Неопределено, Ссылка = Неопределено, ID = Неопределено, Класс = Неопределено ) Экспорт
	
	сткОтбор = Новый Структура(
		"Ключ, МетаданныеПолноеИмя, ВидИдентификатора, ИдентификаторПотока, ID, Класс",
		Ключ, МетаданныеПолноеИмя, ВидИдентификатора, ИдентификаторПотока, ID, Класс
	);
	
	Если Таблица.НайтиСтроки(сткОтбор).Количество() = 0 Тогда 
		НС = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НС, сткОтбор);
		НС.Ссылка = Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает в ЖР предупреждения о ненайденных объектах
// Параметры:
//	ТаблицаНенайденных				- ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов.
//  ИдентификаторСообщения			- УникальныйИдентификатор - идентификатор входящего сообщения.
//  
Процедура ЗаписатьНенайденныеОбъектыВЖР(ТаблицаНенайденных, ИдентификаторСообщения, 
									Событие = "Datareon. Обработка сообщения", 
									Уровень = Неопределено) Экспорт
	
	ТекстСообщения = ПолучитьТекстПредупрежденияОНенайденныхОбъектах(ТаблицаНенайденных, ИдентификаторСообщения);
	
	Если ПустаяСтрока(ТекстСообщения) Тогда 
		Возврат;
	КонецЕсли;

	ЗаписьЖурналаРегистрации(
		Событие, 
		?(Уровень = Неопределено, УровеньЖурналаРегистрации.Ошибка, Уровень),,
		ИдентификаторСообщения, 
		ТекстСообщения
	);
	
КонецПроцедуры

Функция ПолучитьТекстПредупрежденияОНенайденныхОбъектах(ТаблицаНенайденных, ИдентификаторСообщения) Экспорт
	
	Если ТаблицаНенайденных.Количество() = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	ТекстСообщения = "Входящее сообщение " + Строка(ИдентификаторСообщения) + ". Не найдены следующие объекты :";
	
	ТекстСообщенияНеизвестные_idflow = "";
	ТаблицаИдентификаторовПотоков = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуИдентификаторыПотоковESB();
	
	Для Каждого Строка Из ТаблицаНенайденных Цикл
		
		ТекстСообщения = ТекстСообщения + "
			|	"+Строка.МетаданныеПолноеИмя +";"+Строка.Ключ+";"+Строка.ВидИдентификатора
				+";"+Строка.ИдентификаторПотока;
				
		ИдентификаторПотока = ""; 		
				
		НайденнаяСтрока = ТаблицаИдентификаторовПотоков.Найти(Строка.ИдентификаторПотока, "Мнемокод");
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Включен Тогда 
			ИдентификаторПотока = НайденнаяСтрока.idflow;
		Иначе
			НайденнаяСтрока = ТаблицаИдентификаторовПотоков.Найти(Строка.ИдентификаторПотока, "idflow");
			Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Включен Тогда 
				ИдентификаторПотока = НайденнаяСтрока.idflow;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено( ИдентификаторПотока ) Тогда
			
			ТекстСообщенияНеизвестные_idflow = ТекстСообщенияНеизвестные_idflow + "
			|	"+Строка.МетаданныеПолноеИмя +";"+Строка.Ключ+";"+Строка.ВидИдентификатора
			+";"+Строка.ИдентификаторПотока;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если Не ТекстСообщенияНеизвестные_idflow = "" Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + ". Не известные idflow дозапросов :" 
		+ Символы.ПС + ТекстСообщенияНеизвестные_idflow;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти 

#Область ОтложенныеДозапросы

// Процедура записывает отложенные дозапросы по таблице не найденных объектов. 
// Параметры:
//	ID                            - Строка    - ИдентификаторОбъекта инициатора дозапроса
//	Класс                           - Строка    - класс инициатора дозапроса
//	МетаданныеПолноеИмя - Строка - полное имя метаданных
//	xdtoОбъект                      - ОбъектXDTO - загружаемый пакет
//	ТаблицаНенайденных				- ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов
//	ПараметрыОбработки				- Структура, параметры обработки пакета
//	ДопПараметры					- Структура, может содержать поле ВидИдентификатора
//		* Дата - Дата - дата загружаемого объекта
//
Процедура ЗаписатьОтложенныеДозапросы( ID, МетаданныеПолноеИмя, Класс, Знач xdtoОбъект,
	ПараметрыОбработки,
	ТаблицаНенайденных = Неопределено,
	ДопПараметры = Неопределено
	) Экспорт
	
	//+++ GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539{
	//РегистрироватьВсеПакеты = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грРегистрироватьВсеПакетыИнтеграции" );
	//--- GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539}
	
	Если Не сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грИспользоватьОтложенныеДоЗапросы" ) 
	//+++ GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539{
	//И ( Не РегистрироватьВсеПакеты И ТаблицаНенайденных = Неопределено ) 
	//--- GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539}
		Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено
		И ДопПараметры.Свойство( "Дата" )
		И ДопПараметры.Дата < сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты( "грНачалоПериодаЗагрузкиБазы" ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура ( "Класс,ID", Класс,ID );
	ТаблицаНенайденныхДляДозапросов = ТаблицаНенайденных.Скопировать( ПараметрыОтбора );
	
	Если 
		//+++ GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539{
		//Не РегистрироватьВсеПакеты И 
		//--- GRADUM, Теплоухов А.В. 2021_05_18 Задача № 21539}
		ТаблицаНенайденныхДляДозапросов.Количество() = 0 Тогда
		
		РегистрыСведений.грИсточникиДозапросов.ОчиститьЗаписиПоИсточникуДозапросов(ID, Класс);
		
		Возврат;
	КонецЕсли;
	
	ТаблицаИдентификаторовПотоков = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуИдентификаторыПотоковESB();
	
	//+++ GRADUM, Теплоухов А.В. 2021_03_31 Задача № 20905{
	ТаблицаТиповПрефиксовКлючей = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуТиповПрефиксовКлючейESB();
	МассивСтрокСОшибками = Новый Массив;
	//--- GRADUM, Теплоухов А.В. 2021_03_31 Задача № 20905}
	
	Для Каждого Строка Из ТаблицаНенайденныхДляДозапросов Цикл 
		
		ДозапросВУНИКУМ = Ложь;
		
		Если ЗначениеЗаполнено(Строка.ИдентификаторПотока) И ТаблицаИдентификаторовПотоков <> Неопределено Тогда 
			
			НайденнаяСтрока = ТаблицаИдентификаторовПотоков.Найти(Строка.ИдентификаторПотока, "Мнемокод");
			Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Включен Тогда 
				Строка.ИдентификаторПотока = НайденнаяСтрока.idflow;
			Иначе
				НайденнаяСтрока = ТаблицаИдентификаторовПотоков.Найти(Строка.ИдентификаторПотока, "idflow");
				Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Включен Тогда 
					Строка.ИдентификаторПотока = НайденнаяСтрока.idflow;
				Иначе
					Строка.ИдентификаторПотока = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайденнаяСтрока <> Неопределено И  СтрНайти(НайденнаяСтрока.ВидКлюча, "УНИКУМ") > 0 Тогда
				 ДозапросВУНИКУМ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДозапросВУНИКУМ Тогда
			
			Отказ = ПроверитьФорматДозапроса(Строка, ТаблицаИдентификаторовПотоков, 
			ТаблицаТиповПрефиксовКлючей );
			
			Если Отказ Тогда
				ШаблонСообщения = НСтр("ru = 'Неверный формат дозапроса. Класс:%1;ID:%2;Ключ:%3;idflow:%4'" );
				Заголовок = "Datareon.Отправка дозапросов";
				ТекстСообщения = СтрШаблон( ШаблонСообщения, Класс, ID, Строка.Ключ, Строка.ИдентификаторПотока );
				сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале( УровеньЖурналаРегистрации.Предупреждение, Заголовок, ТекстСообщения );
				МассивСтрокСОшибками.Добавить(Строка);
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	//+++ GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539{
	Если МассивСтрокСОшибками.Количество() Тогда
		Для Каждого стрМассив Из МассивСтрокСОшибками Цикл
			ТаблицаНенайденныхДляДозапросов.Удалить(стрМассив)
		КонецЦикла;
	КонецЕсли;
	//--- GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539}
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаНенайденных.Класс КАК Класс,
	|	ТаблицаНенайденных.ID КАК ID,
	|	ТаблицаНенайденных.Ключ КАК Ключ,
	|	ТаблицаНенайденных.ИдентификаторПотока КАК ИдентификаторПотока
	|ПОМЕСТИТЬ ВТ_ТаблицаНенайденных
	|ИЗ
	|	&ТаблицаНенайденных КАК ТаблицаНенайденных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНенайденных.Ключ КАК Ключ,
	|	ВТ_ТаблицаНенайденных.ИдентификаторПотока КАК idflow,
	|	&ДатаПакета КАК ДатаПакета,
	|	ВТ_ТаблицаНенайденных.Класс КАК Класс,
	|	ВТ_ТаблицаНенайденных.ID КАК ID
	|ИЗ
	|	ВТ_ТаблицаНенайденных КАК ВТ_ТаблицаНенайденных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грИсточникиДозапросов КАК грИсточникиДозапросов
	|		ПО ВТ_ТаблицаНенайденных.Ключ = грИсточникиДозапросов.Ключ
	|			И ВТ_ТаблицаНенайденных.ИдентификаторПотока = грИсточникиДозапросов.idflow
	|			И ВТ_ТаблицаНенайденных.Класс = грИсточникиДозапросов.Ключ
	|			И ВТ_ТаблицаНенайденных.ID = грИсточникиДозапросов.ID
	|ГДЕ
	//+++ GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539{
	//|	ВЫБОР
	//|			КОГДА &РегистрироватьВсеПакеты
	//|				ТОГДА ВТ_ТаблицаНенайденных.Ключ = """"
	//|							И ВТ_ТаблицаНенайденных.ИдентификаторПотока = """"
	//|						ИЛИ ВТ_ТаблицаНенайденных.ИдентификаторПотока <> """"
	//|			ИНАЧЕ ВТ_ТаблицаНенайденных.ИдентификаторПотока <> """"
	//|		КОНЕЦ
	|	ВТ_ТаблицаНенайденных.ИдентификаторПотока <> """"
	//--- GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539}
	|	И (грИсточникиДозапросов.Ключ ЕСТЬ NULL
	|			ИЛИ грИсточникиДозапросов.ДатаПакета >= &ДатаПакета)
	|	"
	);
	
	//+++ GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539{
	//Запрос.УстановитьПараметр("РегистрироватьВсеПакеты", РегистрироватьВсеПакеты );
	//--- GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539}
	Запрос.УстановитьПараметр("ТаблицаНенайденных", ТаблицаНенайденныхДляДозапросов);
	Запрос.УстановитьПараметр("ДатаПакета", ПараметрыОбработки.ВремяПакета );
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписатьОтложенныйДозапрос( xdtoОбъект, Выборка, ПараметрыОбработки );
		
	КонецЦикла;
	
	//+++ GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539{
	//Если РегистрироватьВсеПакеты И Выборка.Количество() = 0 Тогда
	//	НоваяСтрока = ТаблицаНенайденныхДляДозапросов.Добавить();
	//	ЗаполнитьЗначенияСвойств( НоваяСтрока, ПараметрыОтбора );
	//КонецЕсли;
	//--- GRADUM, Теплоухов А.В. 2021_04_01 Задача № 21539}
	
КонецПроцедуры

// Процедура записывает отложенные дозапросы. 
// Параметры:
//	xdtoОбъект                      - ОбъектXDTO - загружаемый пакет
//	ДанныеДозапроса				    - ВыборкаИзРезультатаЗапроса:
//		*	Ключ - Строка - guid дозапрашиваемого объекта
//		*	idflow - Строка - идентификатор дозапроса
//		*	ДатаПакета - Дата - дата пакета инициирующий дозапрос
//		*	Класс - Строка - класс объекта инициирующий дозапрос
//		*	ID - Строка - guid объекта инициирующий дозапрос
//	ПараметрыОбработки				- Структура - см. ПолучитьПараметрыОбработкиСообщения
//	ДопПараметры					- Структура - дополнительные параметры
//
Процедура ЗаписатьОтложенныйДозапрос( xdtoОбъект, ДанныеДозапроса, ПараметрыОбработки, ДопПараметры = Неопределено)
	
	Запись = РегистрыСведений.грИсточникиДозапросов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств( Запись, ДанныеДозапроса );
	
	//Запись
	xml = сшпОбщегоНазначения.ЗаписатьОбъектВПоток( Перечисления.сшпФорматыСообщений.XML, xdtoОбъект, Неопределено ) ;
	
	//Трансформация
	
	Трансформация = "<?xml version=""1.0"" encoding=""UTF-8""?>
	|<classData xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	|<ВремяПакета>
	|"
	+ XMLСтрока(ПараметрыОбработки.ВремяПакета) +
	"
	|</ВремяПакета>
	|<Список>
	|"
	+ xml +
	"
	|</Список>
	|</classData>";
	
	Трансформация = СтрЗаменить( Трансформация , "<anyType xmlns=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "<classData xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">" );
	Трансформация = СтрЗаменить( Трансформация , " xmlns="""" xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "" );
	Трансформация = СтрЗаменить( Трансформация , "<?xml version=""1.0"" encoding=""UTF-8""?>", "" );
	Трансформация = СтрЗаменить( Трансформация , "</anyType>", "</classData>" );
	
	Запись.ПакетXDTO = Новый ХранилищеЗначения( Трансформация );
	Запись.Source = ПараметрыОбработки.Отправитель;
	Запись.Записать();
	
	МЗ = РегистрыСведений.грОчередьДозапросов.СоздатьМенеджерЗаписи();
	МЗ.Ключ = ДанныеДозапроса.Ключ;
	//МЗ.ДатаОтправки = ТекущаяДатаСеанса();
	МЗ.idflow = ДанныеДозапроса.idflow;
	
	//+++ GRADUM, Теплоухов А.В. 2021_05_19 Задача № 21539{
	МЗ.Прочитать();
	МЗ.Ключ = ДанныеДозапроса.Ключ;
	МЗ.idflow = ДанныеДозапроса.idflow;
	МЗ.Описание		= "";
	МЗ.Ошибка		= Ложь;
	//--- GRADUM, Теплоухов А.В. 2021_05_19 Задача № 21539}
	
	МЗ.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаДозапрсов

Функция ПолучитьСсылкуПоИндентификаторуДозапроса( ИдентификаторПотока, Ключ ) Экспорт 
	
	СсылкаНаОбъект = Неопределено;
	
	ИдентификаторыПотоковESB = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуИдентификаторыПотоковESB();
	
	Отбор = Новый Структура( "idflow", ИдентификаторПотока );
	РезультатПоиска = ИдентификаторыПотоковESB.НайтиСтроки( Отбор );
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат СсылкаНаОбъект;
	Иначе
		
		ИдентификаторПотокаESB = РезультатПоиска[0];
		
		Если Не ИдентификаторПотокаESB.ПоискВТПК Тогда
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени( ИдентификаторПотокаESB.МетаданныеПолноеИмя );
			GUID = Новый УникальныйИдентификатор( Ключ );
			СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку( GUID );
			Если СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
				Возврат Неопределено
			КонецЕсли;
		Иначе
			РезультатПоиска = НайтиСсылкуПоКлючу( Ключ, ИдентификаторПотокаESB.МетаданныеПолноеИмя, , ИдентификаторПотокаESB.ВидКлюча ); //отбор по метаданным
			СсылкаНаОбъект = РезультатПоиска.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
		
КонецФункции

Процедура ОбработатьОтветДоЗапроса( ОбъектСообщение, СсылкаНаОбъект = Неопределено ) Экспорт 
	
	Properties = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой( ОбъектСообщение );
	
	Если Properties.Свойство( "RequestAnswer" ) Тогда
		
		Ключ = Неопределено;
		idflow = Неопределено;
		Error = Ложь;
		Properties.Свойство( "Ключ", Ключ);
		Properties.Свойство( "idflow", idflow);
		
		МенеджерЗаписи = РегистрыСведений.грОчередьДозапросов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ключ = Ключ;
		МенеджерЗаписи.idflow = idflow;
		Properties.Свойство( "Description", МенеджерЗаписи.Описание );
		Properties.Свойство( "Error", МенеджерЗаписи.Ошибка );
		МенеджерЗаписи.Записать();
		
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_РС_грТаблицаПереходныхКлючейERP

// Функция устанавливает уникальный идентификатор объекта
//
// Параметры:
//	СсылкаНаОбъект                  - ЛюбаяСсылка   - Ссылка на объект для записи
//	Ключ                    - Строка        - идентификатора объекта
//	СистемаОбмена          - СправочникСсылка.грСистемыИнтеграционногоКонтура - имя внешней системы
//	УстанавливаемыеРеквизиты - Структура - См ПолучитьПараметрыУстановкиИндентификатораОбъекта:
//    * Версия - Строка,Число - версия идентификатора объекта, необяазательный, необязательный
//    * ДатаОбновления - Дата - дата обновления записи, по умолчанию устанавливается текущая дата сеанса , необязательный
//    * Удален - Булево - признак непостредственного удаления объекта, необязательный
//    * ВидИдентификатораСтрока - Строка - идентификатор описания интеграционного потока дозапросов,
//		 используемые  виды индентификаторов хранится в служебном обработчике Datareon ESB ["ИдентификаторыПотоковESB"], обязательный 
//
// Возвращаемое значение
//	Булево
//
Функция УстановитьКлюч_v2( СсылкаНаОбъект, Ключ, СистемаОбмена, УстанавливаемыеРеквизиты = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.грТаблицаПереходныхКлючейERP.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнешняяСистема		= СистемаОбмена;
	МенеджерЗаписи.ОбъектERP			= СсылкаНаОбъект;	
	МенеджерЗаписи.ИдентификаторОбъекта	= Ключ;
	МенеджерЗаписи.ДатаОбновления		= ТекущаяДатаСеанса();
	
	//+++ GRADUM, Теплоухов А.В. 2021_02_08 Задача № 19871{
	Если УстанавливаемыеРеквизиты <> Неопределено 
		И УстанавливаемыеРеквизиты.Свойство("Версия") Тогда
		УстанавливаемыеРеквизиты.Версия = ПолучитьОтформатированнуюВерсию(УстанавливаемыеРеквизиты.Версия, 
														УстанавливаемыеРеквизиты.ВидИдентификатораСтрока);
	КонецЕсли;
	//--- GRADUM, Теплоухов А.В. 2021_02_08 Задача № 19871}
	
	Если УстанавливаемыеРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, УстанавливаемыеРеквизиты);
	КонецЕсли; 
	
	Попытка
		МенеджерЗаписи.Записать();
		Возврат Истина;
	Исключение
		ЗаписьЖурналаРегистрации("грОбработкаПакетовИнтеграции.УстановитьКлюч", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось записать запись регистра сведений грТаблицаПереходныхКлючейERP, по причине: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Функция ищет объект по ключу ТПК
// Параметры:
//	Ключ - Строка - идентификатор объекта;
//	МетаданныеПолноеИмя - Строка - полное имя метаданных;
//	ВидИдентификатора - Строка - вид идентификатора;
//	ПараметрыОбработкиСообщения - Структура - см. ПолучитьПараметрыОбработкиСообщения.
// Возвращаемое значение: Структура
//	Ссылка - ссылка на найденный объект или Неопределено, если объект не найден;
//	ДатаИзменения - Дата - дата последнего изменения объекта;
//	ИзменениеРазрешено - Булево;
//	Объект - СправочникОбъект, ДокументОбъект или Неопределено, если объект не найден или ИзменениеРазрешено = Ложь.
//
Функция ПолучитьОбъектПоКлючуТПК(Ключ, МетаданныеПолноеИмя, ВидИдентификатора,
									ПараметрыОбработкиСообщения = Неопределено, 
									Версия = Неопределено,
									ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = грОбработкаПакетовИнтеграции.НайтиСсылкуПоКлючу(
		Ключ,
		МетаданныеПолноеИмя,,
		ВидИдентификатора,
		ДополнительныеПараметры);
	
	Ссылка = Результат.Ссылка;
	
	Результат.Вставить("ИзменениеРазрешено", Истина);
	Результат.Вставить("Объект");
	
	//+++ GRADUM, Теплоухов А.В. 2021_10_07 Задача № ERP-1414{
	Результат.Вставить("БлокировкаУстановлена", Ложь);
	//--- GRADUM, Теплоухов А.В. 2021_10_07 Задача № ERP-1414}
	
	//+++ GRADUM, Теплоухов А.В. 2021_02_08 Задача № 19871{
	ВерсияИзПакета = ПолучитьОтформатированнуюВерсию(Версия, ВидИдентификатора);
	//--- GRADUM, Теплоухов А.В. 2021_02_08 Задача № 19871}
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		
		Если ПараметрыОбработкиСообщения <> Неопределено 
			И ПараметрыОбработкиСообщения.Свойство("РежимПерезаписи")
			И ПараметрыОбработкиСообщения.РежимПерезаписи = "НеПерезаписывать" 
				ИЛИ (ПараметрыОбработкиСообщения.РежимПерезаписи = "ПерезаписыватьСтарые"
						И
						(
						(ВерсияИзПакетаПустая(ВерсияИзПакета)
							И ПараметрыОбработкиСообщения.Свойство("ВремяПакета") 
							И Результат.ДатаИзменения > ПараметрыОбработкиСообщения.ВремяПакета)
						ИЛИ 
						(Не ВерсияИзПакетаПустая(ВерсияИзПакета)
							И Результат.Версия > ВерсияИзПакета)
							)
					) Тогда
					
			Результат.ИзменениеРазрешено = Ложь;
			
		Иначе
			
			//+++ GRADUM, Теплоухов А.В. 2021_10_07 Задача № ERP-1414{
			Если ДополнительныеПараметры <> Неопределено
				И ДополнительныеПараметры.Свойство("БлокироватьПоСсылке") 
				И ДополнительныеПараметры.БлокироватьПоСсылке Тогда
				
				БлокировкаУстановлена = Ложь;
				Для СчетчикПопыток = 1 По ПараметрыОбработкиСообщения.КоличествоПопытокБлокировки Цикл
					Попытка
						Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка));
						ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
						Блокировка.Заблокировать();
						
						Результат.БлокировкаУстановлена = Истина;
						Прервать;
					Исключение КонецПопытки;
				КонецЦикла;
				
				Если НЕ Результат.БлокировкаУстановлена Тогда 
					Возврат Результат;
				КонецЕсли;
				
			КонецЕсли;
			//--- GRADUM, Теплоухов А.В. 2021_10_07 Задача № ERP-1414}
			
			Результат.Объект = Ссылка.ПолучитьОбъект();
			
			//+++ GRADUM, Теплоухов А.В. 2021_05_17 Задача № 21503{
			Если ПараметрыОбработкиСообщения.Свойство("МассоваяЗагрузка")
				И Не ПараметрыОбработкиСообщения.МассоваяЗагрузка
				И ОбщегоНазначения.ЭтоДокумент(Ссылка.Метаданные()) 
				И ЗначениеЗаполнено(Результат.Версия) 
				И Результат.Версия <> ПолучитьОтформатированнуюВерсию( 0, "УНИКУМGUID") 
				И Результат.Версия <> ВерсияИзПакета Тогда
				ПараметрыОбработкиСообщения.Вставить("НеРавныВерсииЕРП_Пакета", Истина);
				ПараметрыОбработкиСообщения.Вставить("КлючПакета", Ключ);
			КонецЕсли;
			//--- GRADUM, Теплоухов А.В. 2021_05_17 Задача № 21503}
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция ищет объект по ключу. Если не найден возвращает новую ссылку. 
// Параметры:
//	Ключ                            - Строка    - ИдентификаторОбъекта для поиска объектов
//	МетаданныеПолноеИмя             - Строка    - полное имя метаданных
//	СистемаОбмена                   - СправочникСсылка.грСистемыИнтеграционногоКонтура - имя внешней системы
//	ВидИдентификатора				- Строка    - вид идентификатора
//	ИдентификаторПотока				- Строка	- идентификатор потока дозапроса или его мнемокод
//	ТаблицаНенайденных				- ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов
//	КэшСсылок						- Соответствие - кэш ссылок
//	ДопПараметры					- Структура, может содержать поле ВидИдентификатора
// Возвращаемое значение:
//	ЛюбаяСсылка - результат поиска/создания объекта 
//	В структуре ДопПараметры возвращает флаг ОбъектНайден и дату изменения найденного объекта ДатаИзменения
//
Функция НайтиОбъектПоКлючу(Ключ, МетаданныеПолноеИмя, 
							ВидИдентификатора = "", 
							ИдентификаторПотока = "", 
							ТаблицаНенайденных = Неопределено, 
							КэшСсылок = Неопределено,
							ДопПараметры = Неопределено
							) Экспорт
	
	Если Не ЗначениеЗаполнено(Ключ) Или Ключ = ПустойИдентификатор() Или СтрНайти(Ключ, " 0 ") <> 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// ++Градум Вахрушев А.В. 12.03.2021
	// Если ТипЗнч(КэшСсылок) = Неопределено Тогда 
	Если КэшСсылок = Неопределено Тогда 
	// --Градум Вахрушев А.В. 12.03.2021
		КэшСсылок = Новый Соответствие;
	КонецЕсли;
	
	КлючКэша = МетаданныеПолноеИмя + "." + Ключ;
	
	Ссылка = КэшСсылок[КлючКэша];
	Если Ссылка <> Неопределено Тогда 
		Возврат Ссылка;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если ВидИдентификатора = Неопределено И ДопПараметры.Свойство("ВидИдентификатора") Тогда 
		ВидИдентификатора = ДопПараметры.ВидИдентификатора;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидИдентификатора) Тогда 
		ВызватьИсключение "Не указан вид идентификатора";
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПолноеИмя);
	
	РезультатПоиска = НайтиСсылкуПоКлючу(Ключ, МетаданныеПолноеИмя, , ВидИдентификатора, ДопПараметры);
	Если ЗначениеЗаполнено(РезультатПоиска.Ссылка) Тогда
		ДопПараметры.Вставить("ОбъектНайден", Истина);
	Иначе
		ДопПараметры.Вставить("ОбъектНайден", Ложь);
		РезультатПоиска.Ссылка = МенеджерОбъекта.ПолучитьСсылку();
	КонецЕсли;
	
	ДопПараметры.Вставить("ДатаИзменения", РезультатПоиска.ДатаИзменения);
	
	ID = Неопределено;
	Класс = Неопределено;
	ДопПараметры.Свойство("ID", ID ); // ключ инициатора дозапроса
	ДопПараметры.Свойство("Класс", Класс); // ключ инициатора дозапроса
	
	Если ТаблицаНенайденных <> Неопределено И НЕ ЗначениеЗаполнено(РезультатПоиска.ДатаИзменения) Тогда 
		ЗарегистрироватьНенайденныйОбъект(
			ТаблицаНенайденных, 
			Ключ, 
			МетаданныеПолноеИмя, 
			ВидИдентификатора, 
			ИдентификаторПотока,
			РезультатПоиска.Ссылка,
			ID,
			Класс
		);
	КонецЕсли;
	
	КэшСсылок[КлючКэша] = РезультатПоиска.Ссылка;
				
	Возврат РезультатПоиска.Ссылка;
	
КонецФункции

// Функция ПолучитьИдентификаторОбъектаERP 
//
// Параметры:
//	ОбъектERP - ЛюбаяСсылка - Ссылка для поиска ИдентификаторОбъекта
//  ВидИдентификатораСтрока  - Строка - Вид идентификатора строкой
//  ДополнительныеПараметры - Структура - дополнительные условия поиска идентификатора 
//	 Состав структуры:
//		ТекстУсловия - текст условия на языке запросов
//		Параметры - структура - добавляемы в запрос параметры. Ключ - имя параметра, Значение - Значение параметра
// Возвращаемое значение
//	Структура
//   Состав структуры:
//   ИдентификаторОбъекта - Строка, Неопределено.
//   НеНайденОсновнойПрефикс - Булево - Поиск идентификатора не осуществлялся. Отсутствует основной префикс для поиска
//
Функция ПолучитьИдентификаторОбъектаERP(ОбъектERP, ВидИдентификатораСтрока, ДополительныеПараметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	грТаблицаПереходныхКлючейERP.ОбъектERP КАК ОбъектERP,
	               |	грТаблицаПереходныхКлючейERP.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	               |	грТаблицаПереходныхКлючейERP.Версия КАК Версия
	               |ПОМЕСТИТЬ ВТТаблицаКлючей
	               |ИЗ
	               |	РегистрСведений.грТаблицаПереходныхКлючейERP КАК грТаблицаПереходныхКлючейERP
	               |ГДЕ
	               |	грТаблицаПереходныхКлючейERP.ВидИдентификатораСтрока = &ВидИдентификатораСтрока
	               |	И грТаблицаПереходныхКлючейERP.ОбъектERP = &ОбъектERP
	               |	И НЕ грТаблицаПереходныхКлючейERP.Удален
	               |	И &ОтборПоПрефиксам
	               |	И &ДопОтбор
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИдентификаторОбъекта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТаблицаКлючей.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	               |	МАКСИМУМ(ВТТаблицаКлючей.Версия) КАК Версия
	               |ПОМЕСТИТЬ ВТСрезПоследних
	               |ИЗ
	               |	ВТТаблицаКлючей КАК ВТТаблицаКлючей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТаблицаКлючей.ИдентификаторОбъекта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТаблицаКлючей.ОбъектERP КАК ОбъектERP,
	               |	МАКСИМУМ(ВТТаблицаКлючей.ИдентификаторОбъекта) КАК ИдентификаторОбъекта
	               |ИЗ
	               |	ВТСрезПоследних КАК ВТСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаКлючей КАК ВТТаблицаКлючей
	               |		ПО ВТСрезПоследних.ИдентификаторОбъекта = ВТТаблицаКлючей.ИдентификаторОбъекта
	               |			И ВТСрезПоследних.Версия = ВТТаблицаКлючей.Версия
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТаблицаКлючей.ОбъектERP
	               |";
	
	Если Не ДополительныеПараметры = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопОтбор", ДополительныеПараметры.ТекстУсловия);
		
		Если ДополительныеПараметры.Свойство("Параметры") Тогда
		
			Для каждого КлючЗначение Из ДополительныеПараметры.Параметры Цикл
				Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ТипОбъекта = ОбъектERP.Метаданные().ПолноеИмя();
	
	ТипыПрефиксыКлючейESB = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуТиповПрефиксовКлючейESB();
	
	Если ВидИдентификатораСтрока = "УНИКУМGUID" Тогда
	
		ОсновныеПрефиксыТипа = Новый Массив;
		
		Отбор = Новый Структура("Основной", Истина);
		Для Каждого Строка из ТипыПрефиксыКлючейESB.НайтиСтроки(Отбор) Цикл
			Если СокрЛП(ВРег(Строка.ТипОбъектаЕРП)) = СокрЛП(ВРег(ТипОбъекта)) Тогда
				ОсновныеПрефиксыТипа.Добавить(Строка.Префикс);
			КонецЕсли;	
		КонецЦикла;
		
		МассивОтборов = Новый Массив;
		Для каждого ЗначениеОтбора Из ОсновныеПрефиксыТипа Цикл
			ЭлементОтбора = "грТаблицаПереходныхКлючейERP." + СтрШаблон("ИдентификаторОбъекта ПОДОБНО ""%1%%""", ЗначениеОтбора);
			МассивОтборов.Добавить(ЭлементОтбора);
		КонецЦикла;
		
		Если МассивОтборов.Количество() > 0 Тогда
			ТекстОтбора = "(" + СтрСоединить(МассивОтборов, " ИЛИ ") + ")";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + "ОтборПоПрефиксам", ТекстОтбора);
		Иначе
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ИдентификаторОбъекта", Неопределено);
			СтруктураВозврата.Вставить("НеНайденОсновнойПрефикс", Истина);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ОбъектERP", ОбъектERP);
		Запрос.УстановитьПараметр("ВидИдентификатораСтрока", ВидИдентификатораСтрока);
		Запрос.УстановитьПараметр("ДопОтбор", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ИдентификаторОбъекта", Выборка.ИдентификаторОбъекта);
			СтруктураВозврата.Вставить("НеНайденОсновнойПрефикс", Ложь);
			
			Возврат СтруктураВозврата;
		Иначе
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ИдентификаторОбъекта", Неопределено);
			СтруктураВозврата.Вставить("НеНайденОсновнойПрефикс", Ложь);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И " + "&" + "ОтборПоПрефиксам", "");
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ОбъектERP", ОбъектERP);
		Запрос.УстановитьПараметр("ВидИдентификатораСтрока", ВидИдентификатораСтрока);
		Запрос.УстановитьПараметр("ДопОтбор", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ИдентификаторОбъекта", Выборка.ИдентификаторОбъекта);
			СтруктураВозврата.Вставить("НеНайденОсновнойПрефикс", Ложь);
			
			Возврат СтруктураВозврата;
		Иначе
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ИдентификаторОбъекта", Неопределено);
			СтруктураВозврата.Вставить("НеНайденОсновнойПрефикс", Ложь);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Процедура блокирует ключи элементов
// 
Процедура ЗаблокироватьКлючиЭлементов( ID = Неопределено, ВидИдентификатораСтрока = Неопределено, СистемаИсточник = Неопределено, 
				СсылкаНаОбъект = Неопределено, РежимБлокировки = Неопределено ) Экспорт 
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грТаблицаПереходныхКлючейERP");
	Если ЗначениеЗаполнено( ID ) Тогда
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОбъекта", ID);
	КонецЕсли;
	Если ЗначениеЗаполнено( СистемаИсточник ) Тогда  // планируется исключить 
		ЭлементБлокировки.УстановитьЗначение("ВнешняяСистема", СистемаИсточник);
	КонецЕсли;
	Если ЗначениеЗаполнено( ВидИдентификатораСтрока ) Тогда
		ЭлементБлокировки.УстановитьЗначение("ВидИдентификатораСтрока", ВидИдентификатораСтрока);
	КонецЕсли;
	Если ЗначениеЗаполнено( СсылкаНаОбъект ) Тогда
		 ЭлементБлокировки.УстановитьЗначение("ОбъектERP", СсылкаНаОбъект);
	КонецЕсли;
	Если ЗначениеЗаполнено( РежимБлокировки ) Тогда
		ЭлементБлокировки.Режим = РежимБлокировки;	
	Иначе
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Функция выполняет несколько попыток блокироки ключа в РС грТаблицаПереходныхКлючейERP
// Параметры:
//	Ключ - Строка
//	ВидИдентификатора - Строка
//  КоличествоПопытокБлокировки - Число. По умолчанию 1
//
Функция ЗаблокироватьКлючСПопытками(Ключ, ВидИдентификатора, КоличествоПопытокБлокировки = 1) Экспорт
	
	СчетчикПопыток = 0;
	Пока СчетчикПопыток < КоличествоПопытокБлокировки Цикл
		Попытка
			грОбработкаПакетовИнтеграции.ЗаблокироватьКлючиЭлементов(Ключ,  ВидИдентификатора);
			Возврат Истина;
		Исключение
		КонецПопытки;
		СчетчикПопыток = СчетчикПопыток + 1;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиСсылкуПоКлючу(ID, ПолноеИмяМетаданных = Неопределено, СистемаОбмена = Неопределено, ВидИдентификатораСтрока = Неопределено, ПараметрыОтбора = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозврЗначение = Новый Структура("Ссылка, ДатаИзменения, Версия", Неопределено, Дата(1,1,1), "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	грТаблицаПереходныхКлючейERP.ОбъектERP КАК Ссылка,
	|	&ДополнительныеПоля КАК ДополнительныеПоля,
	|	грТаблицаПереходныхКлючейERP.ДатаОбновления КАК ДатаИзменения,
	|	грТаблицаПереходныхКлючейERP.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК грТаблицаПереходныхКлючейERP
	|ГДЕ
	|	грТаблицаПереходныхКлючейERP.ИдентификаторОбъекта = &ИдентификаторОбъекта
	|	И Не грТаблицаПереходныхКлючейERP.Удален
	|   //%Условия
	|УПОРЯДОЧИТЬ ПО
	|	Версия УБЫВ";
	
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ID);
	
	Условие = "";
	Разделитель = "	И ";
	
	ДополнительныеПоля = "";
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		
		Если ПараметрыОтбора.Свойство("ДополнительныеПоля") 
			И ПараметрыОтбора.ДополнительныеПоля.Количество() > 0 Тогда
			
			МассивПолей = Новый Массив;
			Для каждого Поле Из ПараметрыОтбора.ДополнительныеПоля Цикл
				ВозврЗначение.Вставить(Поле);
				МассивПолей.Добавить(СтрШаблон("грТаблицаПереходныхКлючейERP.%1 КАК %1,", Поле));
			КонецЦикла;
			
			ДополнительныеПоля = СтрСоединить(МассивПолей, Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоля КАК ДополнительныеПоля,", ДополнительныеПоля);
	
	Если ЗначениеЗаполнено(ПолноеИмяМетаданных) ИЛИ ЗначениеЗаполнено(СистемаОбмена) Тогда
		
		Если ЗначениеЗаполнено(ПолноеИмяМетаданных) Тогда
			
			Если ТипЗнч(ПолноеИмяМетаданных) = Тип("Строка") Тогда 
				
				Условие = Условие + Разделитель + "грТаблицаПереходныхКлючейERP.ОбъектERP ССЫЛКА " + ПолноеИмяМетаданных;
				
			ИначеЕсли ТипЗнч(ПолноеИмяМетаданных) = Тип("Массив") Тогда 
				
				Если ПолноеИмяМетаданных.Количество() = 1 Тогда
					Условие = Условие +  Разделитель 
					+ "грТаблицаПереходныхКлючейERP.ОбъектERP ССЫЛКА " + СтрСоединить( ПолноеИмяМетаданных );
				Иначе
					СтрокаУсловия = "(";
					Для Каждого Стр Из ПолноеИмяМетаданных Цикл 
						СтрокаУсловия = СтрокаУсловия + "грТаблицаПереходныхКлючейERP.ОбъектERP ССЫЛКА " + Стр + " Или ";
					КонецЦикла;
					СтрокаУсловия = Сред(СтрокаУсловия, 0, СтрДлина(СтрокаУсловия) - 5) + ")";
					
					Условие = Условие + Разделитель + СтрокаУсловия;
					
				КонецЕсли;
								
			КонецЕсли;

		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидИдентификатораСтрока) Тогда
			Условие = Условие + Разделитель + "грТаблицаПереходныхКлючейERP.ВидИдентификатораСтрока = &ВидИдентификатораСтрока";
			Запрос.УстановитьПараметр("ВидИдентификатораСтрока", ВидИдентификатораСтрока);
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
			
			Если ПараметрыОтбора.Свойство("УсловияДляЗапроса") Тогда 
				Для Каждого УсловиеОтбора Из ПараметрыОтбора.УсловияДляЗапроса Цикл
					Условие = Условие + Разделитель + УсловиеОтбора.Условие;
					Запрос.УстановитьПараметр(УсловиеОтбора.ПараметрИмя, УсловиеОтбора.ПараметрЗначение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "//%Условия", Условие );
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() тогда
		ЗаполнитьЗначенияСвойств(ВозврЗначение, РезультатЗапроса);
	КонецЕсли;	
	
	Возврат ВозврЗначение;
	
КонецФункции

Функция ПолучитьПараметрыУстановкиИндентификатораОбъекта() Экспорт 
	
	ПараметрыКлюча = Новый Структура;
	ПараметрыКлюча.Вставить( "ДатаОбновления" );
	ПараметрыКлюча.Вставить( "Удален" );
	ПараметрыКлюча.Вставить( "Версия" );
	ПараметрыКлюча.Вставить( "ВидИдентификатораСтрока" );
		
	Возврат ПараметрыКлюча;
		
КонецФункции

Функция ПолучитьОтформатированнуюВерсию( Знач Версия, ВидИдентификатора) Экспорт
	
	ВерсияВозврат = "";
	
	Если Версия <> Неопределено Тогда
		Если СтрНайти(ВидИдентификатора, "УНИКУМ") <> Неопределено Тогда
			ВерсияВозврат = Формат(Версия, "ЧЦ=19; ЧН=; ЧВН=; ЧГ=0");
		Иначе
			ВерсияВозврат = Версия;
		КонецЕсли;
	КонецЕсли;

	Возврат ВерсияВозврат;
	
КонецФункции // ПолучитьВерсиюСтрокой()

Функция ВерсияИзПакетаПустая(ВерсияИзПакета)

	Возврат ?(ТипЗнч(ВерсияИзПакета) = Тип("Число"), 
				ВерсияИзПакета = 0,
				ВерсияИзПакета = "" Или ВерсияИзПакета = "0000000000000000000"); 

КонецФункции // ВерсияИзПакетаПустая

// Устарела. См ПолучитьИдентификаторОбъектаERP
//
Функция НайтиКлючПоСсылке( Ссылка, СистемаОбмена = Неопределено,
						ВидИдентификатора = Неопределено, ВидИдентификатораСтрока = Неопределено ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВозврЗначение = Новый Структура("Ключ, ДатаИзменения, Версия", Неопределено, Дата(1,1,1), "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	грТаблицаПереходныхКлючейERP.ИдентификаторОбъекта КАК Ключ,
	|	грТаблицаПереходныхКлючейERP.ДатаОбновления КАК ДатаИзменения,
	|	грТаблицаПереходныхКлючейERP.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК грТаблицаПереходныхКлючейERP
	|ГДЕ
	|	грТаблицаПереходныхКлючейERP.ОбъектERP = &Ссылка
	|	И НЕ грТаблицаПереходныхКлючейERP.Удален";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	Оператор = Схема.ПакетЗапросов[0].Операторы[0];
	Если ЗначениеЗаполнено(СистемаОбмена) Тогда
		Оператор.Отбор.Добавить("грТаблицаПереходныхКлючейERP.ВнешняяСистема = &СистемаОбмена");
		Запрос.УстановитьПараметр("СистемаОбмена", СистемаОбмена);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидИдентификатораСтрока) Тогда
		Оператор.Отбор.Добавить("грТаблицаПереходныхКлючейERP.ВидИдентификатораСтрока = &ВидИдентификатораСтрока");
		Запрос.УстановитьПараметр("ВидИдентификатораСтрока", ВидИдентификатораСтрока);
	КонецЕсли;
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() тогда
		ЗаполнитьЗначенияСвойств( ВозврЗначение, РезультатЗапроса );
	КонецЕсли;	
	
	Возврат ВозврЗначение; 
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщения

#Область ОбработкаСообщения_ЗаполнениеЗначений

// Процедура устанавливает значение свойства объекта XDTO в реквизит объекта, если свойство XDTO существует.
// Параметры:
//  Объект - СправочникОбъект, строка табличной части;
//  ИмяРеквизита - строка - имя реквизита, значение которого надо установить;
//  xdtoОбъект - ОбъектXDTO;
//  ИмяСвойстваXDTO - имя свойства xdtoОбъект;
//
Процедура УстановитьРеквизитПримитивногоТипа(Объект, ИмяРеквизита, xdtoОбъект, ПутьXPath, ТекстОшибки) Экспорт
	Попытка
		Значение = xdtoОбъект.Получить(ПутьXPath);
	Исключение
		Возврат;
	КонецПопытки;
	Попытка
		
		Если ТипЗнч( Объект ) = Тип( "Структура" )  Тогда
			
			ТипРеквизита = ТипЗнч(Объект[ИмяРеквизита]);
			Если Значение = Неопределено ИЛИ ТипРеквизита = Тип("Строка") 
				 ИЛИ ТипРеквизита = Тип("Неопределено") тогда
				Объект[ИмяРеквизита] = Значение;
			ИначеЕсли ТипРеквизита = Тип("Булево") тогда
				Объект[ИмяРеквизита] = Булево(Значение);
			ИначеЕсли ТипРеквизита = Тип("Число") тогда
				Объект[ИмяРеквизита] = Значение;	
			ИначеЕсли ТипРеквизита = Тип("Дата") тогда
				Объект[ИмяРеквизита] = Значение;	
			Иначе 
				Объект[ИмяРеквизита] = XMLЗначение(ТипРеквизита,Значение);
			КонецЕсли;
			
		Иначе
			ТипРеквизита = ТипЗнч(Объект[ИмяРеквизита]);
			Если Значение = Неопределено ИЛИ ТипРеквизита = Тип("Строка") тогда
				Объект[ИмяРеквизита] = Значение;
			ИначеЕсли ТипРеквизита = Тип("Булево") тогда
				//+ Градум, НикифоровАО, 09.04.2020, № 10857 
				Если ТипЗнч(Значение) = Тип("Строка") И (Значение = "0" Или Значение = "1") Тогда
					Объект[ИмяРеквизита] = ?(Значение = "0", Ложь, Истина);
					Возврат
				КонецЕсли;
				//- Градум, НикифоровАО, 09.04.2020, № 10857
				Объект[ИмяРеквизита] = Булево(Значение);	
			Иначе 
				Объект[ИмяРеквизита] = XMLЗначение(ТипРеквизита, Значение);
			КонецЕсли;	
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ТекстОшибки + Символы.ПС + ИмяРеквизита + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

	КонецПопытки;
КонецПроцедуры

// Процедура устанавливает значение перечисления в реквизита объекта из объекта XDTO.
// Параметры:
//  Объект - СправочникОбъект, строка табличной части;
//  ИмяРеквизита - строка - имя реквизита, значение которого надо установить;
//  Менеджер - менеджер перечисления;
//  xdtoОбъект - ОбъектXDTO;
//  ПутьXPath - путь XPath к данным реквизита;
//  ТекстПредупреждения - строка, в которую дописываются предупреждения;
//
Процедура УстановитьРеквизитПеречисление(Объект,ИмяРеквизита,Менеджер,xdtoОбъект,ПутьXPath,ТекстПредупреждения) Экспорт
	
	Значение = ЗначениеРеквизита(xdtoОбъект,ПутьXPath);
	
	Если Значение = Неопределено Тогда 
		Попытка
			Объект[ИмяРеквизита] = Менеджер.ПустаяСсылка();
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗначениеСсылка = Менеджер[Значение];
	Исключение
		ЗначениеСсылка = Менеджер.ПустаяСсылка();
	КонецПопытки;
	
	Попытка
		Объект[ИмяРеквизита] = ЗначениеСсылка;
	Исключение
		ТекстПредупреждения = ТекстПредупреждения + ?(ПустаяСтрока(ТекстПредупреждения),"",Символы.ПС)+
		"Реквизит "+ИмяРеквизита+": "+ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Значение) И НЕ ЗначениеЗаполнено(ЗначениеСсылка) Тогда 
		ТекстПредупреждения = ТекстПредупреждения + ?(ПустаяСтрока(ТекстПредупреждения),"",Символы.ПС)+
		"Реквизит "+ИмяРеквизита+": не найден элемент перечисления """+Строка(Значение)+"""!";
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение ссылочного реквизита объекта из объекта XDTO по guid.
// Параметры:
//  Объект - СправочникОбъект, строка табличной части;
//  ИмяРеквизита - строка - имя реквизита, значение которого надо установить;
//  Менеджер - менеджер справочника или ПВХ;
//  xdtoОбъект - ОбъектXDTO;
//  ПутьXPath - путь XPath к данным ссылочного реквизита;
//  ТекстПредупреждения - строка, в которую дописываются предупреждения;
//
Процедура УстановитьСсылочныйРеквизитПоGUID(Объект, ИмяРеквизита, МетаданныеПолноеИмя, xdtoОбъект, ПутьXPath, ТекстПредупреждения ) Экспорт
	
	Ключ = ЗначениеРеквизита(xdtoОбъект,ПутьXPath);
	
	ТипКлюча = ТипЗнч(Ключ);
	Если Ключ = Неопределено
		ИЛИ ТипКлюча = Тип("ОбъектXDTO") 
		ИЛИ ТипКлюча = Тип("ЗначениеXDTO")
		ИЛИ ( Не ЗначениеЗаполнено(Ключ) Или Ключ = ПустойИдентификатор() ) Тогда 
		Попытка
			Объект[ИмяРеквизита] = Неопределено;
		Исключение 
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Неопределено;
	
	Попытка
		
		СправочникМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени( МетаданныеПолноеИмя );
		GUID = Новый УникальныйИдентификатор( Ключ );
		Выполнить ( "СсылкаНаОбъект = СправочникМенеджер.ПолучитьСсылку( GUID )" );
		Если СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект[ИмяРеквизита] = СсылкаНаОбъект;
				
	Исключение
		ТекстПредупреждения = ТекстПредупреждения + ?(ПустаяСтрока(ТекстПредупреждения),"",Символы.ПС)+
		"Реквизит "+ИмяРеквизита+": "+ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Функция РеквизитЕстьВПакете(xdtoОбъект, ИмяРеквизита, ПроверятьНаЗаполненность = Ложь) Экспорт
	// Начало GRADUM, Буравов А.В. 10.12.2019
	Если xdtoОбъект.Свойства().Получить(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьНаЗаполненность Тогда
		ЗначениеРеквизита = xdtoОбъект.Получить(ИмяРеквизита);
		РеквизитЗаполнен = ЗначениеЗаполнено(ЗначениеРеквизита);
		
		Если РеквизитЗаполнен Тогда
			РеквизитЗаполнен = СокрЛП(ЗначениеРеквизита) <> ПустойИдентификатор();
		КонецЕсли;
		
		Возврат РеквизитЗаполнен;
	Иначе
		Возврат Истина;
	КонецЕсли;
	// Конец GRADUM, Буравов А.В. 10.12.2019
КонецФункции

// Процедура - Заполнить значением если реквизит есть в пакете
//
// Параметры:
//  ЗаполняемыйОбъект	 - ДокументОбъект, СправочникОбъект, СтрокаТаблицыЗначений, СтрокаТабличнойЧасти, Переменная, РеквизитОбъекта	 - Объект в который нужно поместить значение.
// Если это ДокументОбъект, СправочникОбъект, СтрокаТабличнойЧасти, СтрокаТаблицыЗначений, функция заполнит её реквизит указанный в параметре ИмяРеквизита.
// Иначе (если передана Переменная или РеквизитОбъекта) - будет заполнен он.
//  xdtoОбъект			 - 	XDTOОбъект - XDTOОбъект загружаемого пакета. Можно передавать как XDTO загружаемого объекта, так и xdtoСтроку которая по сути также является XDTO объектом.
//  ИмяРеквизита		 - Строка	 - Имя реквизита который нужно найти в загружаемом пакете.
// Также если в параметр ЗаполняемыйОбъект будет передан ДокументОбъект, СправочникОбъект, СтрокаТаблицыЗначений, СтрокаТабличнойЧасти - по ИмяРеквизита будет осуществлена запись в заполняемом объекте.
// Например в параметр ЗаполняемыйОбъект передали объект типа "ДокументОбъект.РеализацияТоваровУслуг" и ИмяРеквизита = "Контрагент". Тогда эта функция заполнит реквизит "Контрагент" у переданного документа.
//  ИмяТипа				 - Строка	 - Имя типа по которому значение поля пакета автоматически преобразуется до указанного типа.
// Можно передавать значения "Строка", "Число", "Булево", "Дата" а также "Перечисление." или "ПеречислениеСсылка." (с именем перечисления, например "Перечисление.ЮрФизЛицо")
//  СокрЛП				 - Булево	 - использовать ли функцию СокрЛП перед остальными преобразованиями полученного значения из пакета
//  ЗначениеЕслиПусто	 - ПроизвольныйТип	 - любое значение которое нужно подставлять если в поле пакета значение пустое.
//
Процедура ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(ЗаполняемыйОбъект, xdtoОбъект, ИмяРеквизита, ИмяТипа = "Строка", СокрЛП = Истина, ЗначениеЕслиПусто = Неопределено) Экспорт
	// Начало GRADUM, Буравов А.В. 18.02.2020
	Если РеквизитЕстьВПакете(xdtoОбъект, ИмяРеквизита, Истина) Тогда
		ЗначениеЗаполнения = ЗначениеРеквизита(xdtoОбъект, ИмяРеквизита, ИмяТипа, СокрЛП, ЗначениеЕслиПусто);
		Если ЗначениеЗаполнения <> Неопределено Тогда
			ЗаполнитьОбъектЗначением(ЗаполняемыйОбъект, ИмяРеквизита, ЗначениеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	// Конец GRADUM, Буравов А.В. 18.02.2020
КонецПроцедуры

// Функция - Значение реквизита
//
// Параметры:
//  xdtoОбъект			 - 	XDTOОбъект - XDTOОбъект загружаемого пакета. Можно передавать как XDTO загружаемого объекта, так и xdtoСтроку которая по сути также является XDTO объектом. 
//  ИмяРеквизита		 - Строка	 - Имя реквизита который нужно найти в загружаемом пакете. 
//  ИмяТипа				 - Строка	 - Имя типа по которому значение поля пакета автоматически преобразуется до указанного типа.
// Можно передавать значения "Строка", "Число", "Булево", "Дата" а также "Перечисление." или "ПеречислениеСсылка." (с именем перечисления, например "Перечисление.ЮрФизЛицо") 
//  СокрЛП				 - Булево	 - использовать ли функцию СокрЛП перед остальными преобразованиями полученного значения из пакета
//  ЗначениеЕслиПусто	 - ПроизвольныйТип	 - любое значение которое нужно подставлять если в поле пакета значение пустое. 
// 
// Возвращаемое значение:
//  Строка, Булево, Число, Дата, ПеречислениеСсылка - преобразованное значение поля пакета
//
Функция ЗначениеРеквизита(xdtoОбъект, ИмяРеквизита, ИмяТипа = "Строка", СокрЛП = Истина, ЗначениеЕслиПусто = Неопределено) Экспорт
	// Начало GRADUM, Буравов А.В. 10.12.2019
	Если Не РеквизитЕстьВПакете(xdtoОбъект, ИмяРеквизита) Тогда
		Возврат ЗначениеЕслиПусто;
	КонецЕсли;
	
	ЗначениеРеквизита = xdtoОбъект.Получить(ИмяРеквизита);
	Если ТипЗнч(ЗначениеРеквизита) <> Тип("Строка") Тогда // если сюда попадет объект XDTO
		РеквизитЗаполнен = Ложь;
	Иначе
		РеквизитЗаполнен = ЗначениеЗаполнено(ЗначениеРеквизита);
	КонецЕсли; 
	
	Если ИмяТипа = "Булево" Или ИмяРеквизита = "Проведен" Или ИмяРеквизита = "ПометкаУдаления" Тогда 
		Если РеквизитЗаполнен Тогда
			// Датареон, Новиков, 22.04.2020 -->
			// ЗначениеРеквизита = XMLЗначение(Тип("Булево"), СокрЛП(ЗначениеРеквизита));
			ЗначениеРеквизита = СокрЛП(ЗначениеРеквизита);
			Если ЗначениеРеквизита = "1" ИЛИ ЗначениеРеквизита = "0" Тогда 
				ЗначениеРеквизита = ЗначениеРеквизита = "1";
			Иначе
				ЗначениеРеквизита = XMLЗначение(Тип("Булево"), ЗначениеРеквизита);
			КонецЕсли;
			// <-- Датареон, Новиков, 22.04.2020
			
		Иначе
			ЗначениеРеквизита = ПустоеЗначение(ЗначениеЕслиПусто, Ложь);
		КонецЕсли; 
		
	ИначеЕсли ИмяТипа = "Строка" Тогда
		Если РеквизитЗаполнен Тогда
			Если СокрЛП Тогда
				ЗначениеРеквизита = СокрЛП(ЗначениеРеквизита);
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = ПустоеЗначение(ЗначениеЕслиПусто, "");
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "Дата" Тогда
		Если РеквизитЗаполнен Тогда
			ЗначениеРеквизита = XMLЗначение(Тип("Дата"), ЗначениеРеквизита);
			
			Если Год(ЗначениеРеквизита) = 1753 Тогда
				ЗначениеРеквизита = Дата(1,1,1);
			КонецЕсли; 
		Иначе
			ЗначениеРеквизита = ПустоеЗначение(ЗначениеЕслиПусто, Дата(1,1,1));
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "Число" Тогда 
		Если РеквизитЗаполнен Тогда
			// Датареон, Новиков, 23.04.2020 -->
			//ЗначениеРеквизита = Число(СокрЛП(ЗначениеРеквизита));
			Попытка
				ЗначениеРеквизита = XMLЗначение(Тип("Число"),СокрЛП(ЗначениеРеквизита));
			Исключение
				ЗначениеРеквизита = Число(СокрЛП(ЗначениеРеквизита));
			КонецПопытки;
			// <-- Датареон, Новиков, 23.04.2020
		Иначе
			ЗначениеРеквизита = ПустоеЗначение(ЗначениеЕслиПусто, 0);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяТипа, "Перечисление.") <> 0 Тогда 
		ИмяПеречисления = Сред(ИмяТипа, 14);
		Перечисление = Перечисления[ИмяПеречисления];
		
		ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, " ", "");
		
		// Начало GRADUM, Буравов А.В. 05.02.2020
		ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.НПП, "");
		ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символ(160), "");
		// Конец GRADUM, Буравов А.В. 05.02.2020
		
		РеквизитЗаполнен = ЗначениеЗаполнено(ЗначениеРеквизита);
		
		Если РеквизитЗаполнен Тогда
			ЗначениеРеквизита = Перечисление[ЗначениеРеквизита];
		Иначе
			ЗначениеРеквизита = ПустоеЗначение(ЗначениеЕслиПусто, Перечисление.ПустаяСсылка());
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяТипа, "ПеречислениеСсылка.") <> 0 Тогда 
		ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, " ", "");
		РеквизитЗаполнен = ЗначениеЗаполнено(ЗначениеРеквизита);
		
		Если РеквизитЗаполнен Тогда
			ЗначениеРеквизита = XMLЗначение(Тип(ИмяТипа), ЗначениеРеквизита);
		Иначе
			ЗначениеРеквизита = ПустоеЗначение(ЗначениеЕслиПусто, Неопределено);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ЗначениеРеквизита;
	// Конец GRADUM, Буравов А.В. 10.12.2019
КонецФункции

Функция ПустойКлюч(Ключ) Экспорт
	
	Результат = Не ЗначениеЗаполнено(Ключ)
				Или Ключ = ПустойИдентификатор()
				Или СтрНайти(Ключ, " 0 ") <> 0;
				
	Возврат Результат;
	
КонецФункции // ПустойКлюч()

Процедура ЗаполнитьОбъектЗначением(ЗаполняемыйОбъект, ИмяРеквизита, ЗначениеЗаполнения);
	// Начало GRADUM, Буравов А.В. 20.02.2020
	ТипЗаполняемогоОбъекта = Строка(ТипЗнч(ЗаполняемыйОбъект));
	ЭтоСтрокаТЧ = СтрНайти(ТипЗаполняемогоОбъекта, "табличная часть строка:") <> 0;
	ЭтоСтрокаТЗ = СтрНайти(ТипЗаполняемогоОбъекта, "Строка таблицы значений") <> 0;
	ЭтоСтруктура = ТипЗаполняемогоОбъекта = "Структура";
	
	ЭтоОбъект = СтрНайти(ТипЗаполняемогоОбъекта, "объект:") <> 0;
	
	Если ЭтоОбъект Или ЭтоСтрокаТЧ Или ЭтоСтрокаТЗ Тогда
		ЗаполняемыйОбъект[ИмяРеквизита] = ЗначениеЗаполнения;
	ИначеЕсли ЭтоСтруктура Тогда 
		Если ЗаполняемыйОбъект.Свойство(ИмяРеквизита) Тогда
			ЗаполняемыйОбъект[ИмяРеквизита] = ЗначениеЗаполнения;
		Иначе
			ЗаполняемыйОбъект.Вставить(ИмяРеквизита, ЗначениеЗаполнения);
		КонецЕсли;
	Иначе
		ЗаполняемыйОбъект = ЗначениеЗаполнения;
	КонецЕсли;
	// Конец GRADUM, Буравов А.В. 20.02.2020
КонецПроцедуры

Функция ПустойИдентификатор()
	Возврат "00000000-0000-0000-0000-000000000000";	
КонецФункции 

Функция ПустоеЗначение(ЗначениеЕслиПусто, ИспользуемоеЗначение)
	
	Если ЗначениеЕслиПусто <> Неопределено Тогда
		Возврат ЗначениеЕслиПусто;
	Иначе
		Возврат ИспользуемоеЗначение;
	КонецЕсли;
	
КонецФункции

Функция ЭкранироватьСтроку(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр, "&", "&amp;");
	Стр = СтрЗаменить(Стр, """", "&quot;");
	Стр = СтрЗаменить(Стр, "<", "&lt;");
	Стр = СтрЗаменить(Стр, ">", "&gt;");
	Стр = СтрЗаменить(Стр, "'", "&apos;");
	Возврат Стр;	
КонецФункции

Функция ПолучитьСсылкуНаОбъектПоОтбору(МенеджерОбъекта, СтруктураОтбора) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	Объект.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	#МенеджерОбъекта КАК Объект
	|{ГДЕ
	|	Объект.Ссылка.*}";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#МенеджерОбъекта", МенеджерОбъекта);
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;	
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	Для Каждого ЭлементСтруктуры из СтруктураОтбора Цикл
		ПостроительОтборы = ПостроительЗапроса.Отбор;
		НовыйОтбор = ПостроительОтборы.Добавить("Ссылка." + ЭлементСтруктуры.Ключ);		
		НовыйОтбор.ВидСравнения	= ВидСравнения.Равно;
		НовыйОтбор.Использование= Истина;
		НовыйОтбор.Значение 	= ЭлементСтруктуры.Значение;
	КонецЦикла;
	
	ПостроительЗапроса.Выполнить();
	Результат = ПостроительЗапроса.Результат;	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
КонецФункции // ПолучитьСсылкуНаОбъектПоОтбору()

#КонецОбласти

#Область Служебные

// Функция возвращает структуру параметров обработки сообщения.
// Параметры:
//	ОбъектСообщение					- ОбъектXDTO - XDTO-объект сообщения.
//	xdtoДокумент					- ОбъектXDTO - XDTO-объект для тела сообщения.
//	ФорматСообщения					- ПеречислениеСсылка.сшпФорматыСообщений - формат сообщения.
// Возвращаемое значение:
//	Структура
//	
Функция ПолучитьПараметрыОбработкиСообщения(ОбъектСообщение, xdtoДокумент = Неопределено, ФорматСообщения = Неопределено) Экспорт
	
	Параметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(ОбъектСообщение);

	// Признак первичной массовой загрузки.
	Если НЕ Параметры.Свойство("МассоваяЗагрузка") Тогда 
		Параметры.Вставить("МассоваяЗагрузка", Ложь);
	КонецЕсли;

	Если НЕ Параметры.Свойство("ЗадержкаПриНеудачнойБлокировке") Тогда 
		Параметры.Вставить("ЗадержкаПриНеудачнойБлокировке", 30);
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЗадержкаПриДозапросе") Тогда 
		Параметры.Вставить("ЗадержкаПриДозапросе", 60);
	КонецЕсли;
	
	//  Если Истина, то выполняется дозапрос ненайденных объектов.
	Если НЕ Параметры.Свойство("ВыполнятьДозапросы") Тогда 
		Параметры.Вставить("ВыполнятьДозапросы",  ( НЕ Параметры.МассоваяЗагрузка И сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("грИспользоватьДоЗапросы") ) );
	КонецЕсли;
	
	//  Если Истина, то вызывается исключения при наличии ненайденных объектов
	Если НЕ Параметры.Свойство("ИспользоватьИсключенияДляНенайденныхОбъектов") Тогда 
		Параметры.Вставить("ИспользоватьИсключенияДляНенайденныхОбъектов", сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("грИспользоватьИсключенияДляНенайденныхОбъектов") );
	КонецЕсли;
	 
	// Количество записей в одной транзакции.
	Если НЕ Параметры.Свойство("РазмерБлока") Тогда 
		Параметры.Вставить("РазмерБлока", ?(Параметры.МассоваяЗагрузка, 100, 0));
	КонецЕсли;
	
	// Номер сеанса при выполнении обработчика.
	Если НЕ Параметры.Свойство("НомерСеанса") Тогда 
		Параметры.Вставить("НомерСеанса", НомерСеансаИнформационнойБазы() );
	КонецЕсли;

	// Количество попыток блокировки.
	Если НЕ Параметры.Свойство("КоличествоПопытокБлокировки") Тогда 
		Параметры.Вставить("КоличествоПопытокБлокировки", ?(Параметры.МассоваяЗагрузка, 10, 1));	
	КонецЕсли;

	//РежимПерезаписи = "Перезаписывать";			// Перезаписываются все найденные записи.
	//РежимПерезаписи = "ПерезаписыватьСтарые";		// Перезаписываются записи с датой обновления меньше свойства ДатаФайла.
	//РежимПерезаписи = "НеПерезаписывать";			// Найденные записи не перезаписываются.
	Если НЕ Параметры.Свойство("РежимПерезаписи") Тогда 
		Параметры.Вставить("РежимПерезаписи", ?(Параметры.МассоваяЗагрузка, "Перезаписывать", "ПерезаписыватьСтарые"));
	КонецЕсли;
	
	// Интервал, после которого сообщение с ненайденными ссылками переходит в ошибку, с.
	Если НЕ Параметры.Свойство("МаксВремяОжидания") Тогда 
		Параметры.Вставить("МаксВремяОжидания", 3600);
	КонецЕсли;

	// Количество попыток обработки, после которого сообщение с ненайденными ссылками переходит в ошибку.
	Если НЕ Параметры.Свойство("МаксКоличествоПопытокОжидания") Тогда 
		Параметры.Вставить("МаксКоличествоПопытокОжидания", 120);
	КонецЕсли;
	
	// Интервал, после истечения которого, надо повторить дозапрос, с.
	Если НЕ Параметры.Свойство("ТаймаутДозапроса") Тогда 
		Параметры.Вставить("ТаймаутДозапроса", 3600);
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Отправитель") Тогда 
		Параметры.Вставить("Отправитель", грОбработкаПакетовИнтеграции.ПолучитьВнешнююСистему(ОбъектСообщение.Source));
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ИспользоватьНумерациюУникум") Тогда 
		Параметры.Вставить("ИспользоватьНумерациюУникум", Истина);
	КонецЕсли;

	Если НЕ Параметры.Свойство("ВремяПакета") Тогда 
		
		Если xdtoДокумент = Неопределено Тогда 
			xdtoДокумент = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, ОбъектСообщение.Body);
		КонецЕсли;
		
		ВремяПакета = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoДокумент,"ВремяПакета","Дата");
		
		Если НЕ ЗначениеЗаполнено(ВремяПакета) Тогда 
			
			ВремяПакета = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(ОбъектСообщение,"CreationTime","Дата");
			
			//+++ GRADUM, Теплоухов А.В. 2021_09_07 Задача № 22213{
			Если ВремяПакета <> Дата(1,1,1) Тогда
				ВремяПакета = МестноеВремя(ВремяПакета, ЧасовойПояс());
			КонецЕсли;
			//--- GRADUM, Теплоухов А.В. 2021_09_07 Задача № 22213}
			
		КонецЕсли;
		
		Параметры.Вставить("ВремяПакета", ВремяПакета);
		
	Иначе
		
		ВремяПакета = XMLЗначение( Тип("Дата"), Параметры.ВремяПакета );
		
		Если НЕ ЗначениеЗаполнено(ВремяПакета) Тогда 
			ВремяПакета = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(ОбъектСообщение,"CreationTime","Дата");
		КонецЕсли;

		Параметры.Вставить("ВремяПакета", ВремяПакета);
		
	КонецЕсли;
	
	Возврат Параметры;
	
	
КонецФункции

// Функция - Получить обработчик
//
// Параметры:
//  ТипОбъекта - Строка - описание имени объекта/класса.
//  Направление - Перечисление.сшпТипыИнтеграции - направление потока данных.
// 
// Возвращаемое значение:
//  Строка - тело обработчика для указанного объекта/класса. 
//
Функция ПолучитьТекстОбработчика(Знач ТипОбъекта , Направление = Неопределено ) Экспорт
	
	НаправлениеПотока = ?( ЗначениеЗаполнено( Направление ), Направление , Перечисления.сшпТипыИнтеграции.Исходящая );
	
	СткОбработчик = Вычислить("сшпКэшируемыеФункции.ПолучитьОбработчик(Типобъекта, НаправлениеПотока, сшпФункциональныеОпции.ВерсияОбработчиков() )");
	Если НЕ СткОбработчик.ОбработчикНайден Тогда 
		ВызватьИсключение "Обработчик "+ТипОбъекта + " не найден или пустой!";
	ИначеЕсли СткОбработчик.Отключен Тогда 
		ВызватьИсключение "Обработчик "+ТипОбъекта+" отключен!";
	КонецЕсли;
	
	Возврат СткОбработчик.ПроцедураОбработки;
	
КонецФункции

Функция КлассОМОбъектаПоПолномуИмени( ПолноеИмя )
	Перем КлассОМ, ИмяОМ;
	
	Результат = Новый Структура( "ЭтоСправочник, ЭтоДокумент", Ложь, Ложь);
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Результат.ЭтоСправочник = Истина;
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Результат.ЭтоДокумент = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает ИмяСобытия для записи в журнал регистрации
// Параметры
//  ПараметрыОбработки				- Структура, Неопределено - Дополнительные параметры
// Возвращаемое значение:
//  Строка - ИмяСобытия для записи в журнал регистрации
Функция ИмяСобытияОбработкиПакета(ПараметрыОбработки = Неопределено) Экспорт // +++ Градум; Кульчихин; 29.06.2021; №B21877
	
	Возврат "Datareon. Обработка сообщения.";
	
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейс_Сборщик

// Функция выполняет код алгоритма.
//
// Параметры:
//  ТипОбъекта - Строка - описание имени объекта/класса.
//  РезультатВыполнения  - Произвольный - результат выполнения алгоритма.
//  Направление - Перечисление.сшпТипыИнтеграции - направление потока данных.
//
// Возвращаемое значение:
//  Строка - строка с описанием ошибки.
//
Функция ВыполнитьКодОбрабочика( ТипОбъекта, РезультатВыполнения = Неопределено, Направление = Неопределено ) Экспорт
	
	Попытка
		КодОбработчика = ПолучитьТекстОбработчика( ТипОбъекта, Направление );
		Выполнить(КодОбработчика);	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение СтрШаблон("Ошибка в коде обработчика '%1': %2" + Символы.ПС + "Подробное описание: %3", 
			ТипОбъекта, КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));	
	КонецПопытки;
		
КонецФункции

#КонецОбласти

//--- Интеграционная библиотека
//======================================================================================================================
#КонецОбласти


#Область УстаревшиеПроцедурыИФункции

Функция СоздатьНовыйОбъект_v2( ПредставлениеОбъекта, ЗаполняемыеРеквизиты ) 
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПредставлениеОбъекта);	
	ИмяДоТочки = ИмяДоТочки(ПредставлениеОбъекта);

	Если ИмяДоТочки = "Справочник" Тогда
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты) Тогда
			Если ЗаполняемыеРеквизиты.Свойство("ЭтоГруппа") И ЗаполняемыеРеквизиты.ЭтоГруппа Тогда
				НовыйОбъект = МенеджерОбъекта.СоздатьГруппу();
			Иначе
				НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
		КонецЕсли;
		
		Если НовыйОбъект.Метаданные().ДлинаКода > 0 
			И ( ЗаполняемыеРеквизиты = Неопределено  
			ИЛИ ( ТипЗнч(ЗаполняемыеРеквизиты) = Тип("Структура") И Не ЗаполняемыеРеквизиты.Свойство("Код") ) ) Тогда
				НовыйОбъект.УстановитьНовыйКод();	
		КонецЕсли;

		//НовыйОбъект.Наименование = " "; // для некоторых справочников запрещается назначать наименование, эта строка вызовет ошибку
	ИначеЕсли ИмяДоТочки = "Документ" Тогда 
		НовыйОбъект = МенеджерОбъекта.СоздатьДокумент();

		Если ЗаполняемыеРеквизиты.Свойство("Дата") Тогда
			ЗаполнитьЗначенияСвойств(НовыйОбъект, ЗаполняемыеРеквизиты, "Дата");
		КонецЕсли; 

		Если Не ЗначениеЗаполнено(НовыйОбъект.Дата) Тогда
			НовыйОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		Если ЗаполняемыеРеквизиты = Неопределено ИЛИ (ТипЗнч(ЗаполняемыеРеквизиты) = Тип("Структура") И Не ЗаполняемыеРеквизиты.Свойство("Номер")) Тогда
			НовыйОбъект.УстановитьНовыйНомер();	
		КонецЕсли;

	ИначеЕсли ИмяДоТочки = "ПланВидовХарактеристик" Тогда
		НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
	Иначе
		Возврат Неопределено; // дописать в случае необходимости создание объектов других типов
	КонецЕсли;

	Если ТипЗнч(ЗаполняемыеРеквизиты) = Тип("Структура") И ЗаполняемыеРеквизиты.Свойство("ЭтоГруппа") Тогда
		ЗаполняемыеРеквизиты.Удалить("ЭтоГруппа");
	КонецЕсли;

	Если ЗаполняемыеРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовыйОбъект, ЗаполняемыеРеквизиты);
	КонецЕсли;

	НовыйОбъект.ОбменДанными.Загрузка = Истина;
	НовыйОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать");
	
	НовыйОбъект.Записать();
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция СтрокаСпискаДокументов_ОбработкаПроведения() Экспорт

	СтрокаСписка = Новый Структура;
	СтрокаСписка.Вставить("Ссылка"				, Неопределено);
	СтрокаСписка.Вставить("грПроведенВременная"	, Ложь);
	СтрокаСписка.Вставить("Проведен"			, Ложь);
	СтрокаСписка.Вставить("ПометкаУдаления"		, Ложь);
	
	Возврат СтрокаСписка;
	
КонецФункции // СтрокаСпискаДокументов_ОбработкаПроведения()

Процедура ЗаполнитьСписокДокументов_ОбрабоктаПроведения(ДокументКПроведению, МассивДокументов, ДополнительныеПараметры = Неопределено) Экспорт

	СтрокаСпискаДокументов = СтрокаСпискаДокументов_ОбработкаПроведения();
	ЗаполнитьЗначенияСвойств(СтрокаСпискаДокументов, ДокументКПроведению, "Ссылка, грПроведенВременная, Проведен");
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ПометкаУдаления") Тогда
			СтрокаСпискаДокументов.ПометкаУдаления = ДополнительныеПараметры.ПометкаУдаления;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивДокументов.Добавить(СтрокаСпискаДокументов);

КонецПроцедуры

Функция ПолучитьДанныеИзОчередиДозапросов( Ключ, idflow )
	
	РезультатОтправки = Новый Структура( "Отправлен, ДатаОтправки", Ложь, Дата("00010101") );
	
	НаборЗаписей = РегистрыСведений.грОчередьДозапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить( Ключ );
	НаборЗаписей.Отбор.idflow.Установить( idflow );
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		
		РезультатОтправки.Отправлен = Истина;
		РезультатОтправки.ДатаОтправки = НаборЗаписей[0].ДатаОтправки;
				
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ОчиститьЗаписьОчередиДозапросов( Ключ, idflow )
	
	НаборЗаписей = РегистрыСведений.грОчередьДозапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить( Ключ );
	НаборЗаписей.Отбор.idflow.Установить( idflow );
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаблокироватьОчередьДоЗапросов( Ключ, idflow = Неопределено, РежимБлокировки = Неопределено ) Экспорт 
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грОчередьДозапросов");
	ЭлементБлокировки.УстановитьЗначение("Ключ", Ключ);
	Если ЗначениеЗаполнено( idflow ) Тогда
		ЭлементБлокировки.УстановитьЗначение("idflow", idflow);
	КонецЕсли;
	Если ЗначениеЗаполнено( РежимБлокировки ) Тогда
		ЭлементБлокировки.Режим = РежимБлокировки;	
	Иначе
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаполнитьДопПараметрыУстановкиСсылочногоРеквизита(ДопПараметры = Неопределено, 
														    ИмяРеквизита = "", 
														    МетаданныеПолноеИмя = "", 
														    ПутьXPath = "", 
														    idflow = Неопределено,
														    ЭтоГруппа = Неопределено) Экспорт
														  
  	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = ПолучитьДопПараметрыУстановкиСсылочногоРеквизита();
	КонецЕсли;
	
	ПараметрыIdflow = ПолучитьПараметрыIdflowПоПолномуИмени( МетаданныеПолноеИмя );
	Если idflow = Неопределено Тогда 
		idflow = ПараметрыIdflow.idflow;
	КонецЕсли;
	Если ДопПараметры.ВидИдентификатора = Неопределено Тогда 
		ДопПараметры.ВидИдентификатора = ПараметрыIdflow.ВидИдентификатора;
	КонецЕсли;
	
	ДопПараметры.ИмяРеквизита 		 = ИмяРеквизита;
	ДопПараметры.МетаданныеПолноеИмя = МетаданныеПолноеИмя;
	ДопПараметры.ПутьXPath 			 = ПутьXPath;
	
	Если ДопПараметры.ИспользоватьДозапрос Тогда
		ДопПараметры.ДоЗапрос.idflow 	 = idflow;
	КонецЕсли;
	
	Если Не ЭтоГруппа = Неопределено Тогда 
		ЗаполняемыеРеквизиты = Новый Структура("ЭтоГруппа", ЭтоГруппа);
		ДопПараметры.ЗаполняемыеРеквизиты = ЗаполняемыеРеквизиты ;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыIdflowПоПолномуИмени( МетаданныеПолноеИмя ) Экспорт 
	
	ПараметрыIdflow = Новый Структура( "idflow, ВидКлюча" );
	
	ИдентификаторыПотоковESB = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуИдентификаторыПотоковESB();
	
	Отбор = Новый Структура( "МетаданныеПолноеИмя", МетаданныеПолноеИмя );
	РезультатПоиска = ИдентификаторыПотоковESB.НайтиСтроки( Отбор );
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат ПараметрыIdflow;
	Иначе
		ЗаполнитьЗначенияСвойств( ПараметрыIdflow, РезультатПоиска[0] );
	КонецЕсли;
	
	Возврат ПараметрыIdflow;
	
КонецФункции

Функция ПолучитьПараметрыДоЗапроса( idflow = "", Timeout = 0 ) Экспорт 
	
	ПараметрыДоЗапроса = Новый Структура;
	ПараметрыДоЗапроса.Вставить( "idflow", "" );
	ПараметрыДоЗапроса.Вставить( "Timeout", ?( Timeout = 0, 500, Timeout ) ); // устарел 
	ПараметрыДоЗапроса.Вставить( "ВлючитьЛогирование", Ложь ); // устарел
	ПараметрыДоЗапроса.Вставить( "ВключитьЛогирование", Константы.грВключитьЛогированиеДозапросов.Получить() );  // устарел

	//Адаптация нового функционала дозапроса
	ПараметрыДоЗапроса.Вставить( "КешСсылок", Новый Соответствие ); 
	ПараметрыДоЗапроса.Вставить( "НенайденныеОбъекты", грОбработкаПакетовИнтеграции.СоздатьТаблицуНенайденныхОбъектов() ); 
	ПараметрыДоЗапроса.Вставить( "ВыполнятьДозапросы",  грОбработкаПакетовИнтеграцииПовтИсп.ИспользуютсяДоЗапросы() );
	ПараметрыДоЗапроса.Вставить( "ЗадержкаПриДозапросе",  грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьЗадержкуСообщенияESB() );
	
	Возврат ПараметрыДоЗапроса;
	
КонецФункции

// Устарела. См НайтиОбъектПоКлючу. Функция ищет объект по ключу. Если не найден блокирует ключ ищет снова. 
// Если не найден, создаёт и назначает ключ.
// Параметры:
//	Ключ                            - Строка    - ИдентификаторОбъекта для поиска объектов
//	МетаданныеПолноеИмя             - Строка    - полное имя метаданных
//	СистемаОбмена                   - СправочникСсылка.грСистемыИнтеграционногоКонтура - имя внешней системы
//	ВидИдентификатора				- Строка    - вид идентификатора
//	ИдентификаторПотока				- Строка	- идентификатор потока дозапроса
//	ТаблицаНенайденных				- ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов
//	ЗаполняемыеРеквизиты			- Структура
//	КоличествоПопытокБлокировки		- Число		- количество попыток блокировки
//
// Возвращаемое значение:
//	ЛюбаяСсылка - результат поиска/создания объекта 
//
Функция НайтиСоздатьОбъектПоКлючу(Ключ, МетаданныеПолноеИмя, ВнешняяСистема, ВидИдентификатора, 
									ИдентификаторПотока = "",
									ТаблицаНенайденных = Неопределено, ЗаполняемыеРеквизиты = Неопределено,
									КоличествоПопытокБлокировки = 0, КэшСсылок = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ключ) Или Ключ = ПустойИдентификатор() Или СтрНайти(Ключ, " 0 ") <> 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	// Датареон, Новиков, 30.04.2020 -->	
	Если ТипЗнч(КэшСсылок) = Тип("Соответствие") Тогда 
		КлючКэша = МетаданныеПолноеИмя + "." + Ключ;
		Ссылка = КэшСсылок[КлючКэша];
		Если Ссылка <> Неопределено Тогда 
			Возврат Ссылка;
		КонецЕсли;
	КонецЕсли;
	// <-- Датареон, Новиков, 30.04.2020
	
	РезультатПоиска = НайтиСсылкуПоКлючу(Ключ, МетаданныеПолноеИмя, ВнешняяСистема, ВидИдентификатора);
	Если Не ЗначениеЗаполнено(РезультатПоиска.Ссылка) Тогда
		
		БлокировкаУстановлена = Ложь;
		Для СчетчикПопыток = 1 По КоличествоПопытокБлокировки Цикл
			Попытка
				ЗаблокироватьКлючиЭлементов(Ключ, ВидИдентификатора, ВнешняяСистема);
				БлокировкаУстановлена = Истина;
				Прервать;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если НЕ БлокировкаУстановлена Тогда 
			ВызватьИсключение "Ошибка блокировки";
		КонецЕсли;
		
		РезультатПоиска = НайтиСсылкуПоКлючу(Ключ, МетаданныеПолноеИмя, ВнешняяСистема, ВидИдентификатора);
		
		Если Не ЗначениеЗаполнено(РезультатПоиска.Ссылка) Тогда
			Если ЗаполняемыеРеквизиты = Неопределено Тогда 
				ЗаполняемыеРеквизиты = Новый Структура;
			КонецЕсли;
			
			Если (Найти(МетаданныеПолноеИмя,"Справочник.") > 0
				ИЛИ Найти(МетаданныеПолноеИмя,"ПланВидовХарактеристик.") > 0)
				И НЕ ЗаполняемыеРеквизиты.Свойство("Наименование") Тогда 
				
				ЗаполняемыеРеквизиты.Вставить("Наименование", "Дозапрос "+ИдентификаторПотока);
				
			КонецЕсли;
			
			РезультатПоиска.Ссылка = СоздатьНовыйОбъект_v2(МетаданныеПолноеИмя, ЗаполняемыеРеквизиты);
			РезультатПоиска.ДатаИзменения = Дата(1,1,1);
			
			ЗаполняемыеРеквизиты.Вставить("ВидИдентификатораСтрока",ВидИдентификатора);
			ЗаполняемыеРеквизиты.Вставить("ДатаОбновления", Дата(1,1,1));
			
			УстановитьКлюч_v2(РезультатПоиска.Ссылка, Ключ, ВнешняяСистема, ЗаполняемыеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаНенайденных <> Неопределено И НЕ ЗначениеЗаполнено(РезультатПоиска.ДатаИзменения) Тогда 
		ЗарегистрироватьНенайденныйОбъект(
			ТаблицаНенайденных, 
			Ключ, 
			МетаданныеПолноеИмя, 
			ВидИдентификатора, 
			ИдентификаторПотока,
			РезультатПоиска.Ссылка
		);
	КонецЕсли;
	
	
	// Датареон, Новиков, 30.04.2020 -->	
	Если ТипЗнч(КэшСсылок) = Тип("Соответствие") Тогда 
		КэшСсылок[КлючКэша] = РезультатПоиска.Ссылка;
	КонецЕсли;
	// <-- Датареон, Новиков, 30.04.2020
				
	Возврат РезультатПоиска.Ссылка;
	
КонецФункции

// Устарела. Функция возвращает минимальную дату дозапроса для ненайденных объектов.
// Может использоваться для определения тайм-аута.
// Параметры:
//	ТаблицаНенайденных - ТаблицаЗначений - см. СоздатьТаблицуНенайденныхОбъектов
// Возвращаемое значение:
//	Дата - минимальная дата дозапроса.
//
Функция ПолучитьМинимальнуюДатуДозапросов(ТаблицаНенайденных) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаНенайденных.Ключ КАК Ключ,
		|	ТаблицаНенайденных.ИдентификаторПотока КАК ИдентификаторПотока,
		|	ТаблицаНенайденных.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ТаблицаНенайденных
		|ИЗ
		|	&ТаблицаНенайденных КАК ТаблицаНенайденных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(грОчередьДозапросов.ДатаОтправки), ДАТАВРЕМЯ(3999, 1, 1)) КАК ДатаОтправки
		|ИЗ
		|	ВТ_ТаблицаНенайденных КАК ВТ_ТаблицаНенайденных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грОчередьДозапросов КАК грОчередьДозапросов
		|		ПО ВТ_ТаблицаНенайденных.Ключ = грОчередьДозапросов.Ключ
		|			И ВТ_ТаблицаНенайденных.ИдентификаторПотока = грОчередьДозапросов.idflow
		|			И ВТ_ТаблицаНенайденных.Ссылка = грОчередьДозапросов.СсылкаНаОбъект"
	);
	Запрос.УстановитьПараметр("ТаблицаНенайденных", ТаблицаНенайденных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ДатаОтправки;
	КонецЕсли;
	
	Возврат Дата(3999,1,1);
	
КонецФункции

// Устарела. СМ НайтиСсылкуПоКлючу.
// Функция получить объект по ключу
//
// Параметры:
//	Ключ                            - Строка    - ИдентификаторОбъекта для поиска объектов
//	Отправитель                     - СправочникСсылка.грСистемыИнтеграционногоКонтура - имя внешней системы
//	ОтборПоТипуОбъекта              - Строка    - например "Справочник.Организации"
//
// Возвращаемое значение
//	СсылкаНаОбъект, Неопределено - результат поиска объекта, может возвращать неопределено, если запись не найдена или был указан пустой ключ 
//
Функция ПолучитьОбъектПоКлючу_V2( Ключ, СистемаОбмена = Неопределено, МетаданныеПолноеИмя = "", 
		 ВидИдентификатора = Неопределено, СоздаватьОбъект = Ложь, ЗаполняемыеРеквизиты = Неопределено, ПараметрыОтбора = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ключ) Или Ключ = ПустойИдентификатор() Или СтрНайти(Ключ, " 0 ") <> 0 Тогда
		Возврат Новый Структура("Ссылка, ДатаИзменения", Неопределено, Дата(1,1,1));
	КонецЕсли; 
		
	РезультатПоиска = НайтиСсылкуПоКлючу( Ключ, МетаданныеПолноеИмя, СистемаОбмена, ВидИдентификатора, ПараметрыОтбора ); 
				
	Возврат РезультатПоиска;
	
КонецФункции

Функция ПолучитьДопПараметрыУстановкиСсылочногоРеквизита() Экспорт 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "ВидИдентификатора" );
	ДопПараметры.Вставить( "СистемаОбмена" );
	ДопПараметры.Вставить( "ИмяРеквизита" );
	ДопПараметры.Вставить( "МетаданныеПолноеИмя" );
	ДопПараметры.Вставить( "xdtoОбъект" );
	ДопПараметры.Вставить( "ПутьXPath" );
	ДопПараметры.Вставить( "ЗаполняемыеРеквизиты" );
	ДопПараметры.Вставить( "ИспользоватьДозапрос", Ложь );
	ДопПараметры.Вставить( "ДоЗапрос" );  //Передаются параметры дозапроса
	ДопПараметры.Вставить( "ПараметрыОтбора" ); // Проверяется наличие в УстановитьСсылочныйРеквизитПоID
	
	Возврат ДопПараметры;
	
КонецФункции

// Процедура устанавливает значение ссылочного реквизита объекта из объекта XDTO по id.
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект, строка табличной части;
//  ДопПараметры  - Структура - содержит:
//     * Ключ       		 - Строка
//     * МетаданныеПолноеИмя - Строка, например: Справочник.Организации
//     * ИмяРеквизита - строка - имя реквизита, значение которого надо установить;
//     * xdtoОбъект - ОбъектXDTO;
//     * ПутьXPath - путь XPath к данным ссылочного реквизита;
//	   * ВидИдентификатора - Строка,
//	   * СистемаОбмена - грСистемыИнтеграционногоКонтура
//	СостояниеСообщения - состояние сообщения esb 
//  ТекстПредупреждения - строка, в которую дописываются предупреждения;
//
Процедура УстановитьСсылочныйРеквизитПоID(Объект, ДопПараметры, 
			ТекстПредупреждения,  СостояниеСообщения = Неопределено ) Экспорт
			
	//ДоЗапрос+
	ТекстОшибкиДозапрос = "";
	ИспользуетсяДозапрос = (  грОбработкаПакетовИнтеграцииПовтИсп.ИспользуютсяДоЗапросы() И ( ( ТипЗнч( ДопПараметры.ДоЗапрос ) = Тип("Структура") )
					ИЛИ ( ДопПараметры.Свойство("ИспользоватьДозапрос") И  ДопПараметры.ИспользоватьДозапрос ) ) );
	ПараметрыДоЗапроса = ДопПараметры.ДоЗапрос;
	СлужебныйРежимДозапросов = грОбработкаПакетовИнтеграцииПовтИсп.СервисныйРежимРаботыДозапросовESB();
	//ДоЗапрос-

	Если ДопПараметры.Свойство("Ключ") Тогда
		Ключ = ДопПараметры.Ключ;
	Иначе 
		Ключ = ЗначениеРеквизита(ДопПараметры.xdtoОбъект,ДопПараметры.ПутьXPath, , Ложь );
	КонецЕсли;
	
	ТипКлюча = ТипЗнч(Ключ);
	Если Ключ = Неопределено
		ИЛИ ТипКлюча = Тип("ОбъектXDTO") 
		ИЛИ ТипКлюча = Тип("ЗначениеXDTO")
		ИЛИ Не ЗначениеЗаполнено(Ключ) 
		ИЛИ Ключ = ПустойИдентификатор() Тогда 
		Попытка
			Объект[ДопПараметры.ИмяРеквизита] = Неопределено;
		Исключение 
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	ВидИдентификатора = "";
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство( "ВидИдентификатора", ВидИдентификатора );
	КонецЕсли;
	
		
	Попытка
		
		Если ИспользуетсяДозапрос 
			И ИдентификаторПотокаИспользуется( ПараметрыДоЗапроса.idflow, Ключ, ТекстОшибкиДозапрос ) Тогда
			
			Объект[ДопПараметры.ИмяРеквизита] = НайтиОбъектПоКлючу( Ключ, ДопПараметры.МетаданныеПолноеИмя, ВидИдентификатора, ПараметрыДоЗапроса.idflow,
				ПараметрыДоЗапроса.НенайденныеОбъекты, ПараметрыДоЗапроса.КешСсылок, ДопПараметры.ПараметрыОтбора );
				
		Иначе
			РезультатПоиска = НайтиСсылкуПоКлючу(Ключ, ДопПараметры.МетаданныеПолноеИмя, ДопПараметры.СистемаОбмена,
				ВидИдентификатора, ДопПараметры.ПараметрыОтбора);
			Объект[ДопПараметры.ИмяРеквизита] = РезультатПоиска.Ссылка
		КонецЕсли;
		
		
	Исключение
		ТекстПредупреждения = ТекстПредупреждения + ?(ПустаяСтрока(ТекстПредупреждения),"",Символы.ПС)+
		"Реквизит "+ДопПараметры.ИмяРеквизита+": "+ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	Если ДопПараметры.Свойство("Ключ") Тогда
		ДопПараметры.Удалить( "Ключ" );
	КонецЕсли;
	
	Если ИспользуетсяДозапрос  И ЗначениеЗаполнено( ТекстОшибкиДозапрос ) Тогда //добавлена совместимость по логированию
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Предупреждение, "Datareon. Формирование дозапросов", ТекстОшибкиДозапрос ); 
	КонецЕсли;

	
КонецПроцедуры

Функция ИдентификаторПотокаИспользуется( idflow, Ключ, ТекстОшибки = "" ) Экспорт 
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	ИдентификаторыПотоковESB = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуИдентификаторыПотоковESB();
	
	Отбор = Новый Структура( "idflow", idflow );
	РезультатПоиска = ИдентификаторыПотоковESB.НайтиСтроки( Отбор );
	Если РезультатПоиска.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Дозапрос невыполнен. Отсутствует идентификатор потока ESB: %1. Необходимо его заполнить в одноименном РС.'"), idflow );
	Иначе
		ОписаниеПотокаESB = РезультатПоиска[0];
		Если Не ОписаниеПотокаESB.Включен Тогда
			Отказ = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Дозапрос невыполнен. Идентификатор потока ESB %1 Ключ %2, отключен.'"), idflow, Ключ);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Не Отказ;
	
КонецФункции

Процедура СфомироватьДоЗапрос( ДопПараметры, РеквизитОбъекта, СостояниеСообщения )
	
	СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени( ДопПараметры.МетаданныеПолноеИмя ).ПолучитьСсылку();
	РеквизитОбъекта = СсылкаНаОбъект;
	
	ПоместитьВОчередьИсходящихДозапрос( ДопПараметры.Ключ, ДопПараметры.ДоЗапрос.idflow );
	
КонецПроцедуры

#Область ОбработкаПакетов

// Процедура фиксирует отмену обработки
//
Процедура ЗафиксироватьОтменуОбработки ( ТекстОшибки, СостояниеСообщения, ИмяДокумента, ОтменитьТранзакцию, СтатусСообщения) Экспорт 
	
	СостояниеСообщения = СтатусСообщения;
	ЗаписьЖурналаРегистрации(
	"ESB. Выполнение обработчиков. " + ИмяДокумента,
	УровеньЖурналаРегистрации.Предупреждение, 
	Неопределено,
	Неопределено,
	ТекстОшибки
	);
	
	ОтменитьТранзакцию = Истина;
	
КонецПроцедуры	

Функция ОпределитьТаймаутСообщения( КоличествоПопытокОжидания, ДатаРегистрации, ДопПараметры = Неопределено) Экспорт 
	
	МаксКоличествоПопытокОжидания = 5;
	МаксВремяОжидания = 86400;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		
		Если ДопПараметры.Свойство( "МаксКоличествоПопытокОжидания") Тогда
			МаксКоличествоПопытокОжидания = ДопПараметры.МаксКоличествоПопытокОжидания;
		КонецЕсли;
		
		Если ДопПараметры.Свойство( "МаксВремяОжидания") Тогда
			МаксВремяОжидания = ДопПараметры.МаксВремяОжидания;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоличествоПопытокОжидания > МаксКоличествоПопытокОжидания
			И ( ТекущаяДатаСеанса() - ДатаРегистрации > МаксВремяОжидания );
		
КонецФункции

// Функция определяет возможность продолжение обработки пакета.
//  Если пришли устаревшие данные, то обработка отменяется.
Функция  ПродолжитьЗагрузкуПакета( РезультатПоиска, ОтменитьТранзакцию, СостояниеСообщения, ДатаПакета, ТекстОшибки = "" ) Экспорт 
	
	Если РезультатПоиска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатПоиска.ДатаИзменения > ДатаПакета тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + "Обработка отменена. Дата сообщения, меньше даты ключа объекта.";
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		ОтменитьТранзакцию = Истина;	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПродолжитьЗагрузкуПакета_v2( РезультатПоиска, СостояниеСообщения, ДатаПакета ) Экспорт 
	
	Если РезультатПоиска = Неопределено Тогда
		ВызватьИсключение "Результат поиска не определен";
	КонецЕсли;
	
	Если РезультатПоиска.ДатаИзменения > ДатаПакета тогда
		ТекстОшибки = "Обработка отменена. Дата сообщения, меньше даты ключа объекта.";
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область ИнтеграционныйКонтекстЕРП

Процедура УстановитьКлючУзлуСКС_ПоБизнесПартнеру(УзелСКС, БизнесПартнер) Экспорт

	Если Не ЗначениеЗаполнено(БизнесПартнер) 
		Или (ЗначениеЗаполнено(БизнесПартнер) 
			И Не ОбщегоНазначения.СсылкаСуществует(БизнесПартнер)) Тогда
		Возврат;
	КонецЕсли;

	// +++ Градум; Кульчихин; 25.06.2021; №B21855
	// Метод РС грТаблицаПереходныхКлючейERP Прочитать заменен на запрос
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	грТаблицаПереходныхКлючейERP.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	               |	грТаблицаПереходныхКлючейERP.ВнешняяСистема КАК ВнешняяСистема,
	               |	грТаблицаПереходныхКлючейERP.ВидИдентификатораСтрока КАК ВидИдентификатораСтрока,
	               |	грТаблицаПереходныхКлючейERP.Версия КАК Версия,
	               |	грТаблицаПереходныхКлючейERP.ДатаОбновления КАК ДатаОбновления
	               |ИЗ
	               |	РегистрСведений.грТаблицаПереходныхКлючейERP КАК грТаблицаПереходныхКлючейERP
	               |ГДЕ
	               |	грТаблицаПереходныхКлючейERP.ОбъектERP = &БизнесПартнер";
	Запрос.УстановитьПараметр("БизнесПартнер", БизнесПартнер);
	ЗаписиТПК_БП = Запрос.Выполнить().Выгрузить();
	// --- Градум; Кульчихин; 25.06.2021; №B21855
	
	Для Каждого Запись Из ЗаписиТПК_БП Цикл
		
		УстановитьКлюч_v2(УзелСКС, Запись.ИдентификаторОбъекта, Запись.ВнешняяСистема, 
			Новый Структура("ВидИдентификатораСтрока, Версия, ДатаОбновления", 
							Запись.ВидИдентификатораСтрока, Запись.Версия, Запись.ДатаОбновления));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПостоянноМеняющиесяПроцедурыУстаревшние

Функция КлассПоПредставлениюТипа(ПредставлениеТипа) Экспорт
	// Начало GRADUM, Буравов А.В. 31.01.2020
	// При отсутствии обработчика класса в Datareon указывайте Неопределено
	// При появлении обработчика класса в Datareon прописывайте его ниже
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Документ.ЗаказКлиента", 343);
	Соответствие.Вставить("Документ.ЗаказПоставщику", 101);
	Соответствие.Вставить("Документ.ПересчетТоваров", 307);
	Соответствие.Вставить("Документ.ПриобретениеТоваровУслуг", 211);
	Соответствие.Вставить("Справочник.БанковскиеСчетаКонтрагентов", 225);
	Соответствие.Вставить("Справочник.БанковскиеСчетаОрганизаций", Неопределено);
	Соответствие.Вставить("Справочник.Валюты", 227);
	Соответствие.Вставить("Справочник.ВидыЦен", Неопределено);
	Соответствие.Вставить("Справочник.ВидыАлкогольнойПродукции", 291);
	Соответствие.Вставить("Справочник.ДоговорыКонтрагентов", 229);
	Соответствие.Вставить("Справочник.Кассы", Неопределено);
	Соответствие.Вставить("Справочник.КлассификаторАлкогольнойПродукцииЕГАИС", 300);
	Соответствие.Вставить("Справочник.КлассификаторБанков", 318);
	Соответствие.Вставить("Справочник.КлассификаторОрганизацийЕГАИС", 311);
	Соответствие.Вставить("Справочник.Контрагенты", 224);
	Соответствие.Вставить("Справочник.Номенклатура", 263);
	Соответствие.Вставить("Справочник.Организации", 228);
	Соответствие.Вставить("Справочник.ОтветственныеЛицаОрганизаций", Неопределено);
	Соответствие.Вставить("Справочник.Партнеры", 341);
	Соответствие.Вставить("Справочник.Пользователи", 319);
	Соответствие.Вставить("Справочник.СерииНоменклатуры", 230);
	Соответствие.Вставить("Справочник.СкладскиеПомещения", 299);
	Соответствие.Вставить("Справочник.Склады", 338);
	Соответствие.Вставить("Справочник.СоглашенияСКлиентами", Неопределено);
	Соответствие.Вставить("Справочник.Справки2ЕГАИС", 312);
	Соответствие.Вставить("Справочник.СтруктураПредприятия", 294);
	Соответствие.Вставить("Справочник.УпаковкиЕдиницыИзмерения", 275);
	Соответствие.Вставить("Справочник.ФизическиеЛица", 327);
	Соответствие.Вставить("Справочник.грБизнесПартнеры", 236);
	Соответствие.Вставить("Справочник.грКачествоТоваров", 292);
	Соответствие.Вставить("Справочник.грЧастиСправок2ЕГАИС", Неопределено);
	Соответствие.Вставить("Справочник.грЦеновыеГруппыАП", 344);
	
	Класс = Соответствие.Получить(ПредставлениеТипа);
	Возврат Класс;
	// Конец GRADUM, Буравов А.В. 31.01.2020
КонецФункции

#КонецОбласти 

#Область ЭкспортныеМетодыУстаревшие

// Функция - Получить внешнюю систему
//
// Параметры:
//  ВнешняяСистема -  Строка  - имя адаптера системы интеграционного контура
// 
// Возвращаемое значение:
//   - ВнешняяСистемаСсылка
//
Функция ПолучитьВнешнююСистему(ВнешняяСистема) Экспорт
	
	ВнешняяСистемаСсылка    = Справочники.грСистемыИнтеграционногоКонтура.ПустаяСсылка();
	КодОсновногоЯзыка       = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ИмяСобытия              = НСтр("ru = 'грОбработкаПакетовИнтеграции.ПолучитьВнешнююСистему'", КодОсновногоЯзыка);
	НазваниеАдаптера        = СокрЛП(ВнешняяСистема);
	
	Если Не ЗначениеЗаполнено(ВнешняяСистема) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'При получении внешней системы была передана пустая строка'", КодОсновногоЯзыка));
		Возврат ВнешняяСистемаСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.грСистемыИнтеграционногоКонтура ГДЕ НазваниеАдаптера = &НазваниеАдаптера");
	Запрос.УстановитьПараметр("НазваниеАдаптера", НазваниеАдаптера);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НоваяСистемаОбъект = Справочники.грСистемыИнтеграционногоКонтура.СоздатьЭлемент();
		НоваяСистемаОбъект.Наименование     = НазваниеАдаптера;
		НоваяСистемаОбъект.НазваниеАдаптера = НазваниеАдаптера;
		
		Попытка
			НоваяСистемаОбъект.Записать();
			ВнешняяСистемаСсылка = НоваяСистемаОбъект.Ссылка;
		Исключение
			ТекстОшибки = "ru = 'грОбработкаПакетовИнтеграции.ПолучитьВнешнююСистему. 
			|Не удалось записать новый элемент справочника грСистемыИнтеграционногоКонтура'";
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, НСтр(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КодОсновногоЯзыка));
		КонецПопытки;
	Иначе    
		Выборка = РезультатЗапроса.Выбрать();    
		Выборка.Следующий();
		ВнешняяСистемаСсылка = Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат ВнешняяСистемаСсылка; 
КонецФункции

// Процедура - Установить блокировку по полям пакета
//
// Параметры:
//  xdtoОбъект			 - 	XDTOОбъект - XDTOОбъект загружаемого пакета. Можно передавать как XDTO загружаемого объекта, так и xdtoСтроку которая по сути также является XDTO объектом.
//  Отправитель			 - 	СправочникСсылка.грСистемыИнтеграционногоКонтура - Ссылка на внешнюю систему
//
Процедура УстановитьБлокировкуПоПолямПакета(xdtoОбъект, Отправитель) Экспорт
	// Начало GRADUM, Буравов А.В. 13.11.2019
	Блокировка = Новый БлокировкаДанных;
	Для Каждого Эл Из xdtoОбъект.Свойства() Цикл
		ИдентификаторОбъекта = xdtoОбъект.Получить(Эл.Имя);
		Если Эл.Имя <> "ПометкаУдаления" И Эл.Имя <> "Проведен" И ТипЗнч(ИдентификаторОбъекта) = Тип("Строка") И СтрДлина(СокрЛП(ИдентификаторОбъекта)) > 1 
			И ИдентификаторОбъекта <> ПустойИдентификатор() Тогда
			
			ЭлБлок = Блокировка.Добавить("РегистрСведений.грТаблицаПереходныхКлючейERP");
			ЭлБлок.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлБлок.УстановитьЗначение("ВнешняяСистема", Отправитель);
			ЭлБлок.УстановитьЗначение("ИдентификаторОбъекта", ИдентификаторОбъекта);
		КонецЕсли;
	КонецЦикла;
	Блокировка.Заблокировать();
	// Конец GRADUM, Буравов А.В. 13.11.2019
КонецПроцедуры

Функция ТаблицаSKUАГТ(Период, МассивНоменклатуры) Экспорт
	СоставТаблиц = Новый Соответствие;
	СоставТаблиц.Вставить(Перечисления.грТипыАлкогольнойПродукцииДляКУ.SKU, 1);
	СтруктураТаблиц = грНоменклатураСервер.СтруктураТаблицАГТSKU(Период, МассивНоменклатуры, СоставТаблиц);
	Возврат СтруктураТаблиц.ТаблицаSKU;    
КонецФункции 

Функция ТаблицаУпаковокНоменклатуры(МассивНоменклатуры, ПолучитьКоэффициенты = Ложь) Экспорт
	
	Возврат грНоменклатураСервер.ТаблицаУпаковокНоменклатурыПоУмолчанию(
		МассивНоменклатуры,
		ПолучитьКоэффициенты);
		
КонецФункции // ТаблицаУпаковокНоменклатуры() 

// Функция - Таблица упаковок по условию
//
// Параметры:
//  МассивНоменклатуры	 - Массив	 - Массив ссылок на номенклатуру
//  УсловияОтбора		 - Строка	 - Выражение условия отбора, добавляемое в запрос в блок "ГДЕ"
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Номенклатура, Упаковка, Числитель
//
Функция ТаблицаУпаковокПоУсловию(МассивНоменклатуры, УсловияОтбора) Экспорт
	// Начало GRADUM, Буравов А.В. 22.11.2019
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Владелец КАК Номенклатура,
	|	МАКСИМУМ(Ссылка) КАК Упаковка,
	|	Числитель КАК Числитель
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	Владелец В(&МассивНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	Владелец,
	|	Числитель";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(УсловияОтбора);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	// Конец GRADUM, Буравов А.В. 22.11.2019
КонецФункции

Функция ВерхнеуровневыйУзелСКС(Партнер, УсловияОтбора) Экспорт
	// Начало GRADUM, Буравов А.В. 27.11.2019
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Партнеры ГДЕ Ссылка = &Партнер ИТОГИ ПО Ссылка ТОЛЬКО ИЕРАРХИЯ");
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(УсловияОтбора);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	// Конец GRADUM, Буравов А.В. 27.11.2019
КонецФункции

Функция НайтиСоздатьРеглИнвойс(Знач Код, Знач Дата) Экспорт
	
	Код = СокрЛП(Код);
	Дата = ПолучитьЗначениеXMLТипДата(Дата);
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.грРегламентированныеИнвойсы ГДЕ Код = &Код 	И Дата = &Дата");
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Дата", Дата);   
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();   
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	Иначе
		НовыйОбъект = Справочники.грРегламентированныеИнвойсы.СоздатьЭлемент();
		НовыйОбъект.Код = Код;
		НовыйОбъект.Дата = Дата;        
		НовыйОбъект.Наименование = Справочники.грРегламентированныеИнвойсы.АвтоНаименование(НовыйОбъект);
		
		Попытка
			НовыйОбъект.ОбменДанными.Загрузка = Истина;
			НовыйОбъект.Записать();
			Результат = НовыйОбъект.Ссылка;
		Исключение
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			ТекстОшибки = "ru = 'грОбработкаПакетовИнтеграции.НайтиСоздатьРеглИнвойс. Не удалось записать новый элемент справочника грРегламентированныеИнвойсы'";
			ЗаписьЖурналаРегистрации(НСтр("ru = 'грОбработкаПакетовИнтеграции.ПолучитьВнешнююСистему'", КодОсновногоЯзыка), УровеньЖурналаРегистрации.Ошибка,,, НСтр(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КодОсновногоЯзыка));
		КонецПопытки;      
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиСоздатьРеглИнвойс()     

Функция ПодразделениеПоУзлуСКС(Партнер, ТипУровняСКС = Неопределено ) Экспорт
	МассивРодителей = грСКССервер.ПолучитьМассивПартнераСРодителями(Партнер);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.грЗначениеУзла КАК грЗначениеУзла
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В(&МассивРодителей)
	|	И Партнеры.грТипУровняСКС = &грТипУровняСКС";
	
	Запрос.УстановитьПараметр("грТипУровняСКС", ?(ЗначениеЗаполнено(ТипУровняСКС), ТипУровняСКС , 
			Перечисления.грТипыУзловСКС.Дирекция ) );
	
	Запрос.УстановитьПараметр("МассивРодителей"	, МассивРодителей);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.грЗначениеУзла;
	Иначе	
		Возврат Неопределено;	
	КонецЕсли; 
КонецФункции // ПодразделениеПоУзлуСКС() 

Процедура ПолучитьВалютуПоКоду(Валюта,Док) Экспорт
	Если ЗначениеЗаполнено(Валюта) Тогда
		Док.Валюта = Справочники.Валюты.НайтиПокоду(Валюта);
	КонецЕсли;
КонецПроцедуры

//GRADUM, Теплоухов А.В. 2020_04_24 {Функия выполняет попытку проведения документов}
// Выполняет попытку проведения документов.
//
// Параметры:
//   Документы - Массив - документы, которые необходимо провести.
//   РежимПроведенияНеоперативный - Булево - управлеяет режимом проведения документа, по умолчанию Истина
//
// Возвращаемое значение:
//   Массив - массив структур со свойствами:
//      * Ссылка         - ДокументСсылка - документ, который не удалось провести.
//      * ОписаниеОшибки - Строка         - текст описания ошибки при проведении.
//
Функция ПровестиДокументы(Документы,РежимПроведенияНеоперативный = Истина) Экспорт
	
	НепроведенныеДокументы = Новый Массив;
	
	Для Каждого ДокументСсылка Из Документы Цикл
		
		ВыполненоУспешно = Ложь;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			Если Не РежимПроведенияНеоперативный И ДокументОбъект.Дата >= НачалоДня(ТекущаяДатаСеанса())
				И ДокументСсылка.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
					РежимПроведения = РежимПроведенияДокумента.Оперативный;
			КонецЕсли;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
				ВыполненоУспешно = Истина;
			Исключение
				ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		Иначе
			ПредставлениеОшибки = НСтр("ru = 'Поля документа не заполнены.'");
		КонецЕсли;
		
		Если Не ВыполненоУспешно Тогда
			НепроведенныеДокументы.Добавить(Новый Структура("Ссылка,ОписаниеОшибки", ДокументСсылка, ПредставлениеОшибки));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеДокументы;
	
КонецФункции 

//Gradum Богданов Е.П 12.05.2020 ++
Процедура СформироватьОрдерНаСписание(СписаниеНедостачТоваров, xdtoОбъект, Отправитель, ЭтоПартии = Истина) Экспорт
	Если ЗначениеЗаполнено(СписаниеНедостачТоваров.ПересчетТоваров) Тогда 
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СписаниеНедостачТоваров.грОрдерОснование) Тогда 
		Ордер = СписаниеНедостачТоваров.грОрдерОснование.ПолучитьОбъект();
	Иначе
		Ордер = Документы.ОрдерНаОтражениеНедостачТоваров.СоздатьДокумент();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ордер.Номер) Тогда 
		Ордер.УстановитьНовыйНомер();
	КонецЕсли;
	
	м = ОбщегоНазначения.ОбщийМодуль("грОбработкаПакетовИнтеграции");
	
	м.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Ордер, xdtoОбъект, "Дата", "Дата");
	
	Комментарий = "";
	м.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Комментарий, xdtoОбъект, "Комментарий");
	
	Номер = "";
	м.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Номер, xdtoОбъект, "Номер");
	
	Если Не ЗначениеЗаполнено(Ордер.Комментарий) Тогда 
		Ордер.Комментарий = "Документ Партии № " + 
							Номер + 
							" от " + 
							Ордер.Дата + 
							" загружен из базы 1С:Уникум по документу-основанию в ЕРП " + 
							СписаниеНедостачТоваров + 
							" " + 
							Комментарий;
	КонецЕсли;
	
	м.ЗаполнитьСДозапросомЕслиРеквизитЕстьВПакете(Ордер.Ответственный, xdtoОбъект, "Автор",, "Справочник.Пользователи", Отправитель, Ордер.Ссылка);
	
	Ордер.Склад 	= СписаниеНедостачТоваров.Склад;
	Ордер.Помещение = СписаниеНедостачТоваров.грПомещение;
	
	Если ЭтоПартии Тогда 		
		//Проверим количество незаполненных справок Б в файле
		Отбор = Новый Структура("грЧастьСправкиБ", Справочники.грЧастиСправок2ЕГАИС.ПустаяСсылка());
		
		ПустыхСправокВДокументе = СписаниеНедостачТоваров.Товары.НайтиСтроки(Отбор).Количество();
		
		ВДокументеЗаполненыСправки = ПустыхСправокВДокументе < СписаниеНедостачТоваров.Товары.Количество();
		//если в файле нет справок - значит грузим партии
		
		ЗаполняемТовары = Не ВДокументеЗаполненыСправки;
	Иначе
		ЗаполняемТовары = Истина
	КонецЕсли;
	
	Если ЗаполняемТовары Тогда 
		Ордер.Товары.Очистить();
		
		Для Каждого Стр Из СписаниеНедостачТоваров.Товары Цикл 
			НоваяСтрока = Ордер.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			
			НоваяСтрока.СтатусУказанияСерий = 14;
			НоваяСтрока.грНормаВложенности  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "грНормаВложенности");
			НоваяСтрока.КоличествоУпаковок  = НоваяСтрока.Количество;
		КонецЦикла;
	КонецЕсли;
	
	Ордер.ОбменДанными.Загрузка = Истина;
	Ордер.Записать();
	
	СписаниеНедостачТоваров.грОрдерОснование = Ордер.Ссылка;
	
	ВидИдентификатора = "УНИКУМGUID";
	
	Ключ = грОбработкаПакетовИнтеграции.НайтиКлючПоСсылке(Ордер.Ссылка,,, ВидИдентификатора);
	
	Если Не ЗначениеЗаполнено(Ключ.Ключ) Тогда
		ЗаполняемыеРеквизиты = Новый Структура();
		
		ЗаполняемыеРеквизиты.Вставить("ВидИдентификатораСтрока", ВидИдентификатора);
		ЗаполняемыеРеквизиты.Вставить("ДатаОбновления", 		 ТекущаяДата());
		
		грОбработкаПакетовИнтеграции.УстановитьКлюч_v2(Ордер.Ссылка, xdtoОбъект.Ссылка,, ЗаполняемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПриходныйОрдер(ОбъектСообщение, ФорматСообщения, ЭтоПартии = Ложь, СостояниеСообщения, Товары) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ОтправительСтрокой = ОбъектСообщение.Source;
		МодульОбработкиПакетов = ОбщегоНазначения.ОбщийМодуль("грОбработкаПакетовИнтеграции");
		Отправитель = МодульОбработкиПакетов.ПолучитьВнешнююСистему(ОтправительСтрокой);
		xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, ОбъектСообщение.Body);
		
		ВидИдентификатора = "УНИКУМGUID";
		Таймаут 		  = 120;
		
		ТекстОшибки 	   = "";
		//СостояниеСообщения = Неопределено;//для тестирования
		
		ДопПараметры = грОбработкаПакетовИнтеграции.ПолучитьДопПараметрыУстановкиСсылочногоРеквизита();
		
		ДопПараметры.ВидИдентификатора = ВидИдентификатора ;
		ДопПараметры.СистемаОбмена 	   = Отправитель;
		ДопПараметры.xdtoОбъект 	   = xdtoОбъект;
		
		ПараметрыДоЗапроса = грОбработкаПакетовИнтеграции.ПолучитьПараметрыДоЗапроса();
		
		ПараметрыДоЗапроса.Timeout 			  = Таймаут; 
		ПараметрыДоЗапроса.ВлючитьЛогирование = Истина;
		ДопПараметры.ДоЗапрос 				  = ПараметрыДоЗапроса;
			
		ВидДокументаОснования = МодульОбработкиПакетов.ЗначениеРеквизита(xdtoОбъект, "ВидДокументаОснования");
		Если ВидДокументаОснования = "Перемещение" или ВидДокументаОснования = "ПриходнаяНакладная" Тогда
			
			Если ВидДокументаОснования 	= "Перемещение" Тогда
				ИмяТипаОбъекта 			= "Документ.ПеремещениеТоваров";
				СкладскаяОперация 		= Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
				ИмяРеквизитаСклад 		= "СкладПолучатель";
				ИмяРеквизитаПомещение 	= "грПомещениеПолучатель";
				ИмяРеквизитаОтправитель = "СкладОтправитель";
			ИначеЕсли ВидДокументаОснования = "ПриходнаяНакладная" Тогда
				ИмяТипаОбъекта 			= "Документ.ПриобретениеТоваровУслуг";
				СкладскаяОперация 		= Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
				ИмяРеквизитаСклад 		= "Склад";
				ИмяРеквизитаПомещение 	= "грПомещение";
				ИмяРеквизитаОтправитель = "Партнер";
			КонецЕсли;
			
			ОрдерСозданПакетом = Ложь;
			ДокументОснование = грОбработкаПакетовИнтеграции.ПолучитьОбъектПоКлючу_V2(xdtoОбъект.ДокументОснование,, "Документ.ПриходныйОрдерНаТовары", ВидИдентификатора, Ложь);
			Если ДокументОснование.Ссылка = Неопределено Тогда
				ПриходныйОрдерОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
				ПриходныйОрдерОбъект.УстановитьСсылкуНового(Документы.ПриходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор));
				ОрдерСозданПакетом = Истина;
				ДанныеДозапроса = Новый Структура("ДокументОснование");
				грОбработкаПакетовИнтеграции.ЗаполнитьДопПараметрыУстановкиСсылочногоРеквизита(ДопПараметры, "ДокументОснование", ИмяТипаОбъекта, "ДокументОснование");
				грОбработкаПакетовИнтеграции.УстановитьСсылочныйРеквизитПоID(ДанныеДозапроса, ДопПараметры, ТекстОшибки, СостояниеСообщения);
				Если ДанныеДозапроса.ДокументОснование = Неопределено Тогда 
					Возврат;
				Иначе
					ДокументОснованиеСсылка = ДанныеДозапроса.ДокументОснование;
				КонецЕсли;
			Иначе
				ПриходныйОрдер = грОбработкаПакетовИнтеграции.ПолучитьОбъектПоКлючу_V2(xdtoОбъект.Ссылка,, "Документ.ПриходныйОрдерНаТовары", ВидИдентификатора);
				Если ПриходныйОрдер.Ссылка <> Неопределено Тогда
					ПриходныйОрдерОбъект = ПриходныйОрдер.Ссылка.ПолучитьОбъект();
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
					|ИЗ
					|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
					|ГДЕ
					|	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение"
					;
					
					Запрос.УстановитьПараметр("Распоряжение", ДокументОснованиеСсылка);
					
					РезультатЗапроса = Запрос.Выполнить();
					Если Не РезультатЗапроса.Пустой() Тогда
						Выборка = РезультатЗапроса.Выбрать();
						Выборка.Следующий();
						ПриходныйОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект();
					Иначе
						ПриходныйОрдерОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
						ПриходныйОрдерОбъект.УстановитьСсылкуНового(Документы.ПриходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор));
						ОрдерСозданПакетом = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СправкиБЗаполнены = Ложь;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	грСтрокаПриходногоОрдераНаТовары.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.грСтрокаПриходногоОрдераНаТовары КАК грСтрокаПриходногоОрдераНаТовары
			|ГДЕ
			|	грСтрокаПриходногоОрдераНаТовары.ДокументВладелец = &ДокументВладелец
			|	И грСтрокаПриходногоОрдераНаТовары.ЧастьСправкиБ <> ЗНАЧЕНИЕ(Справочник.грЧастиСправок2ЕГАИС.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	грСтрокаПриходногоОрдераНаТовары.Ссылка КАК Ссылка,
			|	грСтрокаПриходногоОрдераНаТовары.SKU КАК SKU
			|	, грСтрокаПриходногоОрдераНаТовары.Серия КАК Серия,
			|	грСтрокаПриходногоОрдераНаТовары.ЧастьСправкиБ КАК ЧастьСправкиБ,
			|	грСтрокаПриходногоОрдераНаТовары.Вид КАК Вид
			|ИЗ
			|	Документ.грСтрокаПриходногоОрдераНаТовары КАК грСтрокаПриходногоОрдераНаТовары
			|ГДЕ
			|	грСтрокаПриходногоОрдераНаТовары.ДокументВладелец = &ДокументВладелец"
			;
			
			Запрос.УстановитьПараметр("ДокументВладелец",ПриходныйОрдерОбъект.Ссылка);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			СтрокиСЗаполненымиСправкамиБ = РезультатЗапроса[0].Выгрузить();
			СтрокиОрдера = РезультатЗапроса[1].Выгрузить();
			
			Если СтрокиСЗаполненымиСправкамиБ.Количество() > 0 Тогда
				СправкиБЗаполнены = Истина;
			КонецЕсли;
			
			Если ЭтоПартии Тогда
				ПриходныйОрдерОбъект.Статус = МодульОбработкиПакетов.ЗначениеРеквизита(xdtoОбъект, 
																				 	   "Статус", 
																				 	   "Перечисление.СтатусыПриходныхОрдеров",, 
																				 	   Перечисления.СтатусыПриходныхОрдеров.Принят);
			КонецЕсли;
						
			ИмяДокумента = ?(ЭтоПартии, "Документ.Партии", "Документ.СправкиБ");
			ДанныеТабЧасти = xdtoОбъект.Товары.Последовательность();
			
			Если Не СправкиБЗаполнены или Не ЭтоПартии Тогда
				
				ТоварыИзОснования = ДокументОснованиеСсылка.Товары.Выгрузить();
				
				Если МодульОбработкиПакетов.РеквизитЕстьВПакете(xdtoОбъект, "Дата", Истина) Тогда
					ПриходныйОрдерОбъект.Дата =  МодульОбработкиПакетов.ЗначениеРеквизита(xdtoОбъект, "Дата", "Дата", , ТекущаяДата());
				КонецЕсли;
				
				МодульОбработкиПакетов.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(ПриходныйОрдерОбъект, xdtoОбъект, "Номер");
				МодульОбработкиПакетов.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(ПриходныйОрдерОбъект.грПроведенВременная, xdtoОбъект, "Проведен", "Булево");
				
				грОбработкаПакетовИнтеграции.ЗаполнитьДопПараметрыУстановкиСсылочногоРеквизита(ДопПараметры, "Ответственный", "Справочник.Пользователи", "Автор");
				грОбработкаПакетовИнтеграции.УстановитьСсылочныйРеквизитПоID(ПриходныйОрдерОбъект, ДопПараметры, ТекстОшибки, СостояниеСообщения);
				
				ПриходныйОрдерОбъект.Распоряжение 			= ДокументОснованиеСсылка;
				ПриходныйОрдерОбъект.ХозяйственнаяОперация  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСсылка,"ХозяйственнаяОперация");
				ПриходныйОрдерОбъект.СкладскаяОперация 		= СкладскаяОперация;
				ПриходныйОрдерОбъект.Склад 					= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСсылка,ИмяРеквизитаСклад);
				ПриходныйОрдерОбъект.Помещение 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСсылка,ИмяРеквизитаПомещение);
				ПриходныйОрдерОбъект.Отправитель 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСсылка,ИмяРеквизитаОтправитель);
				
				Комментарий = "";
				МодульОбработкиПакетов.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Комментарий, xdtoОбъект, "Комментарий");
				Если ЭтоПартии Тогда
					ПриходныйОрдерОбъект.Комментарий = "Документ <Партии " + СокрЛП(ПриходныйОрдерОбъект.Номер) + " от " + Формат(ПриходныйОрдерОбъект.Дата, "ДФ = dd.MM.yy") + 
					"> загружен из базы 1С: " + ОтправительСтрокой + ". " + Комментарий;
				КонецЕсли;
				
				Если Товары.Количество() Тогда
					
					МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Товары", Товары);
					Запрос.УстановитьПараметр("ТоварыИзОснования", ТоварыИзОснования);
					Запрос.УстановитьПараметр("СтрокиОрдера", СтрокиОрдера);
					Запрос.УстановитьПараметр("ТаблицаSKU", МодульОбработкиПакетов.ТаблицаSKUАГТ(ПриходныйОрдерОбъект.Дата, МассивНоменклатуры));
					Запрос.УстановитьПараметр("Упаковки", МодульОбработкиПакетов.ТаблицаУпаковокПоУсловию(МассивНоменклатуры, "грВидУпаковки = ЗНАЧЕНИЕ(Перечисление.грВидыУпаковки.Штука) И грИспользоватьПоУмолчанию"));
					Запрос.УстановитьПараметр("ДокументВладелец", ПриходныйОрдерОбъект.Ссылка);
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Товары.Номенклатура КАК Номенклатура,
					|	Товары.Количество КАК Количество,
					|	Товары.Серия КАК Серия,
					|	Товары.грЧастьСправкиБ КАК ЧастьСправкиБ
					|ПОМЕСТИТЬ втТовары
					|ИЗ
					|	&Товары КАК Товары
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаSKU.Номенклатура КАК Номенклатура,
					|	ТаблицаSKU.АГТ КАК АГТ
					|ПОМЕСТИТЬ втТаблицаSKU
					|ИЗ
					|	&ТаблицаSKU КАК ТаблицаSKU
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Упаковки.Номенклатура КАК Номенклатура,
					|	Упаковки.Упаковка КАК Упаковка
					|ПОМЕСТИТЬ втУпаковки
					|ИЗ
					|	&Упаковки КАК Упаковки
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СтрокиОрдера.Ссылка КАК Ссылка,
					|	СтрокиОрдера.SKU КАК SKU
					|	, СтрокиОрдера.Серия КАК Серия,
					|	СтрокиОрдера.ЧастьСправкиБ КАК ЧастьСправкиБ,
					|	СтрокиОрдера.Вид КАК Вид
					|ПОМЕСТИТЬ ВТСтрокиОрдера
					|ИЗ
					|	&СтрокиОрдера КАК СтрокиОрдера
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТоварыИзОснования.Номенклатура КАК Номенклатура,
					|	ТоварыИзОснования.грКачествоТоваров КАК КачествоТовара
					|	, ТоварыИзОснования.Серия КАК Серия,
					|	ТоварыИзОснования.грЧастьСправкиБ КАК ЧастьСправкиБ
					|ПОМЕСТИТЬ ВТТоварыИзОснования
					|ИЗ
					|	&ТоварыИзОснования КАК ТоварыИзОснования
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	втТовары.Номенклатура КАК SKU,
					|	втТовары.Количество КАК КоличествоУпаковок,
					|	втТаблицаSKU.АГТ КАК АГТ,
					|	втУпаковки.Упаковка КАК Упаковка,
					|	втТовары.Серия КАК Серия,
					|	втТовары.Количество КАК Количество,
					|	ВТСтрокиОрдераФакт.Ссылка КАК СтрокаОрдера,
					|	ВТСтрокиОрдераПлан.Ссылка КАК СтрокаОрдераПлан,
					|	втТовары.ЧастьСправкиБ КАК ЧастьСправкиБ,
					|	ВТТоварыИзОснования.КачествоТовара КАК КачествоТовара
					|ИЗ
					|	втТовары КАК втТовары
					|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаSKU КАК втТаблицаSKU
					|		ПО втТовары.Номенклатура = втТаблицаSKU.Номенклатура
					|		ЛЕВОЕ СОЕДИНЕНИЕ втУпаковки КАК втУпаковки
					|		ПО втТовары.Номенклатура = втУпаковки.Номенклатура
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиОрдера КАК ВТСтрокиОрдераФакт
					|		ПО втТовары.Номенклатура = ВТСтрокиОрдераФакт.SKU
					|			И втТовары.Серия = ВТСтрокиОрдераФакт.Серия
					|			&УсловиеПоСправкамБФакт
					|			И ВТСтрокиОрдераФакт.Вид = Значение(Перечисление.грВидыДокументовСтрок.ФактическаяСтрока)
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиОрдера КАК ВТСтрокиОрдераПлан
					|		ПО втТовары.Номенклатура = ВТСтрокиОрдераПлан.SKU
					|			И втТовары.Серия = ВТСтрокиОрдераПлан.Серия
					|			&УсловиеПоСправкамБПлан
					|			И ВТСтрокиОрдераПлан.Вид = Значение(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока)
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыИзОснования КАК ВТТоварыИзОснования
					|		ПО втТовары.Номенклатура = ВТТоварыИзОснования.Номенклатура
					|			И втТовары.Серия = ВТТоварыИзОснования.Серия
					|			И втТовары.ЧастьСправкиБ = ВТТоварыИзОснования.ЧастьСправкиБ
					|"
					;
					
					Если СправкиБЗаполнены Тогда 
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСправкамБФакт", "И втТовары.ЧастьСправкиБ = ВТСтрокиОрдераФакт.ЧастьСправкиБ");					
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСправкамБПлан", "И втТовары.ЧастьСправкиБ = ВТСтрокиОрдераПлан.ЧастьСправкиБ");
					Иначе
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСправкамБФакт", "");					
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСправкамБПлан", "");
					КонецЕсли;
					
					РезультатЗапроса = Запрос.Выполнить();
					Если Не РезультатЗапроса.Пустой() Тогда
						СтрокаСозданаЭтимПакетом = Ложь;
						Выборка = РезультатЗапроса.Выбрать();
						Пока Выборка.Следующий() Цикл
							Если ЗначениеЗаполнено(Выборка.СтрокаОрдера) Тогда
								СтрокаОбъект = Выборка.СтрокаОрдера.ПолучитьОбъект();
								ИдентификаторСтроки = Выборка.СтрокаОрдера.УникальныйИдентификатор();
							Иначе
								СтрокаОбъект = Документы.грСтрокаПриходногоОрдераНаТовары.СоздатьДокумент();
								СтрокаСозданаЭтимПакетом = Истина;
								ИдентификаторСтроки = Новый УникальныйИдентификатор;
								СтрокаОбъект.УстановитьСсылкуНового(Документы.грСтрокаПриходногоОрдераНаТовары.ПолучитьСсылку(ИдентификаторСтроки));
							КонецЕсли;
							
							СтрокаПланСозданаЭтимПакетом = Ложь;
							Если ЗначениеЗаполнено(Выборка.СтрокаОрдераПлан) Тогда
								СтрокаПланОбъект = Выборка.СтрокаОрдераПлан.ПолучитьОбъект();
								ИдентификаторСтрокиПлан = Выборка.СтрокаОрдераПлан.УникальныйИдентификатор();
							Иначе
								СтрокаПланОбъект = Документы.грСтрокаПриходногоОрдераНаТовары.СоздатьДокумент();
								СтрокаПланСозданаЭтимПакетом = Истина;
								ИдентификаторСтрокиПлан = Новый УникальныйИдентификатор;
								СтрокаПланОбъект.УстановитьСсылкуНового(Документы.грСтрокаПриходногоОрдераНаТовары.ПолучитьСсылку(ИдентификаторСтрокиПлан));
							КонецЕсли;
							
							Если ПриходныйОрдерОбъект.ЭтоНовый() Тогда
								СтрокаОбъект.ДокументВладелец = ПриходныйОрдерОбъект.ПолучитьСсылкуНового();
								СтрокаПланОбъект.ДокументВладелец = ПриходныйОрдерОбъект.ПолучитьСсылкуНового();
							Иначе
								СтрокаОбъект.ДокументВладелец = ПриходныйОрдерОбъект.Ссылка;
								СтрокаПланОбъект.ДокументВладелец = ПриходныйОрдерОбъект.Ссылка;
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(СтрокаОбъект,ПриходныйОрдерОбъект,,"Номер"); 
							ЗаполнитьЗначенияСвойств(СтрокаОбъект, Выборка);
							ЗаполнитьЗначенияСвойств(СтрокаПланОбъект,ПриходныйОрдерОбъект,,"Номер"); 
							ЗаполнитьЗначенияСвойств(СтрокаПланОбъект, Выборка,,"Количество");
							СтрокаПланОбъект.КоличествоПлановое = СтрокаОбъект.Количество;
							Если ВидДокументаОснования <> "Перемещение" Тогда
								СтрокаОбъект.КачествоТовара = Справочники.грКачествоТоваров.Кондиция;
								СтрокаПланОбъект.КачествоТовара = Справочники.грКачествоТоваров.Кондиция;
							КонецЕсли;
							
							Если Не ЗначениеЗаполнено(СтрокаОбъект.ИдСтроки) Тогда 
								СтрокаОбъект.ИдСтроки = ИдентификаторСтроки;
							КонецЕсли;
							
							СтрокаОбъект.ИдПлановойСтроки = ИдентификаторСтрокиПлан;
							СтрокаОбъект.Сценарий = Справочники.грСценарииФормированияМастерСтрок.Закупки;
							СтрокаОбъект.ОбменДанными.Загрузка = Истина;
							
							Если Не ЗначениеЗаполнено(СтрокаПланОбъект.ИдСтроки) Тогда
								СтрокаПланОбъект.ИдСтроки = ИдентификаторСтрокиПлан;
							КонецЕсли;
							СтрокаПланОбъект.ИдПлановойСтроки = ИдентификаторСтрокиПлан;
							СтрокаПланОбъект.Сценарий = Справочники.грСценарииФормированияМастерСтрок.Закупки;
							СтрокаПланОбъект.ОбменДанными.Загрузка = Истина;
							
							СтрокаОбъект.Вид 	 = Перечисления.грВидыДокументовСтрок.ФактическаяСтрока;
							СтрокаПланОбъект.Вид = Перечисления.грВидыДокументовСтрок.ПлановаяСтрока;
							
							СтрокаПланОбъект.Записать();
							СтрокаОбъект.Записать();
							Если СтрокаСозданаЭтимПакетом Тогда
								УстанавливаемыеРеквизиты = Новый Структура("НомерДокумента, ДатаДокумента", СтрокаОбъект.Номер, СтрокаОбъект.Дата);
								МодульОбработкиПакетов.УстановитьКлюч(СтрокаОбъект.Ссылка, xdtoОбъект.Ссылка, Отправитель, УстанавливаемыеРеквизиты);
								УстанавливаемыеРеквизиты = Новый Структура("НомерДокумента, ДатаДокумента", СтрокаПланОбъект.Номер, СтрокаПланОбъект.Дата);
								МодульОбработкиПакетов.УстановитьКлюч(СтрокаПланОбъект.Ссылка, xdtoОбъект.Ссылка, Отправитель, УстанавливаемыеРеквизиты);
							ИначеЕсли Не ЭтоПартии И Не СправкиБЗаполнены Тогда
								ВидИдентификатора = Справочники.грВидыИдентификаторовСистем.КлючОбъектаИзменения;
								УстанавливаемыеРеквизиты = Новый Структура("НомерДокумента, 
																		   |ДатаДокумента, 
																		   |ВидИдентификатора", 
																		   СтрокаОбъект.Номер, 
																		   СтрокаОбъект.Дата, 
																		   ВидИдентификатора);
								МодульОбработкиПакетов.УстановитьКлюч(СтрокаОбъект.Ссылка, xdtoОбъект.Ссылка, Отправитель, УстанавливаемыеРеквизиты);
								
								УстанавливаемыеРеквизиты = Новый Структура("НомерДокумента, 
																		   |ДатаДокумента, 
																		   |ВидИдентификатора", 
																		   СтрокаПланОбъект.Номер, 
																		   СтрокаПланОбъект.Дата, 
																		   ВидИдентификатора);
								МодульОбработкиПакетов.УстановитьКлюч(СтрокаПланОбъект.Ссылка, xdtoОбъект.Ссылка, Отправитель, УстанавливаемыеРеквизиты);
							КонецЕсли;
							
						КонецЦикла;	
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ПриходныйОрдерОбъект.ОбменДанными.Загрузка = Истина;
			ПриходныйОрдерОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
			ПриходныйОрдерОбъект.Записать();
			Если ОрдерСозданПакетом Тогда
				УстанавливаемыеРеквизиты = Новый Структура("НомерДокумента, ДатаДокумента", ПриходныйОрдерОбъект.Номер, ПриходныйОрдерОбъект.Дата);
				грОбработкаПакетовИнтеграции.УстановитьКлюч_v2(ПриходныйОрдерОбъект.Ссылка, xdtoОбъект.Ссылка,, УстанавливаемыеРеквизиты);
			ИначеЕсли СправкиБЗаполнены и ЭтоПартии Тогда
				ИдентификаторОрдера = грОбработкаПакетовИнтеграции.НайтиКлючПоСсылке(ПриходныйОрдерОбъект.Ссылка,,, ВидИдентификатора);
				Если Не ИдентификаторОрдера = xdtoОбъект.Ссылка Тогда
					УстанавливаемыеРеквизиты = Новый Структура("НомерДокумента, ДатаДокумента, ВидИдентификатора", ПриходныйОрдерОбъект.Номер, ПриходныйОрдерОбъект.Дата, Справочники.грВидыИдентификаторовСистем.КлючОбъектаИзменения);
					грОбработкаПакетовИнтеграции.УстановитьКлюч_v2(ПриходныйОрдерОбъект.Ссылка, xdtoОбъект.Ссылка,, УстанавливаемыеРеквизиты);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки Тогда
			Задержка = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьЗадержкуСообщенияESB();
		Иначе	
			ВызватьИсключение "Ошибка в Datareon при загрузке объекта «" + ИмяТипаОбъекта + "». ID: " + ОбъектСообщение.ID + ". " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры
//Gradum Богданов Е.П 12.05.2020 --

//КОНТАКТНАЯ ИНФОРМАЦИЯ 


// Датареон, Новиков, 03.06.2020, №13687 -->
//Функция ЗначенияПолейКИ(Тип, Представление) Экспорт
Функция ЗначенияПолейКИ(Тип, Представление, Комментарий = "") Экспорт
// <-- Датареон, Новиков, 03.06.2020, №13687
	// Датареон, Новиков, 06.05.2020, #12713 -->
	//Результат = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""" + Представление + """>";
	Результат = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""" + ЭкранироватьСтроку(Представление) + """>";
	// <-- Датареон, Новиков, 06.05.2020, #12713
	
	// Датареон, Новиков, 03.06.2020, №13687 -->
	Если ЗначениеЗаполнено(Комментарий) Тогда 
		Результат = Результат + "
		|	<Комментарий>"+ЭкранироватьСтроку(Комментарий)+"</Комментарий>";
	КонецЕсли;
	// <-- Датареон, Новиков, 03.06.2020, №13687
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ПредставлениеПослеЗаменыСимвола = СтрЗаменить(Представление,",",Символы.ПС);
		Индекс = СтрПолучитьСтроку(ПредставлениеПослеЗаменыСимвола, 2);
		Страна = Справочники.СтраныМира.Россия;
		
		// Датареон, Новиков, 06.05.2020, #12713 -->
		//Результат = Результат + Символы.ПС + 
		//"   <Состав xsi:type=""Адрес"" Страна=""" + Страна + """>
		//|       <Состав xsi:type=""АдресРФ"">
		//|           <ДопАдрЭл ТипАдрЭл=""10100000"" Значение=""" + Индекс + """/>
		//|       </Состав>
		//|   </Состав>";
		Результат = Результат + Символы.ПС + 
		"   <Состав xsi:type=""Адрес"" Страна=""" + ЭкранироватьСтроку(Страна) + """>
		|       <Состав xsi:type=""АдресРФ"">
		|           <ДопАдрЭл ТипАдрЭл=""10100000"" Значение=""" + ЭкранироватьСтроку(Индекс) + """/>
		|       </Состав>
		|   </Состав>";
		// <-- Датареон, Новиков, 06.05.2020, #12713
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Результат = Результат + Символы.ПС + "   <Состав xsi:type=""НомерТелефона"" КодСтраны="""" КодГорода="""" Номер="""" Добавочный=""""/>";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		// Датареон, Новиков, 06.05.2020, #12713 -->
		Результат = Результат + Символы.ПС + "   <Состав xsi:type=""ЭлектроннаяПочта"" Значение=""" + ЭкранироватьСтроку(Представление) + """/>";
		// <-- Датареон, Новиков, 06.05.2020, #12713
	КонецЕсли;  
	
	Результат = Результат +  Символы.ПС + "</КонтактнаяИнформация>";
	Возврат Результат;
КонецФункции // ЗначенияПолейАдресаКонтактнойИнформации() 

// Датареон, Новиков, 05.06.2020, №13687 -->
Функция ЗначениеКИ(Тип, Представление, Комментарий = "") Экспорт
	ОписаниеКИ = УправлениеКонтактнойИнформацией.ОписаниеНовойКонтактнойИнформации(Тип);
	ОписаниеКИ.value = Представление;
	ОписаниеКИ.comment = Комментарий;
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ОписаниеКИ);
КонецФункции
// <-- Датареон, Новиков, 05.06.2020, №13687

// Датареон, Новиков, 03.06.2020, №13687 -->
//Процедура ДобавитьСтрокуВТаблицуКИ(Таблица, Тип, Вид, Представление) Экспорт
Процедура ДобавитьСтрокуВТаблицуКИ(Таблица, Тип, Вид, Представление, Комментарий = "") Экспорт
// <-- Датареон, Новиков, 03.06.2020, №13687
	Если ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Тип 			= Тип;
		НоваяСтрока.Вид 			= Вид;
		НоваяСтрока.ВидДляСписка	= НоваяСтрока.Вид;
		НоваяСтрока.Представление	= Представление;       
		// Датареон, Новиков, 03.06.2020, №13687 -->
		//НоваяСтрока.ЗначенияПолей   = ЗначенияПолейКИ(Тип, Представление);
		НоваяСтрока.ЗначенияПолей   = ЗначенияПолейКИ(Тип, Представление, Комментарий);
		// <-- Датареон, Новиков, 03.06.2020, №13687
		
		// Датареон, Новиков, 05.06.2020, №13687 -->
		НоваяСтрока.Значение = ЗначениеКИ(Тип, Представление, Комментарий);
		// <-- Датареон, Новиков, 05.06.2020, №13687 -->
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			НоваяСтрока.АдресЭП = Представление;
			Поз = Найти(Представление, "@");
			Если Поз <> 0 Тогда
				НоваяСтрока.ДоменноеИмяСервера = Сред(Представление, Поз + 1);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры 

Функция ПолучитьМенеджераПоИерархииУзловСКС(УзелСКС) Экспорт
	// Начало GRADUM, Буравов А.В. 04.12.2019
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &УзелСКС
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("УзелСКС", УзелСКС);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТЗ = РезультатЗапроса.Выгрузить();
		КоличествоЗаписей = ТЗ.Количество();
		ТекНомерЗаписи = КоличествоЗаписей - 1;
		
		Пока ТекНомерЗаписи <> -1 Цикл
			Менеджер = ТЗ[ТекНомерЗаписи].ОсновнойМенеджер;
			Если ЗначениеЗаполнено(Менеджер) Тогда
				Возврат Менеджер;
			КонецЕсли; 
			
			ТекНомерЗаписи = ТекНомерЗаписи - 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Справочники.грМенеджеры.ПустаяСсылка();
	// Конец GRADUM, Буравов А.В. 04.12.2019
КонецФункции

// Устарела. См Функция УстановитьКлюч_v2
//
// Параметры:
//	Объект                  - ЛюбаяСсылка   - Ссылка на объект для записи
//	Ключ                    - Строка        - ИдентификаторОбъекта
//	ВнешняяСистема          - СправочникСсылка.грСистемыИнтеграционногоКонтура - имя внешней системы
//	УстанавливаемыеРеквизиты- Структура     - дополнительные значения для заполнения
//
// Возвращаемое значение
//	Булево - Успешность записи
//
Функция УстановитьКлюч(ОбъектERP, ИдентификаторОбъекта, ВнешняяСистема, УстанавливаемыеРеквизиты = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.грТаблицаПереходныхКлючейERP.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнешняяСистема 				= ВнешняяСистема;
	МенеджерЗаписи.ОбъектERP 						= ОбъектERP;	
	МенеджерЗаписи.ИдентификаторОбъекта	= ИдентификаторОбъекта;
	//МенеджерЗаписи.ВидИдентификатора 		= Справочники.грВидыИдентификаторовСистем.ПустаяСсылка();	
	МенеджерЗаписи.ДатаОбновления 				= ТекущаяДата();
	
	// Начало GRADUM, Буравов А.В. 11.10.2019
	Если УстанавливаемыеРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, УстанавливаемыеРеквизиты);
	КонецЕсли; 
	// Конец GRADUM, Буравов А.В. 11.10.2019
	
	Попытка
		МенеджерЗаписи.Записать();
		Возврат Истина;
	Исключение
		ЗаписьЖурналаРегистрации("грОбработкаПакетовИнтеграции.УстановитьКлюч", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось записать запись регистра сведений грТаблицаПереходныхКлючейERP, по причине: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	//// Начало GRADUM, Буравов А.В. 28.11.2019
	//Если Не ЗначениеЗаполнено(ОбъектERP) Или Не ЗначениеЗаполнено(ИдентификаторОбъекта) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//НастройкиОтбора = Новый Структура;
	//НастройкиОтбора.Вставить("ИдентификаторОбъекта", ИдентификаторОбъекта);
	//НастройкиОтбора.Вставить("ОбъектERP", ОбъектERP);
	//НастройкиОтбора.Вставить("ВнешняяСистема", ВнешняяСистема);
	//НастройкиОтбора.Вставить("ВидИдентификатора", Справочники.грВидыИдентификаторовСистем.ПустаяСсылка());
	//
	//Если ТипЗнч(УстанавливаемыеРеквизиты) = Тип("Структура") Тогда
	//	ЗаполнитьЗначенияСвойств(НастройкиОтбора, УстанавливаемыеРеквизиты);
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	т.ОбъектERP КАК ОбъектERP
	//|ИЗ
	//|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК т
	//|ГДЕ
	//|	т.ВнешняяСистема = &ВнешняяСистема
	//|	И т.ОбъектERP = &ОбъектERP
	//|	И т.ИдентификаторОбъекта = &ИдентификаторОбъекта
	//|	И т.ВидИдентификатора = &ВидИдентификатора";
	//
	//Для каждого Эл Из НастройкиОтбора Цикл
	//	Запрос.УстановитьПараметр(Эл.Ключ, Эл.Значение);
	//КонецЦикла;
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//ОбъектУжеЗаписанВТПК = Не РезультатЗапроса.Пустой();
	//
	//МенеджерЗаписи = РегистрыСведений.грТаблицаПереходныхКлючейERP.СоздатьМенеджерЗаписи();
	//ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НастройкиОтбора, "ВнешняяСистема, ОбъектERP, ИдентификаторОбъекта, ВидИдентификатора");
	//
	//Если ОбъектУжеЗаписанВТПК Тогда
	//	МенеджерЗаписи.Прочитать();
	//КонецЕсли;
	//
	//МенеджерЗаписи.ДатаОбновления = ТекущаяДата();
	//
	//Если ТипЗнч(УстанавливаемыеРеквизиты) = Тип("Структура") Тогда
	//	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, УстанавливаемыеРеквизиты);
	//	
	//	Если УстанавливаемыеРеквизиты.Свойство("Номер") Тогда
	//		МенеджерЗаписи.НомерДокумента = УстанавливаемыеРеквизиты.Номер;
	//	КонецЕсли; 
	//	
	//	Если УстанавливаемыеРеквизиты.Свойство("Дата") Тогда
	//		МенеджерЗаписи.ДатаДокумента = УстанавливаемыеРеквизиты.Дата;
	//	КонецЕсли;
	//КонецЕсли;
	//// Конец GRADUM, Буравов А.В. 28.11.2019
	//
	//Попытка
	//	МенеджерЗаписи.Записать();
	//	Возврат Истина;
	//Исключение
	//	ЗаписьЖурналаРегистрации("грОбработкаПакетовИнтеграции.УстановитьКлюч", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось записать запись регистра сведений грТаблицаПереходныхКлючейERP, по причине: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	Возврат Ложь;
	//КонецПопытки;
КонецФункции

// Процедура - Записать ВТПКПо коду
//
// Параметры:
//  ВнешняяСистема			 - 	СправочникСсылка.грСистемыИнтеграционногоКонтура - Ссылка на внешнюю систему
//  Ссылка			 - СправочникСсылка, ДокументСсылка	 - объект который необходимо записать в регистр "Таблица переходных ключей"
//  Код				 - Строка	 - Код который необходимо записать в регистр "Таблица переходных ключей"
//
Процедура ЗаписатьВТПКПоКоду(ВнешняяСистема, Ссылка, Код) Экспорт
	// Начало GRADUM, Буравов А.В. 01.11.2019
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.ОбъектERP КАК ОбъектERP
	|ИЗ
	|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК т
	|ГДЕ
	|	т.ВнешняяСистема = &ВнешняяСистема
	|	И т.ВидИдентификатора = ЗНАЧЕНИЕ(Справочник.грВидыИдентификаторовСистем.КодУникум)
	|	И т.ИдентификаторОбъекта = &ИдентификаторОбъекта";
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", Код);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		УстанавливаемыеРеквизитыПоКоду = Новый Структура("ВидИдентификатора", Справочники.грВидыИдентификаторовСистем.КодУникум);
		УстановитьКлюч(Ссылка, Код, ВнешняяСистема, УстанавливаемыеРеквизитыПоКоду);
	КонецЕсли;
	// Конец GRADUM, Буравов А.В. 01.11.2019
КонецПроцедуры

// Функция - Получить контрагента по ИНН КПП
//
// Параметры:
//  ИНН	 - Строка	 - ИНН искомого контрагента
//  КПП	 - Строка - КПП искомого контрагента
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - найденный по связке ИНН + КПП контрагент
//
Функция ПолучитьКонтрагентаПоИНН_КПП(ИНН, КПП) Экспорт
	// Начало GRADUM, Буравов А.В. 19.12.2019
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грТаблицаПереходныхКлючейERP КАК ТПК
	|		ПО Контрагенты.Ссылка = ТПК.ОбъектERP
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И ТПК.ОбъектERP ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Если Выборка.Количество() > 1 Тогда
		ТекстОшибки = "Обнаружено " + Выборка.Количество() + " шт. контрагентов с одинаковыми ИНН/КПП " + ИНН + "/" + КПП;
		ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.Контрагенты);
	КонецЕсли;
	
	Возврат Выборка.Ссылка;
	// Конец GRADUM, Буравов А.В. 19.12.2019
КонецФункции

// Функция - Таблица значений по табличной части
//
// Параметры:
//  ИмяОбъекта			 - Строка	 - Имя документа\справочника или др. объекта. Например "Документ.РеализацияТоваровУслуг"
//  ИмяТабличнойЧасти	 - 	Строка - Имя табличной части объекта. Например "Товары"
//  СписокРеквизитов	 - Строка	 - Список реквизитов через запятую. Например "Номенклатура, Серия, Количество, Сумма"
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица значений с колонками заданной табличной части заданного объекта
//
Функция ТаблицаЗначенийПоТабличнойЧасти(ИмяОбъекта, ИмяТабличнойЧасти, СписокРеквизитов = Неопределено) Экспорт
	// Начало GRADUM, Буравов А.В. 21.11.2019
	ТаблицаЗначений = Новый ТаблицаЗначений;
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	Если МетаданныеОбъекта <> Неопределено Тогда
		МетаданныеТабличнойЧасти = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		Если МетаданныеТабличнойЧасти <> Неопределено Тогда
			
			Если СписокРеквизитов <> Неопределено Тогда
				МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокРеквизитов,, Истина, Истина);
				
				Для каждого ИмяИскомогоРеквизита Из МассивРеквизитов Цикл
					РеквизитНайден = Ложь;
					
					Для каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл
						Если Реквизит.Имя = ИмяИскомогоРеквизита Тогда
							ТаблицаЗначений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
							РеквизитНайден = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не РеквизитНайден Тогда
						Для каждого Реквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл
							Если Реквизит.Имя = ИмяИскомогоРеквизита Тогда
								ТаблицаЗначений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
								РеквизитНайден = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли; 
					
				КонецЦикла;
			Иначе
				Для каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл
					ТаблицаЗначений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
				КонецЦикла;
				
				Для каждого СтандартныйРеквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл
					ТаблицаЗначений.Колонки.Добавить(СтандартныйРеквизит.Имя, СтандартныйРеквизит.Тип, СтандартныйРеквизит.Синоним);
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ТаблицаЗначений;
	// Конец GRADUM, Буравов А.В. 21.11.2019
КонецФункции

//Gradum Богданов Е.П 15.04.2020 ++
// Функция - Таблица значений по документам строк
//
// Параметры:
//  ИмяОбъекта			 - Строка	 - Имя документа\справочника или др. объекта. Например "Документ.РеализацияТоваровУслуг"
//  СписокРеквизитов	 - Строка	 - Список реквизитов через запятую. Например "Номенклатура, Серия, Количество, Сумма"
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица значений с колонками реквизитов заданного объекта
//
Функция ТаблицаЗначенийПоДокументамСтрок(ИмяОбъекта, СписокРеквизитов = Неопределено) Экспорт
	ТаблицаЗначений = Новый ТаблицаЗначений;
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	Если МетаданныеОбъекта <> Неопределено Тогда
		
		Если СписокРеквизитов <> Неопределено Тогда
			МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокРеквизитов,, Истина, Истина);
			
			Для каждого ИмяИскомогоРеквизита Из МассивРеквизитов Цикл
				РеквизитНайден = Ложь;
				
				Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
					Если Реквизит.Имя = ИмяИскомогоРеквизита Тогда
						ТаблицаЗначений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
						РеквизитНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не РеквизитНайден Тогда
					Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
						Если Реквизит.Имя = ИмяИскомогоРеквизита Тогда
							ТаблицаЗначений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
							РеквизитНайден = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли; 
				
			КонецЦикла;
		Иначе
			Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
				ТаблицаЗначений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
			КонецЦикла;
			
			Для каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				ТаблицаЗначений.Колонки.Добавить(СтандартныйРеквизит.Имя, СтандартныйРеквизит.Тип, СтандартныйРеквизит.Синоним);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ТаблицаЗначений;
КонецФункции
//Gradum Богданов Е.П 15.04.2020 --

Процедура ОтправитьДозапрос(ГУИД, IdКласса, ПолучательСтрокой) Экспорт
	// Начало GRADUM, Буравов А.В. 22.01.2020
	СтруктураДозапроса = Новый Структура("ГУИД, IdКласса, ПолучательСтрокой", ГУИД, IdКласса, ПолучательСтрокой);
	ЗначениеХранения = Новый ХранилищеЗначения(СтруктураДозапроса);
	сшпРаботаСДанными.ПоместитьВОчередьИсходящих("ВиртуальныйОбъект.ЗапросДанныхУНИКУМ", ЗначениеХранения,
	сшпФункциональныеОпции.ФорматСообщения(), Перечисления.сшпМетодХранения.ПоСсылке, Ложь, Ложь, Неопределено);
	// Конец GRADUM, Буравов А.В. 22.01.2020
КонецПроцедуры


//  Устарела. См ПолучитьИдентификаторОбъектаERP
// Функция Получить ИдентификаторОбъекта по ссылке 
//
// Параметры:
//	ОбъектERP       - ЛюбаяСсылка - ссылка для поиска ИдентификаторОбъекта
//  ВнешняяСистема  - СправочникСсылка.грСистемыИнтеграционногоКонтура - имя внешней системы
// Возвращаемое значение
//	Строка, Неопределено - результат поиска идентификатора, может возвращать неопределено, если запись не найдена
//
Функция ПолучитьИдентификаторОбъектаПоСсылке(ОбъектERP, ВидИдентификатора, ДопУсловиеОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	т.ИдентификаторОбъекта КАК ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК т
	|ГДЕ
	|	т.ВидИдентификатораСтрока = &ВидИдентификатора
	|	И т.ОбъектERP = &ОбъектERP
	|	И &ДопОтбор";
	
	Запрос.УстановитьПараметр("ВидИдентификатора"	, ВидИдентификатора);
	Запрос.УстановитьПараметр("ОбъектERP"			, ОбъектERP);
	Запрос.УстановитьПараметр("ДопОтбор"			, Истина);
	
	Если Не ДопУсловиеОтбора = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", ДопУсловиеОтбора.ТекстУсловия);
		
		Если ДопУсловиеОтбора.Свойство("Параметры") Тогда
		
			Для каждого КлючЗначение Из ДопУсловиеОтбора.Параметры Цикл
				Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ИдентификаторОбъекта;
		
	КонецЕсли;
	
КонецФункции

// Процедура - Дополнить табличную часть товары
//
// Параметры:
//  ДокОбъект							 - 	ДокументОбъект - Документ, табличную часть "Товары" которого необходимо дополнить
//  ДополненныйРезультатЗапросаПоФайлу	 - РезультатЗапроса	 - Результат запроса таблицы, которая была сформирована на основе загружаемого файла
//
Процедура ДополнитьТабличнуюЧастьТовары(ДокОбъект, ДополненныйРезультатЗапросаПоФайлу, ИмяТабличнойЧасти = "Товары", ЭтоТабличнаяЧасть = Истина) Экспорт
	ТипДополненногоРезультата = ТипЗнч(ДополненныйРезультатЗапросаПоФайлу);
	Если ТипДополненногоРезультата = Тип("РезультатЗапроса") Тогда
		ТЗ_Файла = ДополненныйРезультатЗапросаПоФайлу.Выгрузить();
	ИначеЕсли ТипДополненногоРезультата = Тип("ТаблицаЗначений") Тогда 
		ТЗ_Файла = ДополненныйРезультатЗапросаПоФайлу;
	КонецЕсли;
	
	//Проверим количество незаполненных справок Б в файле
	ЕстьСправкиБ = Ложь;
	
	СправкиБ = ТЗ_Файла.Колонки.Найти("грЧастьСправкиБ");
	Если СправкиБ <> Неопределено Тогда
		Отбор = Новый Структура("грЧастьСправкиБ", Справочники.грЧастиСправок2ЕГАИС.ПустаяСсылка());
		ПустыхСправокВФайле = ТЗ_Файла.НайтиСтроки(Отбор).Количество();
		
		Если ЭтоТабличнаяЧасть Тогда 
			ПустыхСправокВДокументе = ДокОбъект[ИмяТабличнойЧасти].НайтиСтроки(Отбор).Количество();
			КоличествоВДокументе	= ДокОбъект.Товары.Количество();
		Иначе
			ПустыхСправокВДокументе = ДокОбъект.НайтиСтроки(Отбор).Количество();
			КоличествоВДокументе	= ДокОбъект.Количество();
		КонецЕсли;
		
		ВДокументеЗаполненыСправки = ПустыхСправокВДокументе < КоличествоВДокументе;
		//если в файле нет справок - значит грузим партии
		Если ПустыхСправокВФайле = ТЗ_Файла.Количество() Тогда 
			
			//Если в документ уже загружены справки, партии грузить не нужно
			Если ВДокументеЗаполненыСправки Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьСправкиБ = Истина;
	КонецЕсли;
	
	Если ЭтоТабличнаяЧасть Тогда 
		ТЗ_Документа = ДокОбъект[ИмяТабличнойЧасти].Выгрузить();
	Иначе
		ТЗ_Документа = ДокОбъект;
	КонецЕсли;
	
	ТЗ_Документа.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
		
	МассивУдаляемыхСтрок = Новый Массив;
	
	МассивНеПроверяемыхПолей = Новый Массив;
	МассивНеПроверяемыхПолей.Добавить("Номенклатура");
	
	// Это массив имён колонок которые нужно проверить на заполненность в файле. Если колонка заполнена - дозаполнить её в табличной части
	МассивПроверяемыхПолей = Новый Массив;
	Для каждого Колонка Из ДополненныйРезультатЗапросаПоФайлу.Колонки Цикл
		Если МассивНеПроверяемыхПолей.Найти(Колонка.Имя) = Неопределено Тогда
			МассивПроверяемыхПолей.Добавить(Колонка.Имя);
		КонецЕсли; 
	КонецЦикла;
	
	ЕстьСерии = Ложь;
	Серии = ТЗ_Файла.Колонки.Найти("Серия");
	Если Серии <> Неопределено Тогда
		ЕстьСерии = Истина;
	КонецЕсли;
	
	ПересчитатьСумму = Ложь;
	
	Если Не ТЗ_Документа.Колонки.Найти("Сумма") = Неопределено 
		И Не ТЗ_Документа.Колонки.Найти("Цена") = Неопределено Тогда
		СтруктураДействий = Новый Структура("ПересчитатьСумму", "Количество");
		
		ПересчитатьСумму = Истина;
	КонецЕсли;
	
	ПересчитатьСуммуНДС = Ложь;
	
	Если Не ТЗ_Документа.Колонки.Найти("СуммаНДС") = Неопределено
		И Не ТЗ_Документа.Колонки.Найти("СуммаСНДС") = Неопределено Тогда
		
		ПересчитатьСуммуНДС = Истина;
	КонецЕсли;
	
	// Перебираем все строки файла, ищем их по таблице документа и заполняем таблицу результат
	Для каждого СтрФайл Из ТЗ_Файла Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрФайл.Номенклатура);
		СтруктураПоиска.Вставить("Обработан", Ложь);
		
		Если ЕстьСерии  Тогда
			Если ЗначениеЗаполнено(СтрФайл.Серия) Тогда
				СтруктураПоиска.Вставить("Количество", СтрФайл.Количество);
				СтруктураПоиска.Вставить("Серия", СтрФайл.Серия);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСправкиБ Тогда
			Если ЗначениеЗаполнено(СтрФайл.грЧастьСправкиБ) И ВДокументеЗаполненыСправки Тогда
				СтруктураПоиска.Вставить("Количество", СтрФайл.Количество);
				СтруктураПоиска.Вставить("грЧастьСправкиБ", СтрФайл.грЧастьСправкиБ);
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтроки = ТЗ_Документа.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбрабатываемаяСтрока = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, СтрФайл);
				
			ОбрабатываемаяСтрока.Обработан = Истина;
		ИначеЕсли (ЕстьСерии И ЗначениеЗаполнено(СтрФайл.Серия)) Или (ЕстьСправкиБ И ЗначениеЗаполнено(СтрФайл.СправкаБ)) Тогда
			Если СтруктураПоиска.Свойство("Серия") Тогда 
				СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			Если СтруктураПоиска.Свойство("грЧастьСправкиБ") Тогда 
				СтруктураПоиска.грЧастьСправкиБ = Справочники.грЧастиСправок2ЕГАИС.ПустаяСсылка();
			КонецЕсли;
			
			НайденныеСтроки = ТЗ_Документа.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОбрабатываемаяСтрока = НайденныеСтроки[0];
				Для каждого ПроверяемыйЭл Из МассивПроверяемыхПолей Цикл
					Если ТипЗнч(СтрФайл[ПроверяемыйЭл]) = Тип("Булево") ИЛИ ЗначениеЗаполнено(СтрФайл[ПроверяемыйЭл]) Тогда
						ОбрабатываемаяСтрока[ПроверяемыйЭл] = СтрФайл[ПроверяемыйЭл];
					КонецЕсли;
				КонецЦикла;
				
				ОбрабатываемаяСтрока.Обработан = Истина;
			Иначе
				НайденныеСтроки = ТЗ_Документа.НайтиСтроки(Новый Структура("Номенклатура, Обработан", СтрФайл.Номенклатура, Ложь));
				Если НайденныеСтроки.Количество() > 0 Тогда
					КоличествоФайла = СтрФайл.Количество;
					МассивУдаляемыхСтрок = Новый Массив;
					Для каждого СтрДок Из НайденныеСтроки Цикл
						НовСтр = ТЗ_Документа.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрДок);
						
						Для каждого ПроверяемыйЭл Из МассивПроверяемыхПолей Цикл
							Если ТипЗнч(СтрФайл[ПроверяемыйЭл]) = Тип("Булево") ИЛИ ЗначениеЗаполнено(СтрФайл[ПроверяемыйЭл]) Тогда
								НовСтр[ПроверяемыйЭл] = СтрФайл[ПроверяемыйЭл];
							КонецЕсли;
						КонецЦикла;
						
						Если КоличествоФайла >= СтрДок.Количество Тогда
							НовСтр.Количество = СтрДок.Количество;
							КоличествоФайла = КоличествоФайла - СтрДок.Количество;
							МассивУдаляемыхСтрок.Добавить(СтрДок);
						Иначе
							НовСтр.Количество = КоличествоФайла;
							
							Если ПересчитатьСуммуНДС Тогда
								НовоеКоличество = СтрДок.Количество - КоличествоФайла;
								Если Не СтрДок.Количество = 0 Тогда 
									СтрДок.СуммаНДС  = СтрДок.СуммаНДС / СтрДок.Количество * НовоеКоличество;
									СтрДок.СуммаСНДС = СтрДок.СуммаСНДС / СтрДок.Количество * НовоеКоличество;
								Иначе
									СтрДок.СуммаНДС = 0;
									СтрДок.СуммаСНДС = 0;
								КонецЕсли;
								СтрДок.Количество = НовоеКоличество;
							Иначе
								СтрДок.Количество = СтрДок.Количество - КоличествоФайла;
							КонецЕсли;
							
							КоличествоФайла = 0;
							
							Если ПересчитатьСумму Тогда 
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрДок, СтруктураДействий, Неопределено);
							КонецЕсли;
						КонецЕсли;
						
						Если Не НовСтр.Количество = СтрДок.Количество Тогда
							Если ПересчитатьСумму Тогда 
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НовСтр, СтруктураДействий, Неопределено);
							КонецЕсли;
							
							Если ПересчитатьСуммуНДС Тогда
								Если Не СтрДок.Количество = 0 Тогда 
									НовСтр.СуммаНДС  = СтрДок.СуммаНДС / СтрДок.Количество * НовСтр.Количество;
									НовСтр.СуммаСНДС = СтрДок.СуммаСНДС / СтрДок.Количество * НовСтр.Количество;
								Иначе
									НовСтр.СуммаНДС = 0;
									НовСтр.СуммаСНДС = 0;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						НовСтр.Обработан = Истина;
						Если КоличествоФайла = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Стр Из МассивУдаляемыхСтрок Цикл
						ТЗ_Документа.Удалить(Стр);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТЗ_Документа.Колонки.Найти("КоличествоУпаковок") = Неопределено Тогда
		КоличествоУпаковок = ТЗ_Документа.ВыгрузитьКолонку("Количество");
		ТЗ_Документа.ЗагрузитьКолонку(КоличествоУпаковок, "КоличествоУпаковок");
	КонецЕсли;
	
	Если ЭтоТабличнаяЧасть Тогда 
		ДокОбъект[ИмяТабличнойЧасти].Загрузить(ТЗ_Документа);
	Иначе
		ЗаполняемыеРеквизиты = "Серия, Количество, КоличествоУпаковок";
		
		Если ЕстьСправкиБ Тогда 
			ТЗ_Документа.Колонки.грЧастьСправкиБ.Имя = "ЧастьСправкиБ";
			
			ЗаполняемыеРеквизиты = ЗаполняемыеРеквизиты + ", ЧастьСправкиБ";
		КонецЕсли;
		
		Для Каждого Стр Из ТЗ_Документа Цикл 
			СтрокаФакт = Стр.СтрокаФакт.ПолучитьОбъект();
			СтрокаПлан = Стр.СтрокаПлан.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(СтрокаФакт, Стр, ЗаполняемыеРеквизиты);
			ЗаполнитьЗначенияСвойств(СтрокаПлан, Стр, ЗаполняемыеРеквизиты, "Количество");
			
			СтрокаПлан.КоличествоПлановое = Стр.Количество;
			
			СтрокаФакт.ОбменДанными.Загрузка = Истина;
			СтрокаПлан.ОбменДанными.Загрузка = Истина;
			
			СтрокаФакт.Записать();
			СтрокаПлан.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Gradum Богданов Е.П 03.04.2020 ++
Функция ПолучитьТаблицуДокументовСтрокДляЗаполненияСерийИСправокБ(ДокументВладелец, ДопУсловиеОтбора = Неопределено) Экспорт
	
	ИмяСтроковогоДокумента = грСтроковаяМодельДокументовКлиентСервер.ИмяСтроковогоДокумента(ДокументВладелец);
	Если ИмяСтроковогоДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекДокументыСтроки.Вид КАК Вид,
	|	ТекДокументыСтроки.ИдСтроки КАК ИдСтроки,
	|	ТекДокументыСтроки.ИдПлановойСтроки КАК ИдПлановойСтроки,
	|	ТекДокументыСтроки.ДокументСтрока КАК ДокументСтрока
	|ПОМЕСТИТЬ ВтТекСтроки
	|ИЗ
	|	РегистрСведений.грТекущиеДокументыСтроки КАК ТекДокументыСтроки
	|ГДЕ
	|	ТекДокументыСтроки.ДокументВладелец = &ДокументВладелец
	|	И &ДопОтбор
	|";
	
	Запрос.УстановитьПараметр("ДокументВладелец", ДокументВладелец);
	Запрос.УстановитьПараметр("ДопОтбор"		, Истина);
	
	Если ДопУсловиеОтбора <> Неопределено
		И ДопУсловиеОтбора.Свойство("ТекстУсловия") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", ДопУсловиеОтбора.ТекстУсловия);
		Для каждого КлючЗначение Из ДопУсловиеОтбора.Параметры Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекДокументыСтроки.ДокументСтрока",
						"ВЫРАЗИТЬ(ТекДокументыСтроки.ДокументСтрока КАК Документ." + ИмяСтроковогоДокумента + ")");

	Запрос.Выполнить();
	
	Если ДопУсловиеОтбора <> Неопределено 
		И ДопУсловиеОтбора.Свойство("ТолькоПоВидуДокумента") Тогда
		Запрос.УстановитьПараметр("Вид", ДопУсловиеОтбора.Вид);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВтТекСтроки.ДокументСтрока.SKU КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока)
		|			ТОГДА ВтТекСтроки.ДокументСтрока
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтрокаПлан,
		|	ВЫБОР
		|		КОГДА &Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ВтТекСтроки.ДокументСтрока
		|	КОНЕЦ КАК СтрокаФакт,
		|	ВЫБОР
		|		КОГДА &Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока)
		|			ТОГДА ВтТекСтроки.ДокументСтрока.КоличествоПлановое
		|		ИНАЧЕ ВтТекСтроки.ДокументСтрока.Количество
		|	КОНЕЦ КАК Количество,
		|	ВтТекСтроки.ДокументСтрока.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЕСТЬNULL(ВтТекСтроки.ДокументСтрока.Серия, ЕСТЬNULL(ВтТекСтроки.ДокументСтрока.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.))) КАК Серия,
		|	ЕСТЬNULL(ВтТекСтроки.ДокументСтрока.ЧастьСправкиБ, ЕСТЬNULL(ВтТекСтроки.ДокументСтрока.ЧастьСправкиБ, ЗНАЧЕНИЕ(Справочник.грЧастиСправок2ЕГАИС.))) КАК грЧастьСправкиБ
		|ИЗ
		|	ВтТекСтроки КАК ВтТекСтроки
		|ГДЕ
		|	ВтТекСтроки.Вид = &Вид";

	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзПлановыеСтроки.ДокументСтрока.SKU КАК Номенклатура,
		|	ВзПлановыеСтроки.ДокументСтрока КАК СтрокаПлан,
		|	ВзФактическиеСтроки.ДокументСтрока КАК СтрокаФакт,
		|	ЕСТЬNULL(ВзПлановыеСтроки.ДокументСтрока.КоличествоПлановое, ЕСТЬNULL(ВзФактическиеСтроки.ДокументСтрока.Количество, 0)) КАК Количество,
		|	ВзПлановыеСтроки.ДокументСтрока.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЕСТЬNULL(ВзПлановыеСтроки.ДокументСтрока.Серия, ЕСТЬNULL(ВзФактическиеСтроки.ДокументСтрока.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.))) КАК Серия,
		|	ЕСТЬNULL(ВзПлановыеСтроки.ДокументСтрока.ЧастьСправкиБ, ЕСТЬNULL(ВзФактическиеСтроки.ДокументСтрока.ЧастьСправкиБ, ЗНАЧЕНИЕ(Справочник.грЧастиСправок2ЕГАИС.))) КАК грЧастьСправкиБ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтТекСтроки.ДокументСтрока КАК ДокументСтрока,
		|		ВтТекСтроки.ИдСтроки КАК ИдСтроки
		|	ИЗ
		|		ВтТекСтроки КАК ВтТекСтроки
		|	ГДЕ
		|		ВтТекСтроки.Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока)) КАК ВзПлановыеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВтТекСтроки.ДокументСтрока КАК ДокументСтрока,
		|			ВтТекСтроки.ИдПлановойСтроки КАК ИдПлановойСтроки
		|		ИЗ
		|			ВтТекСтроки КАК ВтТекСтроки
		|		ГДЕ
		|			ВтТекСтроки.Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ФактическаяСтрока)) КАК ВзФактическиеСтроки
		|		ПО ВзПлановыеСтроки.ИдСтроки = ВзФактическиеСтроки.ИдПлановойСтроки";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	//Старый механизм - пока оставим без изменений
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ВЫРАЗИТЬ(грТаблицаПереходныхКлючейERP.ОбъектERP КАК Документ.&ИмяДокументаСтроки) КАК СтрокаЗаказа,
	//|	ДокументСтроки.SKU КАК SKU,
	//|	ДокументСтроки.Вид КАК Вид
	//|ПОМЕСТИТЬ ВТ_СтрокиИзТПК
	//|ИЗ
	//|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК грТаблицаПереходныхКлючейERP
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.&ИмяДокументаСтроки КАК ДокументСтроки
	//|		ПО грТаблицаПереходныхКлючейERP.ОбъектERP = ДокументСтроки.Ссылка
	//|			И (грТаблицаПереходныхКлючейERP.ИдентификаторОбъекта = &ИдентификаторОбъекта)
	//|			И (грТаблицаПереходныхКлючейERP.ОбъектERP ССЫЛКА Документ.&ИмяДокументаСтроки)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа КАК СтрокаФакт,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.SKU КАК СтрокаЗаказаSKU,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.Серия КАК СтрокаЗаказаСерия,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.ЧастьСправкиБ КАК СтрокаЗаказаЧастьСправкиБ,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.Количество КАК СтрокаЗаказаКоличество,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.КоличествоУпаковок КАК КоличествоУпаковок,
	//|	ЗНАЧЕНИЕ(Документ.&ИмяДокументаСтроки.ПустаяСсылка) КАК СтрокаПлан
	//|ПОМЕСТИТЬ ВТ_ДанныеДокументовСтрок
	//|ИЗ
	//|	ВТ_СтрокиИзТПК КАК ВТ_СтрокиИзТПК
	//|ГДЕ
	//|	ВТ_СтрокиИзТПК.Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ФактическаяСтрока)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ЗНАЧЕНИЕ(Документ.&ИмяДокументаСтроки.ПустаяСсылка),
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.SKU,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.Серия,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.ЧастьСправкиБ,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.КоличествоПлановое,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа.КоличествоУпаковок,
	//|	ВТ_СтрокиИзТПК.СтрокаЗаказа
	//|ИЗ
	//|	ВТ_СтрокиИзТПК КАК ВТ_СтрокиИзТПК
	//|ГДЕ
	//|	ВТ_СтрокиИзТПК.Вид = ЗНАЧЕНИЕ(Перечисление.грВидыДокументовСтрок.ПлановаяСтрока)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	МАКСИМУМ(ВТ_ДанныеДокументовСтрок.СтрокаФакт) КАК СтрокаФакт,
	//|	МАКСИМУМ(ВТ_ДанныеДокументовСтрок.СтрокаПлан) КАК СтрокаПлан,
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаSKU КАК Номенклатура,
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаСерия КАК Серия,
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаЧастьСправкиБ КАК грЧастьСправкиБ,
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаКоличество КАК Количество,
	//|	ВТ_ДанныеДокументовСтрок.КоличествоУпаковок КАК КоличествоУпаковок
	//|ИЗ
	//|	ВТ_ДанныеДокументовСтрок КАК ВТ_ДанныеДокументовСтрок
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаSKU,
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаСерия,
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаЧастьСправкиБ,
	//|	ВТ_ДанныеДокументовСтрок.СтрокаЗаказаКоличество,
	//|	ВТ_ДанныеДокументовСтрок.КоличествоУпаковок";
	//
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокументаСтроки", ИмяДокументаСтроки);
	
	//Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
//Gradum Богданов Е.П 03.04.2020 --

//Gradum Богданов Е.П 27.03.2020 ++
// Процедура - Заполнить части справок 2 ЕГАИС
// Выполняет заполнение колонки "грЧастьСправки2ЕГАИС" в таблице значений, переданной в параметре "ТЗ_Товары"
//	Для функционирования процедуры нужно чтобы в "ТЗ_Товары" были колонки:
// - "Серия" - содержащая ссылку на серию номенклатуры
// - "НомерЧастиСправки2ЕГАИС" в которую передаем значение поля части справки Б из XML пакета
// Параметры:
//  ТЗ_Товары	 - ТаблицаЗначений - Заполненная таблица значений "Товары" по обработанному XML пакету
//
Процедура ЗаполнитьЧастиСправок2ЕГАИС(ТЗ_Товары, СостояниеСообщения) Экспорт
	
	Если ТЗ_Товары.Колонки.Найти("ТипПродукции") = Неопределено Тогда 
		ТЗ_Товары.Колонки.Добавить("ТипПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ГрВидУчетаПродукции"));
	КонецЕсли;
	
	// Датареон, Новиков, 19.06.2020 -->
	//Для каждого СтрокаТЗ Из ТЗ_Товары Цикл
	//	Попытка
	//		ЗаблокироватьКлючиЭлементов(,,,СтрокаТЗ.Справка2ЕГАИС, РежимБлокировкиДанных.Разделяемый);
	//	Исключение
	//		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
	//		ВызватьИсключение;
	//	КонецПопытки;
	//КонецЦикла;
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Справки2ЕГАИС");
		ЭлементБлокировки.ИсточникДанных = ТЗ_Товары;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Справка2ЕГАИС");
		Блокировка.Заблокировать();
	Исключение
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		ВызватьИсключение;
	КонецПопытки;
	
	
	// <-- Датареон, Новиков, 19.06.2020
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ_Товары);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Серия КАК Серия,
	|	ТЗ.Справка2ЕГАИС КАК Справка2ЕГАИС,
	|	ТЗ.ТипПродукции КАК ТипПродукции,
	|	ТЗ.Количество КАК Количество
	|ПОМЕСТИТЬ втТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТЗ.Номенклатура КАК Номенклатура,
	|	втТЗ.Серия КАК Серия,
	|	втТЗ.Справка2ЕГАИС КАК Справка2ЕГАИС,
	|	втТЗ.ТипПродукции КАК ТипПродукции,
	|	втТЗ.Количество КАК Количество,
	|	МАКСИМУМ(ЕстьNULL(грЧастиСправок2ЕГАИС.Ссылка, Значение(Справочник.грЧастиСправок2ЕГАИС.ПустаяСсылка))) КАК грЧастьСправкиБ
	|ИЗ
	|	втТЗ КАК втТЗ
	|		Левое СОЕДИНЕНИЕ Справочник.грЧастиСправок2ЕГАИС КАК грЧастиСправок2ЕГАИС
	|		ПО втТЗ.Серия = грЧастиСправок2ЕГАИС.Владелец
	|			И втТЗ.Справка2ЕГАИС = грЧастиСправок2ЕГАИС.Справка2
	|
	|СГРУППИРОВАТЬ ПО
	|	втТЗ.Номенклатура,
	|	втТЗ.Серия,
	|	втТЗ.Справка2ЕГАИС,
	|	втТЗ.ТипПродукции,
	|	втТЗ.Количество";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		ТЗ_Товары.Очистить();
		ТЗ_Товары.Колонки.Добавить("грЧастьСправкиБ", Новый ОписаниеТипов("СправочникСсылка.грЧастиСправок2ЕГАИС"));
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ТЗ_Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.грЧастьСправкиБ) Тогда 
				
				// Датареон, Новиков, 19.06.2020 -->
				//Попытка
				//	ЗаблокироватьКлючиЭлементов(,,,Выборка.Справка2ЕГАИС);
				//Исключение
				//	СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
				//	ВызватьИсключение;
				//КонецПопытки;
				// <-- Датареон, Новиков, 19.06.2020
				
				ЧастьСправки = Справочники.грЧастиСправок2ЕГАИС.СоздатьЭлемент();
				
				ЧастьСправки.Наименование = Выборка.Справка2ЕГАИС.Наименование;
				ЧастьСправки.Владелец 	  = Выборка.Серия;
				ЧастьСправки.Справка2 	  = Выборка.Справка2ЕГАИС;
				ЧастьСправки.ТипПродукции = Выборка.ТипПродукции;
				
				ЧастьСправки.Записать();
				
				НоваяСтрока.грЧастьСправкиБ = ЧастьСправки.Ссылка;
			ИначеЕсли Не (Выборка.Справка2ЕГАИС.Наименование = Выборка.грЧастьСправкиБ.Наименование
							И Выборка.грЧастьСправкиБ.ТипПродукции = Выборка.ТипПродукции) Тогда 
							
				ЧастьСправки = Выборка.грЧастьСправкиБ.ПолучитьОбъект();
				ЧастьСправки.Наименование = Выборка.Справка2ЕГАИС.Наименование;
				ЧастьСправки.ТипПродукции = Выборка.ТипПродукции;
				ЧастьСправки.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТЗ_Товары.Колонки.Удалить("Справка2ЕГАИС");
	ТЗ_Товары.Колонки.Удалить("ТипПродукции");

КонецПроцедуры
//Gradum Богданов Е.П 27.03.2020 --

//Gradum Богданов Е.П 30.03.2020 ++
Процедура ЗаполнитьСерииИСправкиБПоОснованию(ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДополнительныеПараметры.ДокументОснование.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Корректировка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК Корректировка
	|ГДЕ
	|	Корректировка.ДокументОснование = &ДокументОснование
	|	И Корректировка.ПометкаУдаления = ЛОЖЬ";
	
	// ++ Градум, Шутенко Д.И., Задача № 18629 , 02.12.2020 
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КорректировкаПриобретения", "КорректировкаРеализации");
	//КонецЕсли;
	Если ТипЗнч(ДополнительныеПараметры.ДокументОснование.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(ДополнительныеПараметры.ДокументОснование.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КорректировкаПриобретения", "КорректировкаРеализации");
	КонецЕсли;
	// -- Градум, Шутенко Д.И., Задача № 18629 , 02.12.2020 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Корректировка = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого Стр Из ДополнительныеПараметры.ДокументОснование.Товары Цикл 
				СтруктураДляПоиска = Новый Структура("Номенклатура, грКоличествоДоКорректировки", Стр.Номенклатура, Стр.Количество);
				
				НайденныеСтроки = Корректировка.Товары.НайтиСтроки(СтруктураДляПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Ит = 0;
					Пока Ит <= НайденныеСтроки.Количество() - 1 И Не НайденныеСтроки[Ит].Количество = НайденныеСтроки[Ит].грКоличествоДоКорректировки Цикл 
						Ит = Ит + 1;
					КонецЦикла;
					
					Если Ит < НайденныеСтроки.Количество() Тогда 
						ЗаполнитьЗначенияСвойств(НайденныеСтроки[Ит], Стр, "Серия, грЧастьСправкиБ");
					КонецЕсли;
				КонецЕсли; 
				
			КонецЦикла;
			
			//++ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617 
			Если Корректировка.грПроведенВременная
				И Не Корректировка.ПометкаУдаления Тогда 
				ДополнительныеПараметры.СписокДокументов_ОбработкаПроведения.Добавить(Корректировка);
			КонецЕсли;	
			Если Не Корректировка.ЭтоНовый() Тогда 
				ОбменДаннымиСервер.УдалитьДвиженияУДокумента(Корректировка);
			КонецЕсли;	
			Корректировка.Проведен = Ложь;
			//--ОтложенноеПроведениеДокументов. Градум, Шутенко Д.И., Задача № 18617
			
			Корректировка.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина); // ++ Градум, Шутенко Д.И., Задача № 18629 , 02.12.2020 
			Корректировка.ОбменДанными.Загрузка = Истина;
			Корректировка.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//Gradum Богданов Е.П 30.03.2020 --

//GRADUM + Вараксин А.В. 24.04.2020 (10845)
Процедура УстановитьСерию(СтрокаТаблицы, СостояниеСообщения) Экспорт
	
	Попытка
		ЗаблокироватьКлючиЭлементов(,,,СтрокаТаблицы.Номенклатура, РежимБлокировкиДанных.Разделяемый);
		ЗаблокироватьКлючиЭлементов(,,,СтрокаТаблицы.ЗаказПоставщику, РежимБлокировкиДанных.Разделяемый);
	Исключение
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.грНоменклатура = &Номенклатура
	|	И СерииНоменклатуры.грЗаказПоставщику = &Заказ
	|	И СерииНоменклатуры.грТехническийЭлемент = ИСТИНА"
	;
	
	Запрос.УстановитьПараметр("Номенклатура",СтрокаТаблицы.Номенклатура);
	Запрос.УстановитьПараметр("Заказ",СтрокаТаблицы.ЗаказПоставщику);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Серия = Выборка.Серия;
	Иначе	
		Попытка
			ЗаблокироватьКлючиЭлементов(,,,СтрокаТаблицы.Номенклатура);
			ЗаблокироватьКлючиЭлементов(,,,СтрокаТаблицы.ЗаказПоставщику);
		Исключение
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
			ВызватьИсключение;
		КонецПопытки;
		
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НоваяСерия.грНоменклатура = СтрокаТаблицы.Номенклатура;
		НоваяСерия.грЗаказПоставщику = СтрокаТаблицы.ЗаказПоставщику;
		НоваяСерия.грТехническийЭлемент = Истина;
		НоваяСерия.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСерия.грНоменклатура, "ВидНоменклатуры");
		НоваяСерия.Наименование = СокрЛП(СтрокаТаблицы.ЗаказПоставщику) + " " + СокрЛП(НоваяСерия.грНоменклатура);
		НоваяСерия.Записать();
		Серия = НоваяСерия.Ссылка;
		
	КонецЕсли;	
	СтрокаТаблицы.Серия = Серия;
	
КонецПроцедуры
//GRADUM - Вараксин А.В. 24.04.2020 (10845)

Функция ПараметрыСвязиСтроковыхДокументов(ДокументВладелец, НеФормироватьПлановые, НеФормироватьФактические)

	ПлановаяФиктивнаяДокументСтрока = грСтроковаяМодельДокументов.ПлановаяФиктивнаяДокументСтрока(
		ДокументВладелец, Новый Структура("ВариантОтображенияДерева, РежимОбменДанными", 
		Перечисления.грВариантыОтображенияДереваСтрок.ФактическиеСтроки, Истина));
	
	ПараметрыСвязиСтрок = Новый Структура;
	ПараметрыСвязиСтрок.Вставить("ПривязатьПлановуюСтрокуКФактической"	, Ложь);
	ПараметрыСвязиСтрок.Вставить("ПривязатьФактическуюСтрокуКПлановой"	, Ложь);
	ПараметрыСвязиСтрок.Вставить("ЭтоЗаказДКС"							, ТипЗнч(ДокументВладелец.Ссылка) = Тип("ДокументСсылка.грЗаказДКС"));
	ПараметрыСвязиСтрок.Вставить("ЭтоЗаказПоставщику"					, ТипЗнч(ДокументВладелец.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику"));
	ПараметрыСвязиСтрок.Вставить("ПлановаяФиктивнаяДокументСтрока"		, ПлановаяФиктивнаяДокументСтрока);
	
	Если ПараметрыСвязиСтрок.ЭтоЗаказПоставщику
		Или ПараметрыСвязиСтрок.ЭтоЗаказДКС Тогда
		
		Если НеФормироватьПлановые = Истина И НеФормироватьФактические = Ложь Тогда
			
			ПараметрыСвязиСтрок.ПривязатьФактическуюСтрокуКПлановой	= Истина;
			ВидДокументаСтрокиДляСвязи								= Перечисления.грВидыДокументовСтрок.ПлановаяСтрока;
			
		ИначеЕсли НеФормироватьПлановые = Ложь И НеФормироватьФактические = Истина Тогда
			
			ПараметрыСвязиСтрок.ПривязатьПлановуюСтрокуКФактической	= Истина;
			ВидДокументаСтрокиДляСвязи 								= Перечисления.грВидыДокументовСтрок.ФактическаяСтрока;
			
		КонецЕсли;
		
		Если ПараметрыСвязиСтрок.ПривязатьПлановуюСтрокуКФактической
			Или ПараметрыСвязиСтрок.ПривязатьФактическуюСтрокуКПлановой Тогда
			
			ПараметрыСтроковыхДокументов = грСтроковаяМодельДокументовКлиентСервер.ДополнительныеПараметры();
			ПараметрыСтроковыхДокументов.Вставить("ПолучитьТекущиеДокументыСтроки");
			
			//Отбор подчиненных строк Заказа Клиента
			ТаблицаДокументовСтрокДляСвязи = грСтроковаяМодельДокументов.ТаблицаСтроковыхДокументовПоВиду(
				ДокументВладелец,
				ВидДокументаСтрокиДляСвязи,
				ПараметрыСтроковыхДокументов);
			//Конец Отбор подчиненных строк Заказа Клиента
			
			ПараметрыСвязиСтрок.Вставить("ТаблицаДокументовСтрокДляСвязи", ТаблицаДокументовСтрокДляСвязи);
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПараметрыСвязиСтрок;
	
КонецФункции // ПараметрыСвязиСтроковыхДокументов()

Функция ДополнительнаяСтрокаСвязи(ОсновнаяСтрокаСвязи, Параметры)
	
	ДополнительнаяСтрокаСвязи = Неопределено;
	
	НайденныеСтроки = Параметры.ТаблицаДокументовСтрокДляСвязи.НайтиСтроки(Параметры.Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		ДополнительнаяСтрокаСвязи = НайденныеСтроки[0];
		
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		
		ДополнительнаяСтрокаСвязи = НайденныеСтроки[0];
		
		ОтборПоКоличеству = Новый Структура;
		Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
			ОтборПоКоличеству.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		КонецЦикла;
		
		Если Параметры.ПривязатьФактическуюСтрокуКПлановой Тогда
			ОтборПоКоличеству.Вставить("КоличествоПлановое", ОсновнаяСтрокаСвязи.Количество);
		ИначеЕсли Параметры.ПривязатьПлановуюСтрокуКФактической Тогда
			ОтборПоКоличеству.Вставить("Количество", ОсновнаяСтрокаСвязи.КоличествоПлановое);
		КонецЕсли;
		
		НайденныеСтрокиПоКоличеству = Параметры.ТаблицаДокументовСтрокДляСвязи.НайтиСтроки(ОтборПоКоличеству);
		Если НайденныеСтрокиПоКоличеству.Количество()> 0 Тогда
			ДополнительнаяСтрокаСвязи = НайденныеСтрокиПоКоличеству[0];
		КонецЕсли;
		
	КонецЕсли;

	Возврат ДополнительнаяСтрокаСвязи;
	
КонецФункции // ДополнительнаяСтрокаСвязи()

Процедура ВыполнитьСвязьСтроковыхДокументов(ОсновнаяСтрокаСвязи, ПараметрыСвязи)
	
	ДополнительнаяСтрокаСвязи = Неопределено;
	
	ПривязатьПлановуюСтрокуКФактической = Неопределено;
	ПараметрыСвязи.Свойство("ПривязатьПлановуюСтрокуКФактической", ПривязатьПлановуюСтрокуКФактической);
	
	ПривязатьФактическуюСтрокуКПлановой = Неопределено;
	ПараметрыСвязи.Свойство("ПривязатьФактическуюСтрокуКПлановой", ПривязатьФактическуюСтрокуКПлановой);
	
	Отбор = Новый Структура;
	Отбор.Вставить("SKU");
	
	Если ПараметрыСвязи.ЭтоЗаказДКС Тогда
		
		Отбор.Вставить("РаспоряжениеНаДоставку");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отбор, ОсновнаяСтрокаСвязи);
	
	ПараметрыДополнительнойСтрокиСвязи = Новый Структура;
	ПараметрыДополнительнойСтрокиСвязи.Вставить("ПривязатьПлановуюСтрокуКФактической"	, ПривязатьПлановуюСтрокуКФактической);
	ПараметрыДополнительнойСтрокиСвязи.Вставить("ПривязатьФактическуюСтрокуКПлановой"	, ПривязатьФактическуюСтрокуКПлановой);
	ПараметрыДополнительнойСтрокиСвязи.Вставить("ТаблицаДокументовСтрокДляСвязи"		, ПараметрыСвязи.ТаблицаДокументовСтрокДляСвязи);
	ПараметрыДополнительнойСтрокиСвязи.Вставить("Отбор"									, Отбор);
	
	ДополнительнаяСтрокаСвязи = ДополнительнаяСтрокаСвязи(
		ОсновнаяСтрокаСвязи,
		ПараметрыДополнительнойСтрокиСвязи);
		
	СтрокиКУдалению = Новый Массив;
		
	Если ПривязатьПлановуюСтрокуКФактической Тогда
		
		Если Не ДополнительнаяСтрокаСвязи = Неопределено Тогда
			
			СтрокиКУдалению.Добавить(ДополнительнаяСтрокаСвязи);
			
			//Привязка к плановой
			ДокументСтрокаОбъект = ДополнительнаяСтрокаСвязи.Регистратор.ПолучитьОбъект();
			ДокументСтрокаОбъект.ИдПлановойСтроки = ОсновнаяСтрокаСвязи.ИдПлановойСтроки;
			ДокументСтрокаОбъект.ОбменДанными.Загрузка = Истина;
			ДокументСтрокаОбъект.Записать();
			//Конец Привязка к плановой
			
			МенеджерЗаписи = РегистрыСведений.грТекущиеДокументыСтроки.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДокументВладелец	= ДополнительнаяСтрокаСвязи.ДокументВладелец;
			МенеджерЗаписи.Вид				= ДополнительнаяСтрокаСвязи.Вид;
			МенеджерЗаписи.ИдСтроки			= ДополнительнаяСтрокаСвязи.ИдСтроки;
			МенеджерЗаписи.ИдПлановойСтроки	= ДополнительнаяСтрокаСвязи.ИдПлановойСтроки;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				
				МенеджерЗаписи.ИдПлановойСтроки = ОсновнаяСтрокаСвязи.ИдПлановойСтроки;
				МенеджерЗаписи.Записать();
			
			КонецЕсли;
			
		КонецЕсли; 
		
	ИначеЕсли ПривязатьФактическуюСтрокуКПлановой Тогда
		
		Если Не ДополнительнаяСтрокаСвязи = Неопределено Тогда
			
			СтрокиКУдалению.Добавить(ДополнительнаяСтрокаСвязи);
			
			ОсновнаяСтрокаСвязи.ИдПлановойСтроки = ДополнительнаяСтрокаСвязи.ИдСтроки;
			
		Иначе
			
			ОсновнаяСтрокаСвязи.ИдПлановойСтроки = ПараметрыСвязи.ПлановаяФиктивнаяДокументСтрока.ИдСтроки;
			
		КонецЕсли;
		
	КонецЕсли;

	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ПараметрыСвязи.ТаблицаДокументовСтрокДляСвязи.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
КонецПроцедуры

Процедура СоздатьИзменитьДокументыСтроки(ДокументВладелец, РезультатЗапроса, КлючДляРегистра, Отправитель, АктуальныеСтроки = Истина, ДопУсловиеОтбора = Неопределено) Экспорт
	
	//+++ GRADUM, Теплоухов А.В. 2021_10_13 Задача № ERP-1687{ Функционал не актуален
	//Для формирования универсальных строк требуется использовать грСтроковаяМодельУниверсальная.СформироватьСтроковыеДокументы
	//// +++Градум; <Болдинов> (23.08.2021); №.000522535
	//Если грСтроковаяМодельУниверсальнаяПовтИсп.ИспользоватьИнтерфейсУниверсальнойСтроки() Тогда
	//	СоздатьИзменитьДокументыУниверсальныхСтрок(ДокументВладелец, РезультатЗапроса, КлючДляРегистра, Отправитель, АктуальныеСтроки = Истина, ДопУсловиеОтбора = Неопределено);
	//КонецЕсли;
	//// ---Градум; <Болдинов> (23.08.2021); №.000522535
	//--- GRADUM, Теплоухов А.В. 2021_10_13 Задача № ERP-1687}

	СоответствиеДокументовСтрок = ПолучитьСоответствиеДокументовСтрок();
	ТипДокументаВладельца = ТипЗнч(ДокументВладелец);
	ИмяДокументаСтроки = СоответствиеДокументовСтрок.Получить(ТипДокументаВладельца);
	
	Если ИмяДокументаСтроки <> Неопределено Тогда
		
		//+++ GRADUM, Теплоухов А.В. 2020_10_23 Задача № 17649{
		Если ДокументВладелец.ДополнительныеСвойства.Свойство("НеФормироватьФактические") Тогда
			НеФормироватьФактические = ДокументВладелец.ДополнительныеСвойства.НеФормироватьФактические;
		Иначе
			НеФормироватьФактические = Ложь;
		КонецЕсли;
		
		Если ДокументВладелец.ДополнительныеСвойства.Свойство("НеФормироватьПлановые") Тогда
			НеФормироватьПлановые = ДокументВладелец.ДополнительныеСвойства.НеФормироватьПлановые;
		Иначе
			НеФормироватьПлановые = Ложь;
		КонецЕсли;
		//--- GRADUM, Теплоухов А.В. 2020_10_23 Задача № 17649}
		
		Если ДокументВладелец.ДополнительныеСвойства.Свойство("ИспользоватьИдСтрокиФакт") Тогда
			ИспользоватьИдСтрокиФакт = ДокументВладелец.ДополнительныеСвойства.ИспользоватьИдСтрокиФакт;
		Иначе
			ИспользоватьИдСтрокиФакт = Ложь;
		КонецЕсли;
		
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(ДокументВладелец.Ссылка));
		ТаблицаНоменклатуры = Новый ТаблицаЗначений;
		ТаблицаТекущиеДокументыСтроки = Новый ТаблицаЗначений;		
		ТаблицаТекущиеДокументыСтроки.Колонки.Добавить("ДокументВладелец", Новый ОписаниеТипов(Массив));
		ТаблицаТекущиеДокументыСтроки.Колонки.Добавить("ИдСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		Массив.Очистить();
		Массив.Добавить(Тип("ДокументСсылка." + ИмяДокументаСтроки));
		ТаблицаТекущиеДокументыСтроки.Колонки.Добавить("ДокументСтрока", Новый ОписаниеТипов(Массив));
		ТаблицаТекущиеДокументыСтроки.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПеречислениеСсылка.грВидыДокументовСтрок"));
		ТаблицаТекущиеДокументыСтроки.Колонки.Добавить("ИдПлановойСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		//Gradum Богданов Е.П 04.03.2020 --
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Если ДокументВладелец.ЭтоНовый() Тогда
				СсылкаНаВладельца = ДокументВладелец.ПолучитьСсылкуНового();
				Если Не ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
					ДокументВладелец.УстановитьСсылкуНового(Документы[ДокументВладелец.Ссылка.Метаданные().Имя].ПолучитьСсылку(Новый УникальныйИдентификатор));//ПолучитьСсылкуНового();
					СсылкаНаВладельца = ДокументВладелец.ПолучитьСсылкуНового();
				КонецЕсли;
			Иначе
				СсылкаНаВладельца = ДокументВладелец.Ссылка;
			КонецЕсли;
			
			// ++ Градум, Шутенко Д.И., Задача № 17835 , 02.11.2020 
			ПараметрыСвязиСтроковыхДокументов = ПараметрыСвязиСтроковыхДокументов(
				СсылкаНаВладельца,
				НеФормироватьПлановые,
				НеФормироватьФактические);
			// -- Градум, Шутенко Д.И., Задача № 17835 , 02.11.2020 
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
	
				
				Если Не ЗначениеЗаполнено(Выборка.СтрокаФакт) Тогда
					
					Если ИспользоватьИдСтрокиФакт Тогда
						ИдентификаторСтроки = Выборка.ИдСтрокиФакт;
					Иначе
						ИдентификаторСтроки = Новый УникальныйИдентификатор;
					КонецЕсли;
					
					ДокСтрока = Документы[ИмяДокументаСтроки].СоздатьДокумент();
					ДокСтрока.УстановитьСсылкуНового(Документы[ИмяДокументаСтроки].ПолучитьСсылку(ИдентификаторСтроки));
					
				Иначе
					ДокСтрока = Выборка.СтрокаФакт.ПолучитьОбъект();
					ИдентификаторСтроки = ДокСтрока.Ссылка.УникальныйИдентификатор();
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.СтрокаПлан) Тогда
					ДокСтрокаПлан = Документы[ИмяДокументаСтроки].СоздатьДокумент();
					ИдентификаторСтрокиПлан = Новый УникальныйИдентификатор;
					ДокСтрокаПлан.УстановитьСсылкуНового(Документы[ИмяДокументаСтроки].ПолучитьСсылку(ИдентификаторСтрокиПлан));
				Иначе						
					ДокСтрокаПлан 			= Выборка.СтрокаПлан.ПолучитьОбъект();
					ИдентификаторСтрокиПлан = ДокСтрокаПлан.Ссылка.УникальныйИдентификатор();
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДокСтрока.ИдСтроки)
					И Не НеФормироватьФактические Тогда 
					ДокСтрока.ИдСтроки = ИдентификаторСтроки;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДокСтрокаПлан.ИдСтроки)
					И Не НеФормироватьПлановые Тогда 
					ДокСтрокаПлан.ИдСтроки = ИдентификаторСтрокиПлан;
				КонецЕсли;
				
				ДокСтрокаПлан.Вид = Перечисления.грВидыДокументовСтрок.ПлановаяСтрока;
				
				ДокСтрока.ИдПлановойСтроки 		= ?(НеФормироватьПлановые, "", ИдентификаторСтрокиПлан);
				ДокСтрокаПлан.ИдПлановойСтроки 	= ИдентификаторСтрокиПлан;
				
				ЗаполнитьЗначенияСвойств(ДокСтрока, ДокументВладелец,, "Номер");
				ЗаполнитьЗначенияСвойств(ДокСтрока, Выборка);
				
				ДокСтрока.Вид		= Перечисления.грВидыДокументовСтрок.ФактическаяСтрока;
				
				ЗаполнитьЗначенияСвойств(ДокСтрокаПлан, ДокСтрока,, "Номер, ИдСтроки, ИдПлановойСтроки, Вид, Количество");
				ДокСтрокаПлан.КоличествоПлановое = ДокСтрока.Количество;
				//+++ GRADUM, Теплоухов А.В. 2020_11_13 Задача № 18133{
				ДокСтрокаПлан.Количество = 0;
				//--- GRADUM, Теплоухов А.В. 2020_11_13 Задача № 18133}
				
				ДокСтрока.ДокументВладелец = СсылкаНаВладельца;
				ДокСтрокаПлан.ДокументВладелец = СсылкаНаВладельца;
				
				// ++ Градум, Шутенко Д.И., Задача № 17835 , 02.11.2020 
				ОсновнаяСтрокаСвязи = Неопределено;
				Если ПараметрыСвязиСтроковыхДокументов.ПривязатьПлановуюСтрокуКФактической Тогда
					ОсновнаяСтрокаСвязи = ДокСтрокаПлан;
				ИначеЕсли ПараметрыСвязиСтроковыхДокументов.ПривязатьФактическуюСтрокуКПлановой Тогда
					ОсновнаяСтрокаСвязи = ДокСтрока;
				КонецЕсли;
				
				Если Не ОсновнаяСтрокаСвязи = Неопределено Тогда
					ВыполнитьСвязьСтроковыхДокументов(ОсновнаяСтрокаСвязи, ПараметрыСвязиСтроковыхДокументов);
				КонецЕсли;
				// -- Градум, Шутенко Д.И., Задача № 17835 , 02.11.2020 
				
				Если Не НеФормироватьФактические Тогда
					ДокСтрока.ДополнительныеСвойства.Вставить("НеОбновлятьСуммовыеЗначения", Истина );
					ДокСтрока.ОбменДанными.Загрузка = Истина;
					ДокСтрока.Записать();
				КонецЕсли;
				
				Если Не НеФормироватьПлановые Тогда
					ДокСтрокаПлан.ДополнительныеСвойства.Вставить("НеОбновлятьСуммовыеЗначения", Истина );
					ДокСтрокаПлан.ОбменДанными.Загрузка = Истина;
					ДокСтрокаПлан.Записать();
				КонецЕсли;
				
				Если АктуальныеСтроки Тогда
					
					Если Не НеФормироватьФактические Тогда
						НоваяСтрока = ТаблицаТекущиеДокументыСтроки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокСтрока);
						НоваяСтрока.ДокументСтрока = ДокСтрока.Ссылка;
					КонецЕсли;
					
					Если Не НеФормироватьПлановые Тогда
						НоваяСтрока = ТаблицаТекущиеДокументыСтроки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокСтрокаПлан);
						НоваяСтрока.ДокументСтрока = ДокСтрокаПлан.Ссылка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
						
			Если АктуальныеСтроки Тогда
				Если Не ДокументВладелец.ЭтоНовый() Тогда
					РегистрыСведений.грТекущиеДокументыСтроки.ОчиститьПоДокументу(
						СсылкаНаВладельца,
						,
						Ложь,
						ДопУсловиеОтбора);
				КонецЕсли; 
				
				Для каждого Стр Из ТаблицаТекущиеДокументыСтроки Цикл
					Запись = РегистрыСведений.грТекущиеДокументыСтроки.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, Стр);
					Запись.Прочитать();
					ЗаполнитьЗначенияСвойств(Запись, Стр);
					Запись.Записать();
				КонецЦикла;
				
				Если ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.ЗаказПоставщику")
					ИЛИ ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.ЗаказКлиента")
					ИЛИ ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.грЗаказДКС")
					ИЛИ ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.грРаспоряжениеНаДоставку")
					ИЛИ ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары")
					ИЛИ ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.РасходныйОрдерНаТовары")
					ИЛИ ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.ЗаказНаПеремещение")
					ИЛИ ТипЗнч(ДокументВладелец) = Тип("ДокументОбъект.грПлановоеОбеспечение")
						Тогда
					РегистрыСведений.грСуммарныеЗначенияДокументовСтрок.ОбновитьПоДокументу(СсылкаНаВладельца);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоответствиеДокументовСтрок() Экспорт
	
	СоответствиеДокументовСтрок = Новый Соответствие;
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.ЗаказПоставщику"), "грСтрокаЗаказаПоставщику");
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.ПриходныйОрдерНаТовары"), "грСтрокаПриходногоОрдераНаТовары");
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.ЗаказНаПеремещение"), "грСтрокаЗаказаНаПеремещение");
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.ЗаказКлиента"), "грСтрокаЗаказаКлиента");
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.грЗаказДКС"), "грСтрокаЗаказаДКС");
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.грРаспоряжениеНаДоставку"), "грСтрокаРаспоряженияНаДоставку");
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.РасходныйОрдерНаТовары"), "грСтрокаРасходногоОрдераНаТовары");
	СоответствиеДокументовСтрок.Вставить(Тип("ДокументОбъект.грПлановоеОбеспечение"), "грСтрокаПлановогоОбеспечения");
	
	Возврат СоответствиеДокументовСтрок;
	
КонецФункции

// Процедура - Записать доп наименования контрагента
//
// Параметры:
//  Контрагент		 - СправочникСсылка.Контрагенты	 - Обрабатываемый контрагент
//  ДанныеАлгоритмов - Структура - Структура, содержащая различные переменные необходимые для функционирования алгоритма
//
Процедура ЗаписатьДопНаименованияКонтрагента(Контрагент, ДанныеАлгоритмов) Экспорт
	// Начало GRADUM, Буравов А.В. 06.11.2019
	СоответствиеИмен = Новый Структура;
	СоответствиеИмен.Вставить("НаименованиеЛатинское", Перечисления.грВидыНаименованийКонтрагентов.Латинское);
	СоответствиеИмен.Вставить("СокращенноеЮридическоеНаименование", Перечисления.грВидыНаименованийКонтрагентов.СокращенноеЮридическое);
	
	Для каждого Эл Из СоответствиеИмен Цикл
		Если ДанныеАлгоритмов.Свойство(Эл.Ключ) Тогда
			МенеджерЗаписи = РегистрыСведений.грДополнительныеНаименованияКонтрагентов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Контрагент = Контрагент;
			МенеджерЗаписи.ВидНаименования = Эл.Значение;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				Если Не ЗначениеЗаполнено(МенеджерЗаписи.ДополнительноеНаименование) Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеАлгоритмов[Эл.Ключ]) Тогда
				МенеджерЗаписи.Контрагент = Контрагент;
				МенеджерЗаписи.ВидНаименования = Эл.Значение;
				МенеджерЗаписи.ДополнительноеНаименование = ДанныеАлгоритмов[Эл.Ключ];
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	// Конец GRADUM, Буравов А.В. 06.11.2019
КонецПроцедуры

// Функция - Контрагент по бизнес партнеру
//
// Параметры:
//  БизнесПартнер	 - СправочникСсылка.грБизнесПартнеры	 - Бизнес-партнер по которому нужно найти контрагента
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - найденный контрагент
//
Функция КонтрагентПоБизнесПартнеру(БизнесПартнер) Экспорт
	// Начало GRADUM, Буравов А.В. 06.11.2019
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК т
	|ГДЕ
	|	т.грБизнесПартнер = &БизнесПартнер";
	Запрос.УстановитьПараметр("БизнесПартнер", БизнесПартнер);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	// Конец GRADUM, Буравов А.В. 06.11.2019
КонецФункции

// Функция для получения узла СКС по бизнес партнеру, для документов продажи.
//
// Параметры:
//	БизнесПартнер - элемент справочника Бизнес партнеры из документа
//
Функция ПолучитьСКСПоБП(БизнесПартнер, СоздатьЕслиНеНайден = Ложь, ДанныеДляСоздания = Неопределено) Экспорт
	
	НайденныйПартнер = Справочники.Партнеры.ПустаяСсылка();
	
	Если ДанныеДляСоздания = Неопределено Тогда 
		ДанныеДляСоздания = Новый Структура;
	КонецЕсли;
	
	Если СоздатьЕслиНеНайден Тогда
		
		КоличествоПопытокБлокировки = 1;
		Если ДанныеДляСоздания.Свойство("КоличествоПопытокБлокировки") Тогда 
			КоличествоПопытокБлокировки = ДанныеДляСоздания.КоличествоПопытокБлокировки;
		КонецЕсли;
		
		СчетчикПопыток = 0;
		БлокировкаУстановлена = Ложь;
		Пока СчетчикПопыток < КоличествоПопытокБлокировки Цикл
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.грБизнесПартнеры");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", БизнесПартнер);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				БлокировкаУстановлена = Истина;
				Прервать;
			Исключение
			КонецПопытки;
			СчетчикПопыток = СчетчикПопыток + 1;
		КонецЦикла;	
		
		Если НЕ БлокировкаУстановлена Тогда
			ДанныеДляСоздания.Вставить("ОшибкаБлокировки", НЕ БлокировкаУстановлена);
			Возврат НайденныйПартнер;
		КонецЕсли;
	КонецЕсли;

	ИскатьПоУровнюСКС = Истина;
	Если ДанныеДляСоздания.Свойство("ИскатьПоУровнюСКС") Тогда
		ИскатьПоУровнюСКС = ДанныеДляСоздания.ИскатьПоУровнюСКС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БП",					БизнесПартнер);
	Запрос.УстановитьПараметр("ТипУровняСКС",		Перечисления.грТипыУзловСКС.АдресОтгрузки);
	Запрос.УстановитьПараметр("ИскатьПоУровнюСКС",	ИскатьПоУровнюСКС);
	Запрос.УстановитьПараметр("ДопОтбор",			Истина);
	
	Если ИскатьПоУровнюСКС 
		И ДанныеДляСоздания <> Неопределено 
		И ДанныеДляСоздания.Свойство("грТипУровняСКС") Тогда
		Запрос.УстановитьПараметр("ТипУровняСКС", ДанныеДляСоздания.грТипУровняСКС);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.грБизнесПартнеры КАК БизнесПартнер
	|		ПО Партнеры.грЗначениеУзла = БизнесПартнер.Ссылка
	|			И (ВЫБОР
	|				КОГДА &ИскатьПоУровнюСКС
	|					ТОГДА Партнеры.грТипУровняСКС = &ТипУровняСКС
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (БизнесПартнер.Ссылка = &БП)
	|ГДЕ
	|	&ДопОтбор";
	
	Если ДанныеДляСоздания.Свойство("ДопОтбор") Тогда
		ДопУсловиеОтбора = ДанныеДляСоздания.ДопОтбор;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", ДопУсловиеОтбора.ТекстУсловия);
		Для каждого КлючЗначение Из ДопУсловиеОтбора.Параметры Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НайденныйПартнер = Выборка.Ссылка;
	ИначеЕсли СоздатьЕслиНеНайден 
		И ЗначениеЗаполнено(БизнесПартнер) 
		И ОбщегоНазначения.СсылкаСуществует(БизнесПартнер) Тогда
		
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.УстановитьНовыйКод();
		
		Партнер.Наименование	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПартнер, "Наименование");
		Партнер.Родитель		= Справочники.Партнеры.НеизвестныйПартнер;
		Партнер.грЗначениеУзла	= БизнесПартнер;
		Партнер.грТипУровняСКС	= Перечисления.грТипыУзловСКС.АдресОтгрузки;
		Партнер.грСтатус		= Перечисления.грСтатусыУзловСКС.Черновик;
		
		МетаПартнер = Партнер.Метаданные();
		
		Если ДанныеДляСоздания <> Неопределено Тогда
			Для Каждого КлючЗначение Из ДанныеДляСоздания Цикл
				Если КлючЗначение.Ключ = "Родитель"
					Или КлючЗначение.Ключ = "Наименование" 
					Или КлючЗначение.Ключ = "Код" 
					Или ОбщегоНазначения.ЕстьРеквизитОбъекта(КлючЗначение.Ключ, МетаПартнер) Тогда
					Партнер[КлючЗначение.Ключ] = КлючЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Партнер.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
		Партнер.ОбменДанными.Загрузка = Истина;
		Партнер.Записать();
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(Партнер.Ссылка);
		НайденныйПартнер = Партнер.Ссылка;
		
		//+++ GRADUM, Теплоухов А.В. 2021_05_28 Задача № 21649{
		УстановитьКлючУзлуСКС_ПоБизнесПартнеру(Партнер.Ссылка, БизнесПартнер);
		//--- GRADUM, Теплоухов А.В. 2021_05_28 Задача № 21649}
	КонецЕсли;

	Возврат НайденныйПартнер;
	
КонецФункции

//++ Градум Задворный 28.09.2020   Задача 16763  для ОтгрузкаТоваровСХранения_ERP.in  
Функция ДоговорСПоклажедателем(Организация, Контрагент, КоличествоПопытокБлокировки = 1) Экспорт
		
	РезультатПоиска = Новый Структура( "Ссылка, ОшибкаБлокировки", Неопределено, Ложь );
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоклажедателем)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		СчетчикПопыток = 0;
		БлокировкаУстановлена = Ложь;
		Пока СчетчикПопыток < КоличествоПопытокБлокировки Цикл
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ДоговорыКонтрагентов");
				ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
				ЭлементБлокировки.УстановитьЗначение("Контрагент", Контрагент);
				ЭлементБлокировки.УстановитьЗначение("ТипДоговора",Перечисления.ТипыДоговоров.СПоклажедателем);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();                                     		
				БлокировкаУстановлена = Истина;
				Прервать;
			Исключение
			КонецПопытки;
			СчетчикПопыток = СчетчикПопыток + 1;
		КонецЦикла;	
		
		Если НЕ БлокировкаУстановлена Тогда
			РезультатПоиска.ОшибкаБлокировки = Истина;
		    Возврат РезультатПоиска; 
		КонецЕсли;
				
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда					
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.Наименование = "Основной договор";
			НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем;
			НовыйДоговор.Контрагент = Контрагент;
			НовыйДоговор.Организация = Организация;
			НовыйДоговор.ОбменДанными.Загрузка = Истина;
			НовыйДоговор.Записать();     		
			РезультатПоиска.Ссылка = НовыйДоговор.Ссылка;		
		Иначе		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатПоиска.Ссылка = Выборка.Договор;    		
		КонецЕсли;
			
	Иначе	
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РезультатПоиска.Ссылка = Выборка.Договор;
		
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
//Старый текст	
	
//	Функция ДоговорСПоклажедателем(Организация, Контрагент, СостояниеСообщения) Экспорт
//	
//	Попытка
//		грОбработкаПакетовИнтеграции.ЗаблокироватьКлючиЭлементов(,,,Контрагент, РежимБлокировкиДанных.Разделяемый);
//		грОбработкаПакетовИнтеграции.ЗаблокироватьКлючиЭлементов(,,,Организация, РежимБлокировкиДанных.Разделяемый);
//	Исключение
//		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ДоговорыКонтрагентов.Ссылка КАК Договор
//	|ИЗ
//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
//	|ГДЕ
//	|	ДоговорыКонтрагентов.Организация = &Организация
//	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
//	|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоклажедателем)";
//	
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		
//		Попытка
//			грОбработкаПакетовИнтеграции.ЗаблокироватьКлючиЭлементов(,,,Контрагент,);
//			грОбработкаПакетовИнтеграции.ЗаблокироватьКлючиЭлементов(,,,Организация,);
//		Исключение
//			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
//			ВызватьИсключение;
//		КонецПопытки;
//		
//		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
//		НовыйДоговор.Наименование = "Основной договор";
//		НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем;
//		НовыйДоговор.Контрагент = Контрагент;
//		НовыйДоговор.Организация = Организация;
//		НовыйДоговор.ОбменДанными.Загрузка = Истина;
//		НовыйДоговор.Записать();
//		
//		Возврат  НовыйДоговор.Ссылка;
//		
//	Иначе
//		
//		Выборка = РезультатЗапроса.Выбрать();
//		Выборка.Следующий();
//		Возврат Выборка.Договор;
//		
//	КонецЕсли;
//	
//КонецФункции	

	
КонецФункции	
//-- Задворный 28.09.2020
//++ Градум Задворный 02.10.2020   Задача № 17019  
Функция ДоговорСКонтрагентом(Организация, Контрагент, Период, ТипДоговора, КоличествоПопытокБлокировки = 1) Экспорт
		
	РезультатПоиска = Новый Структура( "Ссылка, ОшибкаБлокировки", Неопределено, Ложь );
	
	Если ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
		СуффиксДоговора  = " с покупателем";
	Иначе
		СуффиксДоговора = "";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И (ДоговорыКонтрагентов.ДатаНачалаДействия <= &Период
	|			ИЛИ ДоговорыКонтрагентов.ДатаНачалаДействия = &ПустойПериод)
	|	И (&Период <= ДоговорыКонтрагентов.ДатаОкончанияДействия
	|			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия = &ПустойПериод)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТипДоговора",ТипДоговора);
	Запрос.УстановитьПараметр("Период"		, Период);
	Запрос.УстановитьПараметр("ПустойПериод", '00010101');
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		СчетчикПопыток = 0;
		БлокировкаУстановлена = Ложь;
		Пока СчетчикПопыток < КоличествоПопытокБлокировки Цикл
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ДоговорыКонтрагентов");
				ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
				ЭлементБлокировки.УстановитьЗначение("Контрагент", Контрагент);
				ЭлементБлокировки.УстановитьЗначение("ТипДоговора",ТипДоговора);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();                                     		
				БлокировкаУстановлена = Истина;
				Прервать;
			Исключение
			КонецПопытки;
			СчетчикПопыток = СчетчикПопыток + 1;
		КонецЦикла;	
		
		Если НЕ БлокировкаУстановлена Тогда
			РезультатПоиска.ОшибкаБлокировки = Истина;
		    Возврат РезультатПоиска; 
		КонецЕсли;
				
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда					
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.Наименование = "Договор"+СуффиксДоговора;
			НовыйДоговор.ТипДоговора = ТипДоговора;
			НовыйДоговор.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
			НовыйДоговор.Контрагент = Контрагент;
			НовыйДоговор.Организация = Организация;
			НовыйДоговор.Комментарий = "#Создан при загрузке реализации";
			НовыйДоговор.ОбменДанными.Загрузка = Истина;
			НовыйДоговор.Записать();     		
			РезультатПоиска.Ссылка = НовыйДоговор.Ссылка;		
		Иначе		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатПоиска.Ссылка = Выборка.Договор;    		
		КонецЕсли;
			
	Иначе	
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РезультатПоиска.Ссылка = Выборка.Договор;
		
	КонецЕсли;
	
	Возврат РезультатПоиска;	

	
КонецФункции	
//-- Задворный 02.10.2020

//Gradum Богданов Е.П 14.04.2020 ++
Функция ОрганизацияЛВГрупп(xdtoОбъект) Экспорт
	Результат = Ложь;
	ЛВГрупп = "   D     O001";
	
	Если РеквизитЕстьВПакете(xdtoОбъект, "Организация", Истина) Тогда 
		Если xdtoОбъект.Организация = ЛВГрупп Тогда 
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
//Gradum Богданов Е.П 14.04.2020 --
//+++ Градум; Курпяев Е.Д. ; 20.03.2020;

//GRADUM + Вараксин А.В. 14.04.2020 (10913)
Функция ПолучитьОрганизациюЕГАИС(КодОрганизации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	КлассификаторОрганизацийЕГАИС.грАктивна КАК грАктивна
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	грАктивна"
	;
	
	Запрос.УстановитьПараметр("Код", КодОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ОрганизацияЕГАИС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
//GRADUM - Вараксин А.В. 14.04.2020 (10913)

Процедура ДополнитьПриходныйОрдер(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение"
	;
	
	Запрос.УстановитьПараметр("Распоряжение", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПриходныйОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ИмяРеквизитаСклад = "СкладПолучатель";
			ИмяРеквизитаПомещение = "грПомещениеПолучатель";
			ИмяРеквизитаОтправитель = "СкладОтправитель";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			ИмяРеквизитаСклад = "Склад";
			ИмяРеквизитаПомещение = "грПомещение";
			ИмяРеквизитаОтправитель = "Партнер";
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	грСтрокаПриходногоОрдераНаТовары.Ссылка КАК Ссылка,
			|	грСтрокаПриходногоОрдераНаТовары.SKU КАК SKU
			|ПОМЕСТИТЬ ВТСтрокиОрдера
			|ИЗ
			|	Документ.грСтрокаПриходногоОрдераНаТовары КАК грСтрокаПриходногоОрдераНаТовары
			|ГДЕ
			|	грСтрокаПриходногоОрдераНаТовары.ДокументВладелец = &Ордер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	ПриобретениеТоваровУслугТовары.грКачествоТоваров КАК грКачествоТоваров
			|ПОМЕСТИТЬ ВТТоварыПриобретения
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
			|ГДЕ
			|	ПриобретениеТоваровУслугТовары.Ссылка = &Приобретение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТТоварыПриобретения.Номенклатура КАК Номенклатура,
			|	ВТСтрокиОрдера.Ссылка КАК СтрокаОрдера,
			|	ВТТоварыПриобретения.грКачествоТоваров КАК КачествоТоваров
			|ИЗ
			|	ВТТоварыПриобретения КАК ВТТоварыПриобретения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиОрдера КАК ВТСтрокиОрдера
			|		ПО ВТТоварыПриобретения.Номенклатура = ВТСтрокиОрдера.SKU"
			;
			
			Запрос.УстановитьПараметр("Ордер", Выборка.Ссылка);
			Запрос.УстановитьПараметр("Приобретение", ДокументСсылка);
			
			СтрокиОрдера = Запрос.Выполнить();
			Если Не СтрокиОрдера.Пустой() Тогда
				
				ВыборкаСтрок = СтрокиОрдера.Выбрать();
				Пока ВыборкаСтрок.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаСтрок.СтрокаОрдера) Тогда
						
						СтрокаОрдераОбъект = ВыборкаСтрок.СтрокаОрдера.ПолучитьОбъект();
						ЗаполнитьЗначенияСвойств(СтрокаОрдераОбъект, ВыборкаСтрок);
						СтрокаОрдераОбъект.Записать();
						
					КонецЕсли;	
					
				КонецЦикла;	
				
			КонецЕсли;	
			
		КонецЕсли;
		
		ПриходныйОрдерОбъект.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,ИмяРеквизитаСклад);
		ПриходныйОрдерОбъект.Помещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,ИмяРеквизитаПомещение);
		ПриходныйОрдерОбъект.Отправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,ИмяРеквизитаОтправитель);
		
		ПриходныйОрдерОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

//Gradum Богданов Е.П 06.05.2020 ++

// Процедура - Обработать связанные файлы
// Создает объекты и записи в регистрах по табличной части "ПрисоединенныеФайлы"
// Параметры:
//  xdtoОбъект	 - xdtoОбъект - Входящие данныые из пакета
//  Документ	 - Документ.Ссылка - Обрабатываемый основной процедурой документ
//
Процедура ОбработатьСвязанныеФайлы(xdtoОбъект, Документ, КоличествоПопытокБлокировки = 1 , 
		ОшибкаУстановкиБлокровки = Ложь ) Экспорт
	Если Не грОбработкаПакетовИнтеграции.РеквизитЕстьВПакете(xdtoОбъект, "ПрисоединенныеФайлы") Тогда 
		Возврат;
	КонецЕсли;
	
	xdtoФайлы = xdtoОбъект.ПрисоединенныеФайлы.Последовательность();
	
	Если xdtoФайлы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТипыСтатусаДокумента = ТипСтатусаДокумента(Документ.Ссылка);
	ТипДокумента = ТипЗнч(Документ);
	Если ТипыСтатусаДокумента = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Статус = Неопределено;
	
	грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Статус, xdtoОбъект, "Статус", ТипыСтатусаДокумента.ТипСтрокой);
	
	Файлы = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка", ,
				Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
				
	Файлы.Колонки.Добавить("ИмяФайла",   		ТипСтрока);
									   
	Файлы.Колонки.Добавить("ДатаФайла",  		Новый ОписаниеТипов("Дата", , ,
										 		Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Файлы.Колонки.Добавить("ВремяФайла", 		ТипСтрока);
										
	Файлы.Колонки.Добавить("НастройкаХранения", ТипСтрока);
	Файлы.Колонки.Добавить("Операция", 			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДокументовЕГАИС"));
	Файлы.Колонки.Добавить("ОписаниеОшибки", 	ТипСтрока);
	
	Для Индекс = 0 По xdtoФайлы.Количество()-1 Цикл
		xdtoСтрока = xdtoФайлы.ПолучитьЗначение(Индекс);
		Стр = Файлы.Добавить();
		
		грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ИмяФайла", "Строка");
		грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ДатаФайла", "Дата");
		грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ВремяФайла", "Строка");
		грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "НастройкаХранения", "Строка");
		грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "Операция", "Перечисление.ВидыДокументовЕГАИС");
		грОбработкаПакетовИнтеграции.ЗаполнитьЗначениемЕслиРеквизитЕстьВПакете(Стр, xdtoСтрока, "ОписаниеОшибки", "Строка");

	КонецЦикла;
	
	НастройкаХранения = Неопределено;
	
	ПредыдущийПрисоединенныйФайл = Неопределено;
		
	Если ТипДокумента = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") 
		Или ТипДокумента = Тип("ДокументСсылка.грОтчетОбИмпортеПродукции") 
		Или ТипДокумента = Тип("ДокументСсылка.грАктКТТНЕГАИСИсходящий") Тогда
		
		ДатаСозданияФормируется = Истина;
	Иначе
		ДатаСозданияФормируется = Ложь;
	КонецЕсли;
	
	#Область СтатусыДокументовЕГАИС
	ДействиеНеТребуется = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
	
	Запись = РегистрыСведений.СтатусыДокументовЕГАИС.СоздатьМенеджерЗаписи();
	
	Запись.Документ 		   = Документ;
	Запись.Статус 			   = Статус;
	Запись.ДальнейшееДействие1 = ДействиеНеТребуется;
	Запись.ДальнейшееДействие2 = ДействиеНеТребуется;
	Запись.ДальнейшееДействие3 = ДействиеНеТребуется;
	
	Запись.Записать(Истина);
	#КонецОбласти
	
	Для Каждого Стр Из Файлы Цикл 
		
		ДатаСоздания = СоединитьДатуИВремя(Стр.ДатаФайла, Стр.ВремяФайла);
		
		#Область грБинарныеОбъекты
		НастройкаХранения = НастройкаХраненияПоСтрокеПодключения(Стр.НастройкаХранения);
		
		БинарныйСсылка = БинарныйОбъектПоИмениФайла(Стр.ИмяФайла);
		
		//Блокировка
		Если ЗначениеЗаполнено( БинарныйСсылка ) Тогда
			
			БлокировкаУстановлена = Ложь;
			
			СчетчикПопыток = 0;
			Пока СчетчикПопыток < КоличествоПопытокБлокировки Цикл
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Справочник.грБинарныеОбъекты");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.УстановитьЗначение("Ссылка", БинарныйСсылка );
					Блокировка.Заблокировать();
					
					БлокировкаУстановлена = Истина;
					Прервать;
					
				Исключение
				КонецПопытки;
				СчетчикПопыток = СчетчикПопыток + 1;
			КонецЦикла;
			
			ОшибкаУстановкиБлокровки = Не БлокировкаУстановлена;
			
			Если ОшибкаУстановкиБлокровки Тогда
				Возврат;
			КонецЕсли;
			
			БинарныйОбъект = БинарныйСсылка.ПолучитьОбъект();
			
		Иначе
			
			БинарныйОбъект = Справочники.грБинарныеОбъекты.СоздатьЭлемент();
			БинарныйОбъект.Наименование = Стр.ИмяФайла;
			БинарныйОбъект.ИмяФайла 	   = Стр.ИмяФайла;
			
		КонецЕсли;
		
		БинарныйОбъект.Наименование 	 = Стр.ИмяФайла;
		БинарныйОбъект.ИмяФайла 		 = Стр.ИмяФайла;
		БинарныйОбъект.ПутьВХранилище	 = Стр.ИмяФайла;
		БинарныйОбъект.НастройкаХранения = НастройкаХранения;									 
		БинарныйОбъект.ДатаСоздания		 = ДатаСоздания;
		
		БинарныйОбъект.Записать();
		#КонецОбласти
		
		#Область ПрисоединенныеФайлы
		ПрисоединенныйФайл = ПрисоединенныйФайлПоБинарномуОбъекту(БинарныйОбъект.Ссылка, Документ.Ссылка);
		
		//Блокировка
		Если ЗначениеЗаполнено( ПрисоединенныйФайл.Ссылка ) Тогда
			
			БлокировкаУстановлена = Ложь;
			
			СчетчикПопыток = 0;
			Пока СчетчикПопыток < КоличествоПопытокБлокировки Цикл
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Справочник.ЕГАИСПрисоединенныеФайлы");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ПрисоединенныйФайл.Ссылка );
					Блокировка.Заблокировать();
					
					БлокировкаУстановлена = Истина;
				Исключение
				КонецПопытки;
				СчетчикПопыток = СчетчикПопыток + 1;
			КонецЦикла;
			
			ОшибкаУстановкиБлокровки = Не БлокировкаУстановлена;
			Если ОшибкаУстановкиБлокровки Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ПрисоединенныйФайл.грОписаниеОшибки = Стр.ОписаниеОшибки;
		
		Если Не ЗначениеЗаполнено(ПрисоединенныйФайл.грОписаниеОшибки) Тогда 
			ПрисоединенныйФайл.СтатусОбработки = СтатусОбработкиПрисоединенногоФайла(Документ.Ссылка, Стр.Операция);
		Иначе
			ПрисоединенныйФайл.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
		КонецЕсли;
		
		Если ТипДокумента = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") 
			ИЛИ ТипДокумента = Тип("ДокументСсылка.грАктКТТНЕГАИСВходящий") Тогда 
			
			ПрисоединенныйФайл.ВладелецФайла = Документ.Грузоотправитель;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТТНВходящаяЕГАИС")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.грАктКТТНЕГАИСИсходящий") Тогда
			
			ПрисоединенныйФайл.ВладелецФайла = Документ.Грузополучатель;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грОтчетОбИмпортеПродукции") Тогда
			
			ПрисоединенныйФайл.ВладелецФайла = Документ.Импортер;
			
		// ++ Градум, Шутенко Д.И., Задача № 17815 , 30.10.2020 
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грЗапросНаОтменуПроведенияАктПостановкиНаБалансЕГАИС") Тогда
			
			ВладелецФайла				= Неопределено;
			АктПостановкиНаБалансЕГАИС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "АктПостановкиНаБалансЕГАИС");
			Если ЗначениеЗаполнено(АктПостановкиНаБалансЕГАИС) Тогда
				ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктПостановкиНаБалансЕГАИС, "ОрганизацияЕГАИС");
			КонецЕсли;
			
			ПрисоединенныйФайл.ВладелецФайла = ВладелецФайла;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грЗапросНаОтменуПроведенияАктСписанияЕГАИС") Тогда
			
			ВладелецФайла		= Неопределено;
			АктСписанияЕГАИС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "АктСписанияЕГАИС");
			Если ЗначениеЗаполнено(АктСписанияЕГАИС) Тогда
				ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктСписанияЕГАИС, "ОрганизацияЕГАИС");
			КонецЕсли;
			
			ПрисоединенныйФайл.ВладелецФайла = ВладелецФайла;
			
		// -- Градум, Шутенко Д.И., Задача № 17815 , 30.10.2020 
		//+++ GRADUM, Теплоухов А.В. 2021_01_26 Задача № 19061{
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грЗапросНаОтменуПроведенияТТНЕГАИСВходящий") Тогда
			
			ВладелецФайла		= Неопределено;
			ТТНИсходящаяЕГАИС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ТТНИсходящаяЕГАИС");
			Если ЗначениеЗаполнено(ТТНИсходящаяЕГАИС) Тогда
				ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНИсходящаяЕГАИС, "Грузоотправитель");
			КонецЕсли;
			
			ПрисоединенныйФайл.ВладелецФайла = ВладелецФайла;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грЗапросНаОтменуПроведенияТТНЕГАИСИсходящий") Тогда
			
			ВладелецФайла		= Неопределено;
			ТТНВходящаяЕГАИС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ТТНВходящаяЕГАИС");
			Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
				ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "Грузополучатель");
			КонецЕсли;
			
			ПрисоединенныйФайл.ВладелецФайла = ВладелецФайла;
			
		//--- GRADUM, Теплоухов А.В. 2021_01_26 Задача № 19061}
		Иначе
			ПрисоединенныйФайл.ВладелецФайла = Документ.ОрганизацияЕГАИС;
		КонецЕсли;
		
		ПрисоединенныйФайл.Автор		    = Документ.Ответственный;
		ПрисоединенныйФайл.Операция		    = Стр.Операция;
		
		Если Не ДатаСозданияФормируется Тогда
			ПрисоединенныйФайл.ДатаСоздания = ДатаСоздания;
		Иначе
			ПрисоединенныйФайл.ДатаСоздания = ТекущаяДата();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредыдущийПрисоединенныйФайл) Тогда 
			ПрисоединенныйФайл.СообщениеОснование = ПредыдущийПрисоединенныйФайл;
		КонецЕсли;
		
		ПрисоединенныйФайл.ОбменДанными.Загрузка = Истина;
		ПрисоединенныйФайл.Записать();
		#КонецОбласти
		
		#Область СвязиБинарныхОбъектов
		Запись = РегистрыСведений.грСвязиБинарныхОбъектов.СоздатьМенеджерЗаписи();
		
		Запись.БинарныйОбъект = БинарныйОбъект.Ссылка;
		Запись.Потребитель	  = Документ.Ссылка;
		Запись.Записать(Истина);
		#КонецОбласти
		
		ПредыдущийПрисоединенныйФайл = ПрисоединенныйФайл.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

//Gradum Богданов Е.П 06.05.2020 --

 

//Gradum Богданов Е.П 06.05.2020 ++
#Область ПрисоединенныеФайлы
Функция СтатусОбработкиПрисоединенногоФайла(Документ, ВидДокументаЕГАИС);
	Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПустаяСсылка();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда 
		Если ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1 Тогда 
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.КПередаче;
		//ИначеЕсли ВидДокументаЕГАИС = "КвитанцияОПолученииДокументаВЕГАИС" Тогда
		//	Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.;
		//ИначеЕсли ВидДокументаЕГАИС = "КвитанцияОПроведенииДокументаВЕГАИС" Тогда 
		//	Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда 
		Если ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1 Тогда 
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.КПередаче;
		ИначеЕсли ВидДокументаЕГАИС = "КвитанцияОПолученииДокументаВЕГАИС" Тогда
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ОбрабатываетсяЕГАИС;
		ИначеЕсли ВидДокументаЕГАИС = "КвитанцияОПроведенииДокументаВЕГАИС" Тогда 
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		Если ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда 
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.КПередаче;
		ИначеЕсли ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ОбрабатываетсяЕГАИС;
		ИначеЕсли ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
		ИначеЕсли ВидДокументаЕГАИС = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
			Результат = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТипСтатусаДокумента(Документ)
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.АктСписанияЕГАИС") 
		Или ТипДокумента = Тип("ДокументСсылка.грЗапросНаОтменуПроведенияАктСписанияЕГАИС") // ++ Градум, Шутенко Д.И., Задача № 17815 , 30.10.2020 
		Тогда
		
		Результат = Новый Структура(); 
		Результат.Вставить("ОписаниеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиАктаСписанияЕГАИС"));
		Результат.Вставить("ТипСтрокой",   "ПеречислениеСсылка.СтатусыОбработкиАктаСписанияЕГАИС");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") 
		Или ТипДокумента = Тип("ДокументСсылка.грЗапросНаОтменуПроведенияАктПостановкиНаБалансЕГАИС") // ++ Градум, Шутенко Д.И., Задача № 17815 , 30.10.2020 
		Тогда
		
		Результат = Новый Структура(); 
		Результат.Вставить("ОписаниеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС"));
		Результат.Вставить("ТипСтрокой",   "ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		Результат = Новый Структура(); 
		Результат.Вставить("ОписаниеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС"));
		Результат.Вставить("ТипСтрокой",   "ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		Результат = Новый Структура(); 
		Результат.Вставить("ОписаниеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС"));
		Результат.Вставить("ТипСтрокой",   "ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грОтчетОбИмпортеПродукции") Тогда
		
		Результат = Новый Структура(); 
		Результат.Вставить("ОписаниеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.грСтатусыОбработкиОтчетаобИмпортеПродукцииЕГАИС"));
		Результат.Вставить("ТипСтрокой",   "ПеречислениеСсылка.грСтатусыОбработкиОтчетаобИмпортеПродукцииЕГАИС");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грАктКТТНЕГАИСИсходящий") Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ОписаниеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС"));
		Результат.Вставить("ТипСтрокой",   "ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.грАктКТТНЕГАИСВходящий") Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ОписаниеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС"));
		Результат.Вставить("ТипСтрокой",   "ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС");
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция НастройкаХраненияПоСтрокеПодключения(СтрокаПодключения)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПодключения", СтрокаПодключения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	грНастройкиХраненияБинарныхОбъектов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.грНастройкиХраненияБинарныхОбъектов КАК грНастройкиХраненияБинарныхОбъектов
	               |ГДЕ
	               |	грНастройкиХраненияБинарныхОбъектов.СтрокаПодключения ПОДОБНО &СтрокаПодключения";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	Иначе
		Настройка = Справочники.грНастройкиХраненияБинарныхОбъектов.СоздатьЭлемент();
		
		Настройка.Наименование 		= "Файловое хранилище";
		Настройка.СтрокаПодключения = СтрокаПодключения;
		Настройка.ТипСвязи 			= Перечисления.грТипыХраненияФайлов.ФайловоеХранилище;
		
		Настройка.Записать();
		
		Результат = Настройка.Ссылка;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция СоединитьДатуИВремя(Дата = Неопределено, Время)
	
	Если Дата = Неопределено Тогда 
		Дата = Дата(1, 1, 1);
	КонецЕсли;
	
	ДатаСтрока  = Формат(Дата, "ДФ=ггггММдд; ДП=");
	
	Если ТипЗнч(Время) = Тип("Дата") Тогда 
		ВремяСтрока = Формат(Время, "ДФ=ЧЧммсс; ДП=");
	ИначеЕсли ТипЗнч(Время) = Тип("Строка") Тогда 
		
		// ++ Градум, Шутенко Д.И., Задача № 16183 , 07.09.2020 
		ВремяСтрока = "000000";
		Если ЗначениеЗаполнено(Время) Тогда
			
			МассивСтрок = СтрРазделить(Время, ":", Ложь);
			Если МассивСтрок.Количество() = 3 Тогда
				ВремяСтрока = СтрШаблон("%1%2%3", МассивСтрок[0], МассивСтрок[1], МассивСтрок[2]);
			КонецЕсли;
			
		КонецЕсли;
		
		//ВремяСтрока = СтрЗаменить(Время, ":", "");
		// -- Градум, Шутенко Д.И., Задача № 16183 , 07.09.2020 
		
	КонецЕсли;
	
	Результат  = Дата(ДатаСтрока + ВремяСтрока);
	
	Возврат Результат;
 
КонецФункции

Функция БинарныйОбъектПоИмениФайла(ИмяФайла)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	грБинарныеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.грБинарныеОбъекты КАК грБинарныеОбъекты
	|ГДЕ
	|	грБинарныеОбъекты.ИмяФайла ПОДОБНО &ИмяФайла";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПрисоединенныйФайлПоБинарномуОбъекту(БинарныйОбъект, Документ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БинарныйОбъект", БинарныйОбъект);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕГАИСПрисоединенныеФайлы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	               |ГДЕ
	               |	ЕГАИСПрисоединенныеФайлы.грБинарныйОбъект = &БинарныйОбъект
	               |	И ЕГАИСПрисоединенныеФайлы.Документ = &Документ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ПрисоединенныйФайл = Справочники.ЕГАИСПрисоединенныеФайлы.СоздатьЭлемент();
		
		ПрисоединенныйФайл.Наименование 	= Строка(Новый УникальныйИдентификатор);
		ПрисоединенныйФайл.грБинарныйОбъект = БинарныйОбъект;
		ПрисоединенныйФайл.Документ			= Документ;
		
		Результат = ПрисоединенныйФайл;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
#КонецОбласти
//Gradum Богданов Е.П 06.05.2020 --

//Datareon Маслов 19.04.2020 ++

// Функция по формату получает дату из строкового представления.
//
// Параметры:
//  СтрокаДаты  - <Строка> - строковое представление даты.
//  ФорматДаты  - <Строка> - форматная строка даты
//                для выделения частей даты допускается использовать литералы:
//				  Г - литерал года
//				  М - литерал месяца
//                Д - литерал дня
//                ч - литерал часа
//                м - литерал минуты
//                с - литерал секунды
//				  позиция символа в форматной строке должна совпадать с позицией соответствующего символа даты,
//                например, для получения даты из строки "2015-12-31T23:59:59" формат должен быть "ГГГГ-ММ-ДДTчч:мм:сс".
//
// Возвращаемое значение:
//   <Дата>   - строка, преобразованная к значению типа Дата.
//
Функция СтрокаВДату(СтрокаДаты, ФорматДаты) Экспорт

	стрДата = Новый Структура;
	стрДата.Вставить("Год", Новый Структура("Значение, Формат", 1, ""));
	стрДата.Вставить("Месяц", 1);
	стрДата.Вставить("День", 1);
	стрДата.Вставить("Час", 0);
	стрДата.Вставить("Минута", 0);
	стрДата.Вставить("Секунда", 0);
	
	ДлинаФормата = МИН(СтрДлина(ФорматДаты), СтрДлина(СтрокаДаты));
	Для инд = 1 по ДлинаФормата цикл
		СимволФормата = Сред(ФорматДаты, инд, 1);
		СимволДаты    = Сред(СтрокаДаты, инд, 1);
		
		Если СимволФормата = "Г" тогда
			Если стрДата.Год.Значение = 1 тогда
				стрДата.Год.Значение = "";	
			КонецЕсли;	
			стрДата.Год.Значение = "" + стрДата.Год.Значение + СимволДаты;
			стрДата.Год.Формат = стрДата.Год.Формат + "Г";
		ИначеЕсли СимволФормата = "М" тогда
			Если стрДата.Месяц = 1 тогда
				стрДата.Месяц = "";	
			КонецЕсли;	
			стрДата.Месяц = "" + стрДата.Месяц + СимволДаты;
		ИначеЕсли СимволФормата = "Д" тогда
			Если стрДата.День = 1 тогда
				стрДата.День = "";	
			КонецЕсли;	
			стрДата.День = "" + стрДата.День + СимволДаты;
		ИначеЕсли СимволФормата = "ч" тогда
			стрДата.Час = "" + стрДата.Час + СимволДаты;
		ИначеЕсли СимволФормата = "м" тогда
			стрДата.Минута = "" + стрДата.Минута + СимволДаты;
		ИначеЕсли СимволФормата = "с" тогда
			стрДата.Секунда = "" + стрДата.Секунда + СимволДаты;
		КонецЕсли;       
	КонецЦикла;	
	
	Попытка
		стрДата.Год.Значение = Число(стрДата.Год.Значение);	
		стрДата.Месяц = Число(стрДата.Месяц);
		стрДата.День = Число(стрДата.День);
		стрДата.Час = Число(стрДата.Час);
		стрДата.Минута = Число(стрДата.Минута);
		стрДата.Секунда = Число(стрДата.Секунда);
		
		Если стрДата.Год.Формат = "ГГ" тогда
			Если стрДата.Год.Значение < 50 тогда
				ТекущееСтолетие = Цел(Год(ТекущаяДата())/100);
				стрДата.Год.Значение = ТекущееСтолетие*100 + стрДата.Год.Значение; 
			ИначеЕсли стрДата.Год.Значение >= 50 И стрДата.Год.Значение < 100 тогда
				ПрошлоеСтолетие = Цел(Год(ТекущаяДата())/100)-1;
				стрДата.Год.Значение = ПрошлоеСтолетие*100 + стрДата.Год.Значение; 
			КонецЕсли;       
		КонецЕсли;
		
		Результат = Дата(стрДата.Год.Значение, стрДата.Месяц, стрДата.День, стрДата.Час, стрДата.Минута, стрДата.Секунда);
	Исключение
		Результат = Дата(1,1,1);
	КонецПопытки;
	
	Возврат Результат
КонецФункции

//Datareon Маслов 19.04.2020 --

#Область ЗаказНаПеремещение

Функция ЛогическийТипПомещенияЗНП(ПомещениеУНИКУМGUID, ТаблицаСоответствияПомещений) Экспорт
	
	Результат = "";
	Если ЗначениеЗаполнено(ПомещениеУНИКУМGUID) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Помещение" , ПомещениеУНИКУМGUID);
		
		НайденныеСтроки = ТаблицаСоответствияПомещений.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат = НайденныеСтроки[0].ЛогическийТип;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

Процедура УстановитьАктуальныйСтатусЗаказаПоставщику(Док, КлассОбработчика, Проведен) Экспорт

	Если НЕ КлассОбработчика = "282"
		И НЕ КлассОбработчика = "216"
		Тогда
		Возврат;
	КонецЕсли;
	
	Если КлассОбработчика = "282"
		Тогда
		
		ЗаказПоставщику = Док.Ссылка;
		
	ИначеЕсли КлассОбработчика = "216" Тогда
		
		ЗаказПоставщику = Док.грЗаказПоставщику;
		
	КонецЕсли;
	
	ПроверитьСтатус		= Ложь;
	СтатусЗадан			= Ложь;
	
	СтатусПодтвержденПоставщиком				= Справочники.грСтатусыЗаказа.ПодтвержденПоставщиком;
	СтатусПодтвержденПоставщикомПорядок			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатусПодтвержденПоставщиком, "Порядок");
	
	ТекущийСтатус								= РегистрыСведений.грСтатусыЗаказов.ПолучитьТекущийСтатусЗаказаПоставщику(ЗаказПоставщику, СтатусЗадан);
	ТекущийСтатусПорядок						= 0;
	Если ЗначениеЗаполнено(ТекущийСтатус) Тогда
		ТекущийСтатусПорядок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийСтатус, "Порядок");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийСтатус) Тогда
	
		АктуальныйСтатус = ТекущийСтатус;
		
	Иначе
		
		АктуальныйСтатус = Справочники.грСтатусыЗаказа.Подготовлен;
		
	КонецЕсли;
	
	Если КлассОбработчика = "216" //ERP_ПеремещениеТоваров
		Или КлассОбработчика = "282" //УНИКУМ_ПоступлениеНаТранзитныйСклад
		Тогда
		
		Если Проведен Тогда
			
			Если ТекущийСтатусПорядок < СтатусПодтвержденПоставщикомПорядок Тогда
				
				АктуальныйСтатус = СтатусПодтвержденПоставщиком;
				
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
			|ГДЕ
			|	ПриобретениеТоваровУслуг.ЗаказПоставщику = &ЗаказПоставщику
			|	И ПриобретениеТоваровУслуг.грПроведенВременная
			|	И ПриобретениеТоваровУслуг.Ссылка <> &ТекущийДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПеремещениеТоваров.Ссылка
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			|ГДЕ
			|	ПеремещениеТоваров.грЗаказПоставщику = &ЗаказПоставщику
			|	И ПеремещениеТоваров.грПроведенВременная
			|	И ПеремещениеТоваров.Ссылка <> &ТекущийДокумент";
			
			Запрос.УстановитьПараметр("ТекущийДокумент"	, Док.Ссылка);
			Запрос.УстановитьПараметр("ЗаказПоставщику"	, ЗаказПоставщику);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Если ТекущийСтатусПорядок < СтатусПодтвержденПоставщикомПорядок Тогда
					
					АктуальныйСтатус = СтатусПодтвержденПоставщиком;
					
				КонецЕсли;
				
			Иначе
				
				Если ТекущийСтатусПорядок <= СтатусПодтвержденПоставщикомПорядок Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	грСтатусыЗаказов.Статус КАК Статус,
					|	грСтатусыЗаказов.ПорядокСтатуса КАК ПорядокСтатуса
					|ИЗ
					|	РегистрСведений.грСтатусыЗаказов КАК грСтатусыЗаказов
					|ГДЕ
					|	грСтатусыЗаказов.Заказ = &ЗаказПоставщику
					|	И грСтатусыЗаказов.ДокументОснование = &ЗаказПоставщику
					|	И грСтатусыЗаказов.ПорядокСтатуса < &ПорядокСтатуса
					|
					|УПОРЯДОЧИТЬ ПО
					|	ПорядокСтатуса УБЫВ";
					
					Запрос.УстановитьПараметр("ЗаказПоставщику"	, ЗаказПоставщику);
					Запрос.УстановитьПараметр("ПорядокСтатуса"	, СтатусПодтвержденПоставщикомПорядок);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						
						Если Выборка.ПорядокСтатуса < ТекущийСтатусПорядок Тогда
							АктуальныйСтатус = Выборка.Статус;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверяем текущее состаяние заказа и сравниваем с указанным. Если статус не менялся - ничего не делаем
	Если АктуальныйСтатус = ТекущийСтатус И СтатусЗадан Тогда 
		Возврат;
	КонецЕсли;
	
	АктуальныйСтатусПорядок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальныйСтатус, "Порядок");
	
	//если произошло снижение статуса по порядку, необходимо удалить записи регистра с более высоким порядком
	Если ТекущийСтатусПорядок > АктуальныйСтатусПорядок Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	грСтатусыЗаказовПоставщикам.Заказ КАК Заказ,
		|	грСтатусыЗаказовПоставщикам.ДокументОснование КАК ДокументОснование,
		|	грСтатусыЗаказовПоставщикам.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
		|	грСтатусыЗаказовПоставщикам.Статус КАК Статус,
		|	грСтатусыЗаказовПоставщикам.Пользователь КАК Пользователь,
		|	грСтатусыЗаказовПоставщикам.ПорядокСтатуса КАК ПорядокСтатуса
		|ИЗ
		|	РегистрСведений.грСтатусыЗаказов КАК грСтатусыЗаказовПоставщикам
		|ГДЕ
		|	грСтатусыЗаказовПоставщикам.ПорядокСтатуса >= &Порядок
		|	И грСтатусыЗаказовПоставщикам.Заказ = &ЗаказПоставщику";
		
		Запрос.УстановитьПараметр("Порядок"			, АктуальныйСтатусПорядок);
		Запрос.УстановитьПараметр("ЗаказПоставщику"	, ЗаказПоставщику);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.грСтатусыЗаказов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.грСтатусыЗаказов.СоздатьМенеджерЗаписи();
	
	//если по документу уже существовала запись в регистре, то новый статус пишется текущей датой	
	Если СтатусЗадан Тогда
		
		ДатаУстановкиСтатуса = ТекущаяДата();
		
	Иначе
		
		Если ЗначениеЗаполнено(Док.Дата) Тогда
			ДатаУстановкиСтатуса = Док.Дата;
		Иначе	
			ДатаУстановкиСтатуса = ТекущаяДата();
		КонецЕсли;
		
	КонецЕсли;
	МенеджерЗаписи.ДатаУстановкиСтатуса = ДатаУстановкиСтатуса;
	МенеджерЗаписи.Заказ		 		= ЗаказПоставщику;
	МенеджерЗаписи.ДокументОснование 	= ЗаказПоставщику;
	МенеджерЗаписи.Статус				= АктуальныйСтатус;
	МенеджерЗаписи.ПорядокСтатуса		= АктуальныйСтатусПорядок;
	МенеджерЗаписи.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	грСтрокаЗаказаПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.грСтрокаЗаказаПоставщику КАК грСтрокаЗаказаПоставщику
	|ГДЕ
	|	грСтрокаЗаказаПоставщику.ДокументВладелец = &ДокументВладелец
	|	И грСтрокаЗаказаПоставщику.Статус <> &Статус";
	
	Запрос.УстановитьПараметр("ДокументВладелец", ЗаказПоставщику);
	Запрос.УстановитьПараметр("Статус"			, АктуальныйСтатус);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтроковыйДокументОбъект =  Выборка.Ссылка.ПолучитьОбъект();
		СтроковыйДокументОбъект.Статус = АктуальныйСтатус;
		СтроковыйДокументОбъект.ОбменДанными.Загрузка = Истина;
		СтроковыйДокументОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыУстаревшие

Процедура ЗаписатьКонтактноеЛицоКонтрагента(ВнешняяСистема, GUID, БизнесПартнер, Должность, Наименование, ДатаРождения = Неопределено)
	// Начало GRADUM, Буравов А.В. 07.11.2019
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПартнер", БизнесПартнер);
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК т
	|ГДЕ
	|	т.Владелец = &БизнесПартнер
	|	И т.CRM_Должность = &Должность";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СпрОбъект = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	СпрОбъект.Владелец = БизнесПартнер;
	СпрОбъект.CRM_Должность = Должность;
	СпрОбъект.Наименование = СокрЛП(Наименование);
	
	ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(СпрОбъект.Наименование);
	СпрОбъект.CRM_Фамилия = ЧастиИмени.Фамилия;
	СпрОбъект.CRM_Имя = ЧастиИмени.Имя;
	СпрОбъект.CRM_Отчество = ЧастиИмени.Отчество;
	
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		ДатаРождения = XMLЗначение(Тип("Дата"), ДатаРождения);
		Если Год(ДатаРождения) = 1753 Тогда
			ДатаРождения = Дата(1,1,1);
		КонецЕсли; 
		
		СпрОбъект.ДатаРождения = ДатаРождения;
	КонецЕсли;
	
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	СпрОбъект.Записать();
	
	УстановитьКлюч(СпрОбъект.Ссылка, GUID, ВнешняяСистема);
	// Конец GRADUM, Буравов А.В. 07.11.2019
КонецПроцедуры

Функция СоздатьНовыйОбъект(Ключ, Отправитель, ПредставлениеОбъекта, ЗаполняемыеРеквизиты)
	// Начало GRADUM, Буравов А.В. 28.11.2019
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПредставлениеОбъекта);	
	ИмяДоТочки = ИмяДоТочки(ПредставлениеОбъекта);
	
	Если ИмяДоТочки = "Справочник" Тогда
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты) Тогда
			Если ЗаполняемыеРеквизиты.Свойство("ЭтоГруппа") И ЗаполняемыеРеквизиты.ЭтоГруппа Тогда
				НовыйОбъект = МенеджерОбъекта.СоздатьГруппу();
			Иначе
				НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
		КонецЕсли;
		// Начало GRADUM, Буравов А.В. 31.01.2020
		// + Градум, Семенцов Евгений, 07.11.2019 (задача № 7651)
		Если НовыйОбъект.Метаданные().ДлинаКода > 0 Тогда
			Если ЗаполняемыеРеквизиты = Неопределено ИЛИ (ТипЗнч(ЗаполняемыеРеквизиты) = Тип("Структура") И Не ЗаполняемыеРеквизиты.Свойство("Код")) Тогда
				НовыйОбъект.УстановитьНовыйКод();	
			КонецЕсли;
		КонецЕсли;
		///  Градум, Семенцов Евгений, 07.11.2019 (задача № 7651)
		// Конец GRADUM, Буравов А.В. 31.01.2020
		
		//НовыйОбъект.Наименование = " "; // для некоторых справочников запрещается назначать наименование, эта строка вызовет ошибку
	ИначеЕсли ИмяДоТочки = "Документ" Тогда 
		НовыйОбъект = МенеджерОбъекта.СоздатьДокумент();
		
		// Начало GRADUM, Буравов А.В. 25.02.2020
		Если ЗаполняемыеРеквизиты.Свойство("Дата") Тогда
			ЗаполнитьЗначенияСвойств(НовыйОбъект, ЗаполняемыеРеквизиты, "Дата");
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(НовыйОбъект.Дата) Тогда
			НовыйОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		// Конец GRADUM, Буравов А.В. 25.02.2020
		
		// Начало GRADUM, Буравов А.В. 06.02.2020
		Если ЗаполняемыеРеквизиты = Неопределено ИЛИ (ТипЗнч(ЗаполняемыеРеквизиты) = Тип("Структура") И Не ЗаполняемыеРеквизиты.Свойство("Номер")) Тогда
			НовыйОбъект.УстановитьНовыйНомер();	
		КонецЕсли;
		// Конец GRADUM, Буравов А.В. 06.02.2020
		
		// Начало GRADUM, Буравов А.В. 28.11.2019
	ИначеЕсли ИмяДоТочки = "ПланВидовХарактеристик" Тогда
		НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
		// Конец GRADUM, Буравов А.В. 28.11.2019	
	Иначе
		Возврат Неопределено; // дописать в случае необходимости создание объектов других типов
	КонецЕсли;
	
	Если ТипЗнч(ЗаполняемыеРеквизиты) = Тип("Структура") И ЗаполняемыеРеквизиты.Свойство("ЭтоГруппа") Тогда
		ЗаполняемыеРеквизиты.Удалить("ЭтоГруппа");
	КонецЕсли;
	
	Если ЗаполняемыеРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовыйОбъект, ЗаполняемыеРеквизиты);
	КонецЕсли;
	
	НовыйОбъект.ОбменДанными.Загрузка = Истина;
	НовыйОбъект.Записать();
	Возврат НовыйОбъект.Ссылка;
	// Конец GRADUM, Буравов А.В. 28.11.2019
КонецФункции

Функция ИмяДоТочки(Представление)
	// Начало GRADUM, Буравов А.В. 23.08.2019
	ПозицияТочки = СтрНайти(Представление, ".");
	Возврат Лев(Представление, ПозицияТочки-1);
	// Конец GRADUM, Буравов А.В. 23.08.2019
КонецФункции

//GRADUM, Теплоухов А.В. 2020_02_12 {Процедура выполняет поиск дозапросов на объект системы и Полученную ссылку}
Процедура ОбработатьДанныеДляДозапроса(Ключ,ПредставлениеОбъекта, ОбъектСистемы, ПолученнаяСсылка, СтруктураДозапроса,ВыполнитьДозапрос)

	//ОбработкаПодчиненногоРеквзита = ОбъектСистемы <> Неопределено;
	//ДозапросПоПолученнойСсылке = ОбработкаПодчиненногоРеквзита И ВыполнитьДозапрос;
	//
	//Если ОбработкаПодчиненногоРеквзита Тогда
	//	ЗаписатьВОчередьДозапросов(ОбъектСистемы, ПолученнаяСсылка, СтруктураДозапроса.IdКласса, СтруктураДозапроса.ОтправительСтрокой);
	//КонецЕсли;
	//
	//Если (ОбработкаПодчиненногоРеквзита И ДозапросПоПолученнойСсылке)
	//	Или (Не ДозапросПоПолученнойСсылке И ОбработкаПодчиненногоРеквзита 
	//	И ПроверитьНаДозапросПолученнуюСсылку(ПолученнаяСсылка)) Тогда
	//	
	//	ОтправитьДозапрос(Ключ, СтруктураДозапроса.IdКласса, СтруктураДозапроса.ОтправительСтрокой);
	//	УстановитьПризнакОтправленоДляДозапроса(ОбъектСистемы,ПолученнаяСсылка);
	//	
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не ОбработкаПодчиненногоРеквзита Тогда
	//	
	//	ТаблицаЗависимых = ПолучитьПустуюТаблицуЗависимыхОбъектов();
	//	
	//	ПолучитьЗависимыеДозапросыРекурсивно(ТаблицаЗависимых,ПолученнаяСсылка,"ОбъектСистемы");
	//	СтруктураПроверки = ПроверитьОбъектСистемыНаНеобходимостьДозапросаПоВложеннымДозапросам(ОбъектСистемы,ТаблицаЗависимых);
	//	
	//	Если СтруктураПроверки.ДозапросОбъектаСистемы И Не ВыполнитьДозапрос Тогда
	//		ОтправитьДозапрос(Ключ, СтруктураДозапроса.IdКласса, СтруктураДозапроса.ОтправительСтрокой);
	//	КонецЕсли;
	//	
	//	Если СтруктураПроверки.ОчисткаОчереди И Не ВыполнитьДозапрос Тогда
	//		ОчиститьОчередьДозапросов(ТаблицаЗависимых);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

//GRADUM, Теплоухов А.В. 2020_02_12
Функция ПолучитьМДКейПоСсылкеНаОбъект(СсылкаНаОбъект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПереходныхКлючей.ИдентификаторОбъекта КАК ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.грТаблицаПереходныхКлючейERP КАК ТаблицаПереходныхКлючей
	|ГДЕ
	|	ТаблицаПереходныхКлючей.ВидИдентификатора = ЗНАЧЕНИЕ(Справочник.грВидыИдентификаторовСистем.MDKey)
	|	И ТаблицаПереходныхКлючей.ОбъектERP = &СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("ВидИдентификатора",	Справочники.грВидыИдентификаторовСистем.MDKey);
	Запрос.УстановитьПараметр("СсылкаНаОбъект",		СсылкаНаОбъект);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта; 
	
КонецФункции // ПолучитьМДКейПоСсылкеНаОбъект

// ++ Градум, Шутенко Д.И., Задача № 10473 , 31.03.2020 
Функция УстановитьСсылочныйРевизитПоID_Дозапрос(xdtoОбъект, ПутьXPath, Объект, ИмяРеквизита, МетаданныеПолноеИмя, idflow, 
    Отправитель, ТекстОшибки, СостояниеСообщения, Timeout = 120, ВидИдентификатора = "УНИКУМGUID") Экспорт
	
	ДопПараметры = грОбработкаПакетовИнтеграции.ПолучитьДопПараметрыУстановкиСсылочногоРеквизита();
	ДопПараметры.ВидИдентификатора      = ВидИдентификатора;
	ДопПараметры.СистемаОбмена          = Отправитель;
	ДопПараметры.ИмяРеквизита           = ИмяРеквизита;
	ДопПараметры.МетаданныеПолноеИмя    = МетаданныеПолноеИмя;
	ДопПараметры.xdtoОбъект             = xdtoОбъект;
	ДопПараметры.ПутьXPath              = ПутьXPath;
	
	// Дозапрос+
	ПараметрыДоЗапроса = грОбработкаПакетовИнтеграции.ПолучитьПараметрыДоЗапроса();
	ПараметрыДоЗапроса.idflow               = idflow; // определяется разработчиком  
	ПараметрыДоЗапроса.Timeout              = Timeout; 
	ПараметрыДоЗапроса.ВлючитьЛогирование   = Истина;
	ДопПараметры.ДоЗапрос                   = ПараметрыДоЗапроса;
	
	ЗаполняемыеРеквизиты = Новый Структура("Наименование", "Дозапрос " + Отправитель);
	ДопПараметры.Вставить("ЗаполняемыеРеквизиты", ЗаполняемыеРеквизиты);
	
	УстановитьСсылочныйРеквизитПоID(Объект, ДопПараметры, ТекстОшибки, СостояниеСообщения); 
	Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки Тогда 		
		Возврат Ложь;
    КонецЕсли;
	// Дозапрос-
	
	Возврат Истина;
	
КонецФункции // -- Градум, Шутенко Д.И., Задача № 10473 , 31.03.2020 

// ++ Градум, Шутенко Д.И., Задача № 13497 , 28.05.2020  
Процедура ПараметрыДозапросаДокументаОснования(ПараметрыДозапроса, Знач ТипДокументаОснования, ДополнительныеПараметры = Неопределено) Экспорт
    
    Отказ = Ложь;
    
    ТипДокумента    = Неопределено;
    idflow          = Неопределено;
    
    ТипДокументаОснования = СокрЛП(ТипДокументаОснования);
    Если ТипДокументаОснования = "Заказ" Тогда
        
        ТипДокумента = "Документ.ЗаказПоставщику";
        idflow       = "314";
        
    ИначеЕсли ТипДокументаОснования = "ПриходнаяНакладная" Тогда
        
        ТипДокумента = "Документ.ПриобретениеТоваровУслуг";
        idflow       = "305";
        
    ИначеЕсли ТипДокументаОснования = "ПоступлениеПрочее" Тогда    
        
        ТипДокумента = "Документ.ПриобретениеТоваровУслуг";
        idflow       = "452"; 
        
    ИначеЕсли ТипДокументаОснования = "Счет" Тогда
        
        ТипДокумента = "Документ.СчетНаОплатуКлиенту";
        idflow       = "438";
        
    ИначеЕсли ТипДокументаОснования = "РасходнаяНакладная" Тогда    
        
        ТипДокумента = "Документ.РеализацияТоваровУслуг";
        idflow       = "308";
        
    ИначеЕсли ТипДокументаОснования = "РасходнаяНакладнаяОпт"
            Или ТипДокументаОснования = "УправНакладная" Тогда
        
        ТипДокумента = "Документ.РеализацияТоваровУслуг";
        idflow       = "208";
        
    ИначеЕсли ТипДокументаОснования = "ВыбытиеМатериалов" Тогда
        
        ТипДокумента = "Документ.РеализацияТоваровУслуг";
        idflow       = "457";    
        
    ИначеЕсли ТипДокументаОснования = "ПоступлениеОС_НМА" 
        Или ТипДокументаОснования = "ДвиженияДенежныхСредств"  Тогда    
        
        Отказ = Истина;    
    
    Иначе
        
        Отказ = Истина;
        
        ТекстОшибки = СтрШаблон(НСтр("ru = 'Для типа документа основания ""%1"" не определены параметры дозапроса.'"), ТипДокументаОснования);
               
        ВызватьИсключение ТекстОшибки;
        
    КонецЕсли; 
    
    Если Не Отказ Тогда
        
        ПараметрыДозапроса = Новый Структура;
        ПараметрыДозапроса.Вставить("ТипДокумента"  , ТипДокумента);
        ПараметрыДозапроса.Вставить("idflow"        , idflow);   	
    
    КонецЕсли; 
    
КонецПроцедуры // -- Градум, Шутенко Д.И., Задача № 13497 , 28.05.2020  

//Устаревшая функция. Для поиска и создания Узла СКС требуется использовать экспортную функцию ПолучитьСКСПоБП
Функция ПолучитьСоздатьУзелСКСПоБизнесПартнеру(БизнесПартнер, НаименованиеКонтрагента, ВидИдентификатора,
	КоличествоПопытокБлокировки = 1 ) Экспорт
	
	РезультатПоиска = Новый Структура( "Ссылка, ОшибкаБлокировки", Неопределено, Ложь );
	
	СчетчикПопыток = 0;
	БлокировкаУстановлена = Ложь;
	Пока СчетчикПопыток < КоличествоПопытокБлокировки Цикл
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.грБизнесПартнеры");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", БизнесПартнер );
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			БлокировкаУстановлена = Истина;
			Прервать;
		Исключение
		КонецПопытки;
		СчетчикПопыток = СчетчикПопыток + 1;
	КонецЦикла;	
	
	Если НЕ БлокировкаУстановлена Тогда
		РезультатПоиска.ОшибкаБлокировки = НЕ БлокировкаУстановлена;
		Возврат РезультатПоиска;
	КонецЕсли;
	
	// ++ Градум Вахрушев А.В. 19.01.2021 Задача № 19489
	РодительУзла = Справочники.Партнеры.Поставщики;
	//РодительУзла = грОбработкаПакетовИнтеграции.ПолучитьОбъектПоКлючу_V2(" 8KI     R",, "Справочник.Партнеры", ВидИдентификатора);
	// -- Градум Вахрушев А.В. 19.01.2021 Задача № 19489
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	// ++ Градум Вахрушев А.В. 19.01.2021 Задача № 19489	
	//|	Партнеры.Родитель = &Родитель
	|	Партнеры.Родитель В ИЕРАРХИИ(&Родитель)
	// -- Градум Вахрушев А.В. 19.01.2021 Задача № 19489
	|	И Партнеры.грТипУровняСКС = ЗНАЧЕНИЕ(Перечисление.грТипыУзловСКС.АдресОтгрузки)
	|	И Партнеры.грЗначениеУзла = &грЗначениеУзла";
	
	Запрос.УстановитьПараметр("Родитель", РодительУзла.Ссылка);
	Запрос.УстановитьПараметр("грЗначениеУзла", БизнесПартнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйУзел = Справочники.Партнеры.СоздатьЭлемент();
		// ++ Градум Вахрушев А.В. 02.04.2021 Задача № ERP-235
		НовыйУзел.УстановитьНовыйКод();
		// -- Градум Вахрушев А.В. 02.04.2021 Задача № ERP-235
		НовыйУзел.Наименование = НаименованиеКонтрагента;
		НовыйУзел.Родитель = РодительУзла.Ссылка;
		НовыйУзел.грТипУровняСКС = Перечисления.грТипыУзловСКС.АдресОтгрузки;
		НовыйУзел.грЗначениеУзла = БизнесПартнер;
		НовыйУзел.грСтатус = Перечисления.грСтатусыУзловСКС.Активный;
		
		НовыйУзел.ОбменДанными.Загрузка = Истина;
		НовыйУзел.Записать();
		РезультатПоиска.Ссылка = НовыйУзел.Ссылка;
		
		//+++ GRADUM, Теплоухов А.В. 2021_05_28 Задача № 21649{
		УстановитьКлючУзлуСКС_ПоБизнесПартнеру(НовыйУзел.Ссылка, БизнесПартнер);
		//--- GRADUM, Теплоухов А.В. 2021_05_28 Задача № 21649}
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РезультатПоиска.Ссылка = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

// +++Градум; <Болдинов> (23.08.2021)); №.000522535
Процедура СоздатьИзменитьДокументыУниверсальныхСтрок(ДокументВладелец, РезультатЗапроса, КлючДляРегистра, Отправитель, АктуальныеСтроки = Истина, ДопУсловиеОтбора = Неопределено) Экспорт
	  	
	НаборЗаписей = РегистрыСведений.грТекущиеДокументыСтроки.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ДокументВладелец.Установить(ДокументВладелец.Ссылка);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка 		  = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грТекущиеДокументыСтроки");
		ЭлементБлокировки.УстановитьЗначение("ДокументВладелец", ДокументВладелец.Ссылка);
		Блокировка.Заблокировать();
		
		ВходящиеСтроки = РезультатЗапроса.Выбрать();
		Пока  ВходящиеСтроки.Следующий() Цикл
			НовыйДокумент = Документы.грУниверсальнаяСтрока.СоздатьДокумент();
			НовыйДокумент.ДокументВладелец = ДокументВладелец.Ссылка;
			ЗаполнитьЗначенияСвойств(НовыйДокумент,ВходящиеСтроки);
			НовыйДокумент.Записать();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДокументВладелец = ДокументВладелец.Ссылка;
			НоваяЗапись.ДокументСтрока   = НовыйДокумент.Ссылка;

		КонецЦикла;

			
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			
		ЗаписьЖурналаРегистрации("Datareon. Обработка сообщения", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	

КонецПроцедуры // ---Градум; <Болдинов> (23.08.2021)); №.000522535

#КонецОбласти 

#Область ОбработкаИсточниковДозапросов

Процедура ОбработкаИсточниковДозапросов(ДополнительныеПараметры) Экспорт
	
	РегистрыСведений.грИсточникиДозапросов.ЗапуститьФоновыеЗаданияПоРегламентному(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти 

#Область УстаревшиеМетоды

Функция ПолучитьЗначениеXMLТипДата(ЗначениеXML) Экспорт
	Если ЗначениеЗаполнено(ЗначениеXML) Тогда
		Возврат XMLЗначение(Тип("Дата"),ЗначениеXML);
	Иначе    
		Возврат Дата(1,1,1);    
	КонецЕсли; 
КонецФункции

#КонецОбласти 
