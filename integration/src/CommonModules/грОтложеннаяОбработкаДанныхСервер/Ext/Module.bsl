
Функция ЗаписатьЗаданиеОтложеннойОбработкиДанных(ПроцедураОбработки, Описание, Данные, ЗапуститьСразу = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючЗадания = Новый УникальныйИдентификатор;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);  
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Задание", КлючЗадания);
	Блокировка.Заблокировать();
	
	МЗ = РегистрыСведений.грЗаданияОтложеннойОбработкиДанных.СоздатьМенеджерЗаписи();
	МЗ.Задание = КлючЗадания;
	МЗ.Данные = Новый ХранилищеЗначения(Данные);
	МЗ.Описание = Описание;
	МЗ.Процедура = ПроцедураОбработки;
		
	Если ЗапуститьСразу Тогда
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(КлючЗадания);
		ФЗ = ФоновыеЗадания.Выполнить("грОтложеннаяОбработкаДанныхСервер.ВыполнитьЗаданиеОтложеннойОбработкиДанных", ПараметрыЗадания,, Описание);
		
		Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			МЗ.Процесс = ФЗ.УникальныйИдентификатор;
		КонецЕсли;
		
	КонецЕсли;
	
	МЗ.ДатаОбновления = ТекущаяДата();
	МЗ.Записать();
	
	ЗафиксироватьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КлючЗадания;
	
КонецФункции

Функция ПолучитьРезультатОтложенногоЗадания(Знач КлючЗадания) Экспорт 

	Если ТипЗнч(КлючЗадания) = Тип("Строка") Тогда
		КлючЗадания = Новый УникальныйИдентификатор(КлючЗадания);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
	ЭлементБлокировки.УстановитьЗначение("Задание", КлючЗадания);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	грЗаданияОтложеннойОбработкиДанных.Задание КАК Задание,
		|	грЗаданияОтложеннойОбработкиДанных.Процесс КАК Процесс,
		|	грЗаданияОтложеннойОбработкиДанных.Выполнено КАК Выполнено,
		|	грЗаданияОтложеннойОбработкиДанных.Данные КАК Данные,
		|	грЗаданияОтложеннойОбработкиДанных.ДатаОбновления КАК ДатаОбновления,
		|	грЗаданияОтложеннойОбработкиДанных.Описание КАК Описание,
		|	грЗаданияОтложеннойОбработкиДанных.Запущено КАК Запущено,
		|	грЗаданияОтложеннойОбработкиДанных.Процедура КАК Процедура
		|ИЗ
		|	РегистрСведений.грЗаданияОтложеннойОбработкиДанных КАК грЗаданияОтложеннойОбработкиДанных
		|ГДЕ
		|	грЗаданияОтложеннойОбработкиДанных.Задание = &Задание
		|	И грЗаданияОтложеннойОбработкиДанных.Выполнено";
	
	Запрос.УстановитьПараметр("Задание", КлючЗадания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Задание = РезультатЗапроса.Выбрать();
		Задание.Следующий();
		Результат = Задание.Данные.Получить();
		
	КонецЕсли;
	
	ОтменитьТранзакцию();
	
	Возврат Результат;
	
КонецФункции

// Процедура регламентного задания грОтложеннаяОбработкаДанных
// Выполняет запуск фоновых заданий по заданиям из очереди, перезапуск по упавшим заданиям, очистку очереди по выполненным заданиям
//
Процедура грОтложеннаяОбработкаДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Запуск новых заданий
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	БлокировкаПустых = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаПустых.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Процесс", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	БлокировкаПустых.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	грЗаданияОтложеннойОбработкиДанных.Задание КАК Задание,
		|	грЗаданияОтложеннойОбработкиДанных.Выполнено КАК Выполнено,
		|	грЗаданияОтложеннойОбработкиДанных.Данные КАК Данные,
		|	грЗаданияОтложеннойОбработкиДанных.ДатаОбновления КАК ДатаОбновления,
		|	грЗаданияОтложеннойОбработкиДанных.Описание КАК Описание,
		|	грЗаданияОтложеннойОбработкиДанных.Процесс КАК Процесс,
		|	грЗаданияОтложеннойОбработкиДанных.Запущено КАК Запущено,
		|	грЗаданияОтложеннойОбработкиДанных.Процедура КАК Процедура
		|ИЗ
		|	РегистрСведений.грЗаданияОтложеннойОбработкиДанных КАК грЗаданияОтложеннойОбработкиДанных
		|ГДЕ
		|	грЗаданияОтложеннойОбработкиДанных.Выполнено = ЛОЖЬ
		|	И грЗаданияОтложеннойОбработкиДанных.Процесс = &ПустойПроцесс
		|	И грЗаданияОтложеннойОбработкиДанных.Запущено = ЛОЖЬ
		|	И грЗаданияОтложеннойОбработкиДанных.Процедура <> """"";
	
	Запрос.УстановитьПараметр("ПустойПроцесс", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОтменитьТранзакцию();
	Иначе
		
		БлокировкаНаЗапуск = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаНаЗапуск.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Задание", "Задание");
		БлокировкаНаЗапуск.Заблокировать();
		
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(Выборка.Задание);
			ФЗ = ФоновыеЗадания.Выполнить("грОтложеннаяОбработкаДанныхСервер.ВыполнитьЗаданиеОтложеннойОбработкиДанных", ПараметрыЗадания,, Выборка.Процедура + " " + Выборка.Описание);
			
			Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				НЗ = РегистрыСведений.грЗаданияОтложеннойОбработкиДанных.СоздатьНаборЗаписей();
				НЗ.Отбор.Задание = Выборка.Задание;
				ЗаписьНЗ = НЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНЗ, Выборка,,"Процесс");
				ЗаписьНЗ.Процесс = ФЗ.УникальныйИдентификатор;
				
				НЗ.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// Перезапуск заданий при падении фонового процесса
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	грЗаданияОтложеннойОбработкиДанных.Задание КАК Задание,
		|	грЗаданияОтложеннойОбработкиДанных.Процесс КАК Процесс
		|ИЗ
		|	РегистрСведений.грЗаданияОтложеннойОбработкиДанных КАК грЗаданияОтложеннойОбработкиДанных
		|ГДЕ
		|	грЗаданияОтложеннойОбработкиДанных.Выполнено = ЛОЖЬ
		|	И грЗаданияОтложеннойОбработкиДанных.Процесс <> &ПустойПроцесс
		|	И грЗаданияОтложеннойОбработкиДанных.Запущено = ИСТИНА
		|	И грЗаданияОтложеннойОбработкиДанных.Процедура <> """"";
	
	Запрос.УстановитьПараметр("ПустойПроцесс", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Выборка.Процесс);
			Если ФЗ = Неопределено ИЛИ (ТипЗнч(ФЗ) = Тип("ФоновоеЗадание") И ФЗ.Состояние <> СостояниеФоновогоЗадания.Активно) Тогда
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
				БлокировкаПустых = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаПустых.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Задание", Выборка.Задание);
				ЭлементБлокировки.УстановитьЗначение("Процесс", Выборка.Процесс);
				БлокировкаПустых.Заблокировать();
				
				МЗ = РегистрыСведений.грЗаданияОтложеннойОбработкиДанных.СоздатьМенеджерЗаписи();
				МЗ.Задание = Выборка.Задание;
				МЗ.Процесс = Выборка.Процесс;
				МЗ.Прочитать();
				
				Если НЕ МЗ.Выбран() ИЛИ МЗ.Выполнено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПроцедураОбработки = МЗ.Процедура;
				Описание = МЗ.Описание;
				Данные = МЗ.Данные.Получить();
				
				ЗаписьЖурналаРегистрации("Отложенная обработка данных.Перезапуск задания", УровеньЖурналаРегистрации.Ошибка,,, 
										"Процедура: " + ПроцедураОбработки + Символы.ПС +"Описание: " + Описание + Символы.ПС + "Результат: " + МЗ.Результат);
				
				МЗ.Удалить();
				
				ЗафиксироватьТранзакцию();
				
				ЗаписатьЗаданиеОтложеннойОбработкиДанных(ПроцедураОбработки, Описание, Данные, Истина);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Очистка очереди по выполненным заданиям
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	грЗаданияОтложеннойОбработкиДанных.Задание КАК Задание,
		|	грЗаданияОтложеннойОбработкиДанных.Процесс КАК Процесс
		|ИЗ
		|	РегистрСведений.грЗаданияОтложеннойОбработкиДанных КАК грЗаданияОтложеннойОбработкиДанных
		|ГДЕ
		|	грЗаданияОтложеннойОбработкиДанных.Выполнено = ИСТИНА
		|	И грЗаданияОтложеннойОбработкиДанных.Процесс <> &ПустойПроцесс
		|	И грЗаданияОтложеннойОбработкиДанных.Запущено = ИСТИНА";
	
	
	Запрос.УстановитьПараметр("ПустойПроцесс", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Задание", "Задание");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Процесс", "Процесс");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МЗ = РегистрыСведений.грЗаданияОтложеннойОбработкиДанных.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка, "Задание, Процесс");
			МЗ.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыполнитьЗаданиеОтложеннойОбработкиДанных(КлючЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
	ЭлементБлокировки.УстановитьЗначение("Задание", КлючЗадания);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	грЗаданияОтложеннойОбработкиДанных.Задание КАК Задание,
		|	грЗаданияОтложеннойОбработкиДанных.Процесс КАК Процесс,
		|	грЗаданияОтложеннойОбработкиДанных.Выполнено КАК Выполнено,
		|	грЗаданияОтложеннойОбработкиДанных.Данные КАК Данные,
		|	грЗаданияОтложеннойОбработкиДанных.ДатаОбновления КАК ДатаОбновления,
		|	грЗаданияОтложеннойОбработкиДанных.Описание КАК Описание,
		|	грЗаданияОтложеннойОбработкиДанных.Запущено КАК Запущено,
		|	грЗаданияОтложеннойОбработкиДанных.Процедура КАК Процедура
		|ИЗ
		|	РегистрСведений.грЗаданияОтложеннойОбработкиДанных КАК грЗаданияОтложеннойОбработкиДанных
		|ГДЕ
		|	грЗаданияОтложеннойОбработкиДанных.Задание = &Задание";
	
	Запрос.УстановитьПараметр("Задание", КлючЗадания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Задание = РезультатЗапроса.Выбрать();
	Задание.Следующий();
	
	МЗ = РегистрыСведений.грЗаданияОтложеннойОбработкиДанных.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, Задание);
	МЗ.Запущено = Истина;
	МЗ.ДатаОбновления = ТекущаяДата();
	МЗ.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.грЗаданияОтложеннойОбработкиДанных");
	ЭлементБлокировки.УстановитьЗначение("Задание", Задание.Задание);
	ЭлементБлокировки.УстановитьЗначение("Процесс", Задание.Процесс);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	ДанныеЗадания = Задание.Данные.Получить();
	
	РезультатВыполнения = "Не найдена процедура обработки";
	
	Если Задание.Процедура = "СправочникПартнерыПриЗаписи" Тогда
		РезультатВыполнения = ВыполнитьЗадание_СправочникПартнерыПриЗаписи(ДанныеЗадания);
	ИначеЕсли Задание.Процедура = "ДокументИнтересФормаПересчитатьОбщееКоличествоПоОстаткам" Тогда
		РезультатВыполнения = ВыполнитьЗадание_ДокументИнтересФормаПересчитатьОбщееКоличествоПоОстаткам(ДанныеЗадания);
		Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
			ДанныеЗадания = РезультатВыполнения;
			РезультатВыполнения = РезультатВыполнения.Результат;
		КонецЕсли;
			
	ИначеЕсли Задание.Процедура = "ПроведениеДокументов" Тогда
		РезультатВыполнения = ВыполнитьЗадание_ПроведениеДокументов(ДанныеЗадания);
	КонецЕсли;
	
	МЗ_ = РегистрыСведений.грЗаданияОтложеннойОбработкиДанных.СоздатьМенеджерЗаписи();
	МЗ_.Задание = Задание.Задание;
	МЗ_.Процесс = Задание.Процесс;
	МЗ_.Прочитать();
	
	МЗ = РегистрыСведений.грЗаданияОтложеннойОбработкиДанных.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, МЗ_);
	МЗ.Результат = РезультатВыполнения;
	МЗ.ДатаОбновления = ТекущаяДата();
	
	МЗ.Данные = Новый ХранилищеЗначения(ДанныеЗадания);
	
	Если РезультатВыполнения = "" Тогда
		МЗ.Выполнено = Истина;
	КонецЕсли;
	
	МЗ.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ВыполнитьЗадание_СправочникПартнерыПриЗаписи(ДанныеЗадания)
	
	Результат = "";
	
	Попытка
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ДанныеЗадания.Ссылка);
		
	Исключение
		
		Результат = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Отложенная обработка данных.ВыполнитьЗадание_ПриЗаписиПартнера", УровеньЖурналаРегистрации.Ошибка,,, 
								"Объект:" + ДанныеЗадания.Ссылка + Символы.ПС + "Результат: " + Результат);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗадание_ДокументИнтересФормаПересчитатьОбщееКоличествоПоОстаткам(ДанныеЗадания) Экспорт
	
	Результат = "";
	
	Попытка
		
		СтрокаНадписи = Документы.CRM_Интерес.ПересчитатьОбщееКоличествоПоОстаткам(ДанныеЗадания.АГТ_SKU, ДанныеЗадания.ТочкаВыдачи, ДанныеЗадания.Организация, ДанныеЗадания.Департамент, ДанныеЗадания.Регион);
		Результат = Новый Структура("СтрокаНадписи, Результат", СтрокаНадписи, "");
		
	Исключение
		
		Результат = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Отложенная обработка данных.ВыполнитьЗадание_ДокументИнтересФормаПересчитатьОбщееКоличествоПоОстаткам", УровеньЖурналаРегистрации.Ошибка,,, 
								"Объект:" + ДанныеЗадания.АГТ_SKU + Символы.ПС + "Результат: " + Результат);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗадание_ПроведениеДокументов(ДанныеЗадания)
	
	Результат = "";
	
	Попытка
		
		Для Каждого Док Из ДанныеЗадания Цикл
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
		
	Исключение
		
		Результат = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Отложенная обработка данных.ВыполнитьЗадание_ПроведениеДокументов", УровеньЖурналаРегистрации.Ошибка,,,Результат);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


