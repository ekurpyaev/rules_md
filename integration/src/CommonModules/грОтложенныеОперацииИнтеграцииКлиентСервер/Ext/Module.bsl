
#Область ПараметрыДерева

Функция СоответствиеСостоянийФоновыхЗаданий() Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ПредопределенноеЗначение("СостояниеФоновогоЗадания.Активно")			, ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.Активно"));
	Соответствие.Вставить(ПредопределенноеЗначение("СостояниеФоновогоЗадания.Завершено")		, ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.Завершено"));
	Соответствие.Вставить(ПредопределенноеЗначение("СостояниеФоновогоЗадания.ЗавершеноАварийно"), ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.ЗавершеноАварийно"));
	Соответствие.Вставить(ПредопределенноеЗначение("СостояниеФоновогоЗадания.Отменено")			, ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.Отменено"));
	
	Возврат Соответствие;
	
КонецФункции // СоответствиеСостоянийФоновыхЗаданий()

Функция СоответствиеСостояниеКартинка() Экспорт

	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.Активно")			, 0);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.Завершено")			, 1);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.ЗавершеноАварийно")	, 2);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.грСостоянияФоновыхЗаданий.Отменено")			, 2);
	
	Возврат Соответствие;

КонецФункции // СостояниеФоновогоЗаданияПеречисление()

Функция ПараметрыДереваЗаданий(Форма) Экспорт

	ПараметрыДерева = Новый Структура;
	ПараметрыДерева.Вставить("ИмяДерева"							, "ДеревоЗаданий");
	ПараметрыДерева.Вставить("ИмяТаблицыИдентификаторов"			, СтрШаблон("ТаблицаИдентифкаторов%1", ПараметрыДерева.ИмяДерева));
	ПараметрыДерева.Вставить("ИмяКолонкиТекущиеДанные"				, СтрШаблон("КолонкиТекущиеДанные%1", ПараметрыДерева.ИмяДерева));
	ПараметрыДерева.Вставить("ТекущиеДанные"						, Новый Структура(Форма[ПараметрыДерева.ИмяКолонкиТекущиеДанные]));
	
	Возврат ПараметрыДерева;

КонецФункции // ПараметрыДереваЗаданий()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПараметрыЗапускаРегламентныхЗаданий
//
// Описание: возвращает параметры запуска реглментных заданий
//
// Возвращаемое значение: 
//  - Параметры - Структура
//
Функция ПараметрыЗапускаРегламентныхЗаданий() Экспорт
	
	Параметры	= Новый Соответствие;
	Операции	= Операции();
	
	Для каждого Операция Из Операции Цикл
		
		Для каждого Метод Из Операция.Значение Цикл
		
			Параметры.Вставить(Метод, ПараметрыМетодаЗапускаРегламентныхЗаданий(Операция.Ключ, Метод));
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции // ПараметрыЗапускаРегламентныхЗаданий()

Функция ПараметрыЗапускаФоновыхЗаданий(ДополнительныеПараметры) Экспорт

	Метод								= ДополнительныеПараметры.Метод;
	ПараметрыФоновогоЗаданияПоМетоду	= ПараметрыЗапускаФоновогоЗаданияПоМетоду(Метод);
	
	Форма = Неопределено;
	Если ДополнительныеПараметры.Свойство("Форма", Форма)
		И ПараметрыФоновогоЗаданияПоМетоду.Операция = ПредопределенноеЗначение("Перечисление.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов")
		Тогда
	
		УникальныйИдентификатор		= Форма.УникальныйИдентификатор;
		Дозапросы					= Форма.Элементы.Список.ВыделенныеСтроки;
		ВсеЗаписи					= Форма.ВсеЗаписи;
		ОчиститьОтложенныеДозапросы	= Форма.ОчиститьОтложенныеДозапросы;
		
	Иначе
		
		УникальныйИдентификатор		= Новый УникальныйИдентификатор;
		Дозапросы					= Новый Массив;
		ВсеЗаписи					= Истина;
		ОчиститьОтложенныеДозапросы	= Ложь;
		
	КонецЕсли;
	
	ИдексРазделителя	= Найти(ПараметрыФоновогоЗаданияПоМетоду.Наименование, ":");
	ПрефиксЗадания		= Лев(ПараметрыФоновогоЗаданияПоМетоду.Наименование, ИдексРазделителя);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить( "Метод"								, Метод);
	ПараметрыЗадания.Вставить( "Операция"							, ПараметрыФоновогоЗаданияПоМетоду.Операция);
	ПараметрыЗадания.Вставить( "НаименованиеЗадания"				, ПараметрыФоновогоЗаданияПоМетоду.Наименование);
	ПараметрыЗадания.Вставить( "НаименованиеЗаданияИсточникиДанных"	, СтрШаблон("%1 ОбработатьИсточникиДанных", ПрефиксЗадания));
	ПараметрыЗадания.Вставить( "ВыполняемыйМетод"					, ПараметрыФоновогоЗаданияПоМетоду.ВыполняемыйМетод);
	ПараметрыЗадания.Вставить( "ВыполняемыйМетодИсточникиДанных"	, "грОтложенныеОперацииИнтеграции.ОбработатьИсточникиДанных");
	ПараметрыЗадания.Вставить( "УникальныйИдентификатор"			, УникальныйИдентификатор);
	ПараметрыЗадания.Вставить( "ВсеЗаписи"							, ВсеЗаписи);
	
	Если ПараметрыФоновогоЗаданияПоМетоду.Операция = ПредопределенноеЗначение("Перечисление.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов") Тогда
	
		ПараметрыЗадания.Вставить( "Дозапросы"						, Дозапросы);
		ПараметрыЗадания.Вставить( "ОчиститьОтложенныеДозапросы"	, ОчиститьОтложенныеДозапросы);
	
	КонецЕсли;
	
	Возврат ПараметрыЗадания;
	
КонецФункции // ПараметрыЗапускаФоновыхЗаданий()

Функция ПараметрыЗапускаМетодовИзМетодаИсточникиДанных(ПараметрыОбработки, ДанныеДляОбработки) Экспорт
	
	ЭтоПараметрыЗаданияОбработкиПакетовИнтеграции = Ложь;
	Если ПараметрыОбработки.Свойство("ЭтоПараметрыЗаданияОбработкиПакетовИнтеграции") Тогда
		ЭтоПараметрыЗаданияОбработкиПакетовИнтеграции = Истина;
	КонецЕсли; 
	
	Если ЭтоПараметрыЗаданияОбработкиПакетовИнтеграции Тогда
		НаименованиеЗадания		= "Заполнение регистра сведений: грЗаданияОбработкиПакетовИнтеграции";
		ВыполняемыйМетод		= "грОтложенныеОперацииИнтеграции.ДобавитьЗаданияОбработкиПакетовИнтеграции";
	Иначе
		НаименованиеЗадания		= ПараметрыОбработки.НаименованиеЗадания;
		ВыполняемыйМетод		= ПараметрыОбработки.ВыполняемыйМетод;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить( "НаименованиеЗадания"		, НаименованиеЗадания );
	ПараметрыЗадания.Вставить( "ВыполняемыйМетод"			, ВыполняемыйМетод );
	ПараметрыЗадания.Вставить( "ДанныеДляОбработки"			, ДанныеДляОбработки );
	ПараметрыЗадания.Вставить( "УникальныйИдентификатор"	, Новый УникальныйИдентификатор );
	ПараметрыЗадания.Вставить( "Метод"						, ПараметрыОбработки.Метод );
	
	Возврат ПараметрыЗадания;
	
КонецФункции // ПараметрыЗапускаМетодовИзМетодаИсточникиДанных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Операции()
	
	Соответствие = Новый Соответствие;
	
	//Источники дозапросов
	Массив = Новый Массив;
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.грМетодыОтложенныхОперацийИнтеграции.ОбработатьПакеты"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.грМетодыОтложенныхОперацийИнтеграции.ОтправитьДозапросы"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.грМетодыОтложенныхОперацийИнтеграции.ОчиститьОтложенныеДозапросы"));
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.грОтложенныеОперацииИнтеграции.ИсточникиДозапросов"),
		Массив);
		
	//ИзменениеОбъектов
	Массив = Новый Массив;
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.грМетодыОтложенныхОперацийИнтеграции.ПровестиДокументы"));
	
	//+++ GRADUM, Теплоухов А.В. 2021_06_02 Задача № 21583{
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.грМетодыОтложенныхОперацийИнтеграции.ВыполнитьСборку"));
	//--- GRADUM, Теплоухов А.В. 2021_06_02 Задача № 21583}
	
	//+++ GRADUM, Теплоухов А.В. 2021_08_08 Задача СУРВ № 000517264{
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.грМетодыОтложенныхОперацийИнтеграции.ЗарегистрироватьЦеныПоставщика"));
	//--- GRADUM, Теплоухов А.В. 2021_08_08 Задача СУРВ № 000517264}
	
	//+++ GRADUM, Теплоухов А.В. 2021_06_02 Задача № 21751{
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.грМетодыОтложенныхОперацийИнтеграции.ПоместитьВОчередьОтложенногоПроведения"));
	//--- GRADUM, Теплоухов А.В. 2021_06_02 Задача № 21751}
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.грОтложенныеОперацииИнтеграции.ИзменениеОбъектов"),
		Массив);
	
	Возврат Соответствие;
	
КонецФункции // Операции() 

Функция ПараметрыМетодаЗапускаРегламентныхЗаданий(Операция, Метод)
	
	ИмяОперации	= Строка(Операция);
	ИмяМетода	= Строка(Метод);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИмяМетода"			, ИмяМетода);
	ПараметрыМетода.Вставить("ИмяОперации"			, ИмяОперации);
	ПараметрыМетода.Вставить("Операция"				, Операция);
	ПараметрыМетода.Вставить("Наименование"			, СтрШаблон("%1 %2: %3", НСтр("ru = 'Отложенная операция'"), ИмяОперации, ИмяМетода));
	ПараметрыМетода.Вставить("ВыполняемыйМетод"		, СтрШаблон("%1.%2", "грОтложенныеОперацииИнтеграции", ИмяМетода));
	
	Возврат ПараметрыМетода;
	
КонецФункции // ПараметрыМетодаЗапускаРегламентныхЗаданий() 

Функция ПараметрыЗапускаФоновогоЗаданияПоМетоду(Метод)

	Возврат ПараметрыЗапускаРегламентныхЗаданий().Получить(Метод);

КонецФункции // ПараметрыЗапускаФоновогоЗаданияПоМетоду()

#КонецОбласти

#Область Параметры

#КонецОбласти
