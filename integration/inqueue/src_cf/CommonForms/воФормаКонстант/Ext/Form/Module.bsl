
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаДлительностиХранения.Загрузить(воРаботаСКонстантамиПолныеПраваВызовСервера.ПолучитьДлительностьХранения());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МаксимальноеЧислоОткладыванияСообщенийВ1СПриИзменении(Элемент)
	
	УстановитьЗначениеКонстанты("воМаксимальноеЧислоОткладыванияСообщенийВ1С");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнутреннююОчередьПриИзменении(Элемент)
	
	УстановитьЗначениеКонстанты("воИспользоватьВнутреннююОчередь");
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьХраненияВходящихСообщенийПриИзменении(Элемент)
	
	УстановитьЗначениеКонстанты("воДлительностьХраненияВходящихСообщений");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПотоковОбработкиОчередейПриИзменении(Элемент)
	
	СтруктураВерности = СтруктураВерностиЗаполнения("воКоличествоПотоковОбработкиОчередей");
	Если СтруктураВерности.Ошибка Тогда
		воОбщегоНазначенияВызовСервера.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка при заполнении константы.
                                                                          |Общее количество потоков: %1 меньше или зарезервированным  потокам. Общее: %2, для очередей: %3.'")
		, Формат(СтруктураВерности.ТекущееЗначение, "ЧДЦ=0; ЧН=0")
		, Формат(СтруктураВерности.ОбщееКоличествоЗарезервированныхПотоков, "ЧДЦ=0; ЧН=0")
		, Формат(СтруктураВерности.ОбщееКоличествоЗарезервированныхПотоковПоОчередям, "ЧДЦ=0; ЧН=0")));
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеКонстанты("воКоличествоПотоковОбработкиОчередей");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЗарезервированныхПотоковОбработкиОчередейПриИзменении(Элемент)
	
	СтруктураВерности = СтруктураВерностиЗаполнения("воКоличествоЗарезервированныхПотоковОбработкиОчередей");
	Если СтруктураВерности.Ошибка Тогда
		воОбщегоНазначенияВызовСервера.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка при заполнении константы.
                                                                          |Общее количество потоков: %1 меньше или зарезервированным  потокам. Общее: %2, для очередей: %3.'")
		, Формат(СтруктураВерности.ОбщееКоличествоПотоков, "ЧДЦ=0; ЧН=0")
		, Формат(СтруктураВерности.ТекущееЗначение, "ЧДЦ=0; ЧН=0")
		, Формат(СтруктураВерности.ОбщееКоличествоЗарезервированныхПотоковПоОчередям, "ЧДЦ=0; ЧН=0")));
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеКонстанты("воКоличествоЗарезервированныхПотоковОбработкиОчередей");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПотоковОбработкиПриоритетовПриИзменении(Элемент)
	
	УстановитьЗначениеКонстанты("воКоличествоПотоковОбработкиПриоритетов");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПотоковБалансировкиНагрузкиПриИзменении(Элемент)

	УстановитьЗначениеКонстанты("воКоличествоПотоковБалансировкиНагрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура воФорматСообщенийПриИзменении(Элемент)
	
	УстановитьЗначениеКонстанты("воФорматСообщений");
	
КонецПроцедуры

&НаКлиенте
Процедура воМаксимальноеКоличествоВыбираемыхСообщенийПриИзменении(Элемент)

	УстановитьЗначениеКонстанты("воМаксимальноеКоличествоВыбираемыхСообщений");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДлительностиХранения

&НаКлиенте
Процедура ТаблицаДлительностиХраненияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	УстановитьТаблицуДлительностиХранения();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДлительностиХраненияПослеУдаления(Элемент)
	
	УстановитьТаблицуДлительностиХранения();	
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Функция - Установить значение константы
//
// Параметры:
//  ИмяКонстанты - константа, значение которой необходимо установить.
//  ЗначениеКонстанты - устанавливаемое значение.
// 
// Возвращаемое значение:
//	Булево - Изменение константы выполнено
//
Функция УстановитьЗначениеКонстанты(ИмяКонстанты)
	
	ЗначениеКонстанты = КонстантыНабор[ИмяКонстанты];
	
	ТекущееЗначение = ПолучитьЗначениеКонстанты(ИмяКонстанты);
	
	Если Не ТекущееЗначение = ЗначениеКонстанты Тогда
		
		Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
		ОбновитьПовторноИспользуемыеЗначения();
		Возврат Истина;
		
	Иначе
		 
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция - Получить значение константы
//
// Параметры:
//	ИмяКонстанты - имя константы, значение которой нужно получить.
//
// Возвращаемое значение:
//	Значение константы, определенной по имени.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты)
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции	

&НаСервере
Процедура УстановитьТаблицуДлительностиХранения()
	
	воРаботаСКонстантамиПолныеПраваВызовСервера.УстановитьДлительностьХранения(ТаблицаДлительностиХранения.Выгрузить());
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Функция СтруктураВерностиЗаполнения(ИмяКонстанты)
	
	ЗначениеКонстанты = КонстантыНабор[ИмяКонстанты];
	ТекущееЗначение = ПолучитьЗначениеКонстанты(ИмяКонстанты);
	
	Если ИмяКонстанты = "воКоличествоПотоковОбработкиОчередей" Тогда
		ИзменяемоеКоличество = ТекущееЗначение - ЗначениеКонстанты;
	Иначе
		ИзменяемоеКоличество = ЗначениеКонстанты - ТекущееЗначение;
	КонецЕсли;
	
	СтруктураВозврата = воРаботаСКонстантамиПолныеПраваВызовСервера.ПроверитьЗаполнениеЗарезервированныхПотоков(ИзменяемоеКоличество);
	СтруктураВозврата.Вставить("ЗначениеКонстанты", ЗначениеКонстанты);
	СтруктураВозврата.Вставить("ТекущееЗначение", ТекущееЗначение);
	
	Если СтруктураВозврата.Ошибка Тогда
		КонстантыНабор[ИмяКонстанты] = ТекущееЗначение;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти