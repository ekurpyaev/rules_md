
#Область ПрограммныйИнтерфейс

// Процедура - Поместить в очередь входящих
//
// Параметры:
//  Идентификатор	- Строка - идентификатор сообщения. 
//  КлассСообщения	- Строка - класс сообщения. 
//  ОбъектСобытия	- Строка - сообщение ESB. 
//  форматПакета	- Перечисление.воФорматыСообщений - формат поступившего сообщения. 
//  ДатаРегистрации	- Дата - дата регистрации в очереди входящих сообщений ESB.
//
// Возвращаемое значение:
//  Перечисления.воСтатусыСообщений - состояние сообщения
//
Функция ПоместитьВОчередьВходящих( Идентификатор, КлассСообщения, ОбъектСобытия, форматПакета, ДатаРегистрации ) Экспорт
		
	СостояниеСообщения = Перечисления.воСтатусыСообщений.Обработано;

	Попытка
		
		ОбъектСообщение = воОбщегоНазначенияВызовСервера.ПолучитьОбъектXDTO( форматПакета, ОбъектСобытия);
		
	Исключение
		
		// Сообщение не валидно
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось десериализовать сообщение %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СостояниеСообщения = Перечисления.воСтатусыСообщений.НеВалидно;
				
		Возврат СостояниеСообщения;
		
	КонецПопытки;
	
	ИдентификаторСообщения = ?(ТипЗнч(Идентификатор) = Тип("Строка"), Новый УникальныйИдентификатор(Идентификатор), Идентификатор);
	УстановитьСостояниеСообщения(ИдентификаторСообщения, Перечисления.воСтатусыСообщений.Новое);
	
	Набор = РегистрыСведений.воОчередьВходящихСообщений.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	ТекЗапись.ДатаРегистрации = ДатаРегистрации;
	ТекЗапись.ФорматСообщения = форматПакета;
	ТекЗапись.КлассСообщения = КлассСообщения;
	
	ДатаСоздания = XMLЗначение( Тип("Дата"), ОбъектСообщение.CreationTime );
	ТекЗапись.ДатаСоздания = МестноеВремя( ДатаСоздания, ЧасовойПояс());
	
	ТекЗапись.ВнешняяСистема = ПолучитьВнешнююСистему(ОбъектСообщение.Source);
	
	ТекЗапись.Хранилище = Новый ХранилищеЗначения(ОбъектСобытия);
	
	Если ТипЗнч(ОбъектСобытия) = Тип("Строка") Тогда
		ТекЗапись.ДлинаСообщения = СтрДлина(ОбъектСобытия);
	КонецЕсли;
	
	ТекЗапись.Очередь = ПолучитьОчередь(КлассСообщения, ТекЗапись.ВнешняяСистема); 
	
	Набор.Записать(Истина);
		
	Возврат СостояниеСообщения;
	
КонецФункции

// Процедура - Установить состояние сообщения
//
// Параметры:
//  ИдентификаторСообщения	 - УникальныйИдентификатор - идентификатор сообщения.
//  НовоеСостояние	 - Перечисление.воСтатусыСообщений - новое состояние сообщения. 
//	Задержка		 - Число - Секунд задержки
//	ОписаниеОшибки	 - Строка - Описание ошибки
//	ИндексПотока	 - Число - индекс потока
//
Процедура УстановитьСостояниеСообщения(ИдентификаторСообщения, НовоеСостояние, Задержка = 0, ОписаниеОшибки = "", ИндексПотока = 0) Экспорт
	
	Набор = воВходящиеОчередиПовтИспВызовСервера.ПолучитьОбъектНабораЗаписейСостоянияСообщений();
	
	Набор.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	воСостояниеВходящихСообщений.КоличествоОткладываний КАК КоличествоОткладываний
	               |ИЗ
	               |	РегистрСведений.воСостояниеВходящихСообщений КАК воСостояниеВходящихСообщений
	               |ГДЕ
	               |	воСостояниеВходящихСообщений.ИдентификаторСообщения = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоОткладываний = Выборка.КоличествоОткладываний;
	Иначе
		КоличествоОткладываний = 0;
	КонецЕсли;
		
	Если НовоеСостояние = Перечисления.воСтатусыСообщений.ОжиданиеОбработки И Задержка <> 0 Тогда
		КоличествоОткладываний = КоличествоОткладываний + 1;
		МаксимальноеКоличествоОткладываний = Константы.воМаксимальноеЧислоОткладыванияСообщенийВ1С.Получить();
		Если МаксимальноеКоличествоОткладываний = 0 Тогда
			Константы.воМаксимальноеЧислоОткладыванияСообщенийВ1С.Установить(30);
			МаксимальноеКоличествоОткладываний = 30;
		КонецЕсли;
		Если КоличествоОткладываний > МаксимальноеКоличествоОткладываний Тогда
			НовоеСостояние = Перечисления.воСтатусыСообщений.ОшибкаОбработки;
			ОписаниеОшибки = НСтр("ru = 'Превышено максимальное количество попыток откладывания'");
		КонецЕсли;
	КонецЕсли;
	
	
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
		
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ДатаИзменения = ТекущаяДатаСеанса();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	ТекЗапись.СтатусСообщения = НовоеСостояние;
	ТекЗапись.Задержка = Задержка;
	ТекЗапись.ЗадержкаЧисло = ПеревестиДатуВЧисло(ТекЗапись.ДатаИзменения, ТекЗапись.Задержка);
	ТекЗапись.ОписаниеОшибки = ОписаниеОшибки;
	ТекЗапись.ИндексПотока = ИндексПотока;
	ТекЗапись.КоличествоОткладываний = КоличествоОткладываний;
	
	Набор.Записать(Истина);	
	
КонецПроцедуры

// Процедура - Запустить задания обработки входящих сообщений
// 
Процедура ЗапуститьЗаданияОбработкиВходящихСообщений() Экспорт 

	Если НЕ воРаботаСКонстантамиПолныеПраваВызовСервера.ПолучитьЗначениеКонстанты( "воИспользоватьВнутреннююОчередь" ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("воВходящиеОчередиВызовСервера.ЗапуститьЗаданияОбработкиВходящихСообщений_Диспетчер", , "ЗапуститьЗаданияОбработкиВходящихСообщений_Диспетчер", "ОбработатьВходящееСообщениеБезОчереди_Диспетчер");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Запустить задания очистки очереди входящих сообщений
//
Процедура ЗапуститьЗаданияОчисткиОчередиВходящихСообщений() Экспорт 
	
	Если НЕ воРаботаСКонстантамиПолныеПраваВызовСервера.ПолучитьЗначениеКонстанты( "воИспользоватьВнутреннююОчередь" ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("воВходящиеОчередиВызовСервера.ОчиститьОчередьВходящихСообщений",,"ОчисткаОчередиВходящихСообщений","ОчисткаОчередиВходящихСообщений");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Запустить задание обновления статистики внутренних очередей
//
Процедура ЗапуститьЗаданиеОбновленияСтатистикиВнутреннихОчередей() Экспорт
	
	Если НЕ воРаботаСКонстантамиПолныеПраваВызовСервера.ПолучитьЗначениеКонстанты( "воИспользоватьВнутреннююОчередь" ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("воВходящиеОчередиВызовСервера.ЗафиксироватьСтатистикуВнутреннихОчередей",,"ЗафиксироватьСтатистикуВнутреннихОчередей","ЗафиксироватьСтатистикуВнутреннихОчередей");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Зафиксировать статистику внутренних очередей
//  
Процедура ЗафиксироватьСтатистикуВнутреннихОчередей() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	воВходящиеВнутренниеОчереди.Ссылка КАК Очередь
	               |ПОМЕСТИТЬ ВТВсеОчереди
	               |ИЗ
	               |	Справочник.воВходящиеВнутренниеОчереди КАК воВходящиеВнутренниеОчереди
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.воВходящиеВнутренниеОчереди.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	воОчередьВходящихСообщений.Очередь КАК Очередь,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ воОчередьВходящихСообщений.ИдентификаторСообщения) КАК КоличествоСообщенийНаОбработку,
	               |	0 КАК КоличествоСообщений
	               |ПОМЕСТИТЬ ВТКоличествоСообщений
	               |ИЗ
	               |	РегистрСведений.воОчередьВходящихСообщений КАК воОчередьВходящихСообщений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.воСостояниеВходящихСообщений КАК воСостояниеВходящихСообщений
	               |		ПО воОчередьВходящихСообщений.ИдентификаторСообщения = воСостояниеВходящихСообщений.ИдентификаторСообщения
	               |ГДЕ
	               |	воСостояниеВходящихСообщений.СтатусСообщения В(&РабочиеСтатусы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	воОчередьВходящихСообщений.Очередь
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	воОчередьВходящихСообщений.Очередь,
	               |	0,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ воОчередьВходящихСообщений.ИдентификаторСообщения)
	               |ИЗ
	               |	РегистрСведений.воОчередьВходящихСообщений КАК воОчередьВходящихСообщений
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	воОчередьВходящихСообщений.Очередь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТВсеОчереди.Очередь КАК Очередь,
	               |	СУММА(ЕСТЬNULL(ВТКоличествоСообщений.КоличествоСообщений, 0)) КАК КоличествоСообщений,
	               |	СУММА(ЕСТЬNULL(ВТКоличествоСообщений.КоличествоСообщенийНаОбработку, 0)) КАК КоличествоСообщенийНаОбработку
	               |ИЗ
	               |	ВТВсеОчереди КАК ВТВсеОчереди
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСообщений КАК ВТКоличествоСообщений
	               |		ПО (ВТКоличествоСообщений.Очередь = ВТВсеОчереди.Очередь)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТВсеОчереди.Очередь";
	
	Запрос.УстановитьПараметр("РабочиеСтатусы", воВходящиеОчередиПовтИспВызовСервера.ПолучитьСписокРабочихСтатусов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.воСтатистикаВнутреннихОчередей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
				   
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - Запустить задания обработки входящих сообщений Диспетчер
//
Процедура ЗапуститьЗаданияОбработкиВходящихСообщений_Диспетчер() Экспорт
	
	// ++ Установка константы по умолчанию
	Если Константы.воКоличествоПотоковОбработкиОчередей.Получить() = 0 Тогда
		Константы.воКоличествоПотоковОбработкиОчередей.Установить(10);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	// -- Установка константы по умолчанию
	
	// ++ Очистка зависших сообщений
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяМетода", "воВходящиеОчередиВызовСервера.ОбработатьВходящиеСообщения");
	СтруктураОтбора.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Обработчики = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
	МассивКлючей = Новый Массив;
	Для Каждого Задание Из Обработчики Цикл
		МассивКлючей.Добавить(Задание.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	воВходящиеСообщенияВОбработке.ИдентификаторСообщения КАК ИдентификаторСообщения
	               |ИЗ
	               |	РегистрСведений.воВходящиеСообщенияВОбработке КАК воВходящиеСообщенияВОбработке
	               |ГДЕ
	               |	НЕ воВходящиеСообщенияВОбработке.КлючЗадания В (&МассивКлючей)";
	Запрос.УстановитьПараметр("МассивКлючей", МассивКлючей);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.воВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
		Менеджер.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		Менеджер.Удалить();
	КонецЦикла;
	// -- Очистка зависших сообщений
	
	// ++ Запрос статистики сообщений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	воОчередьВходящихСообщений.Очередь КАК Очередь,
	               |	ЕстьNULL(воОчередьВходящихСообщений.Очередь.Приоритет, 0) КАК Приоритет,
	               |	ЕстьNULL(воОчередьВходящихСообщений.Очередь.КоличествоЗарезервированныхПотоков, 0) КАК КоличествоРезервныхНастройка,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ воОчередьВходящихСообщений.ИдентификаторСообщения) КАК СообщенийВОбработке
	               |ИЗ
	               |	РегистрСведений.воОчередьВходящихСообщений КАК воОчередьВходящихСообщений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.воСостояниеВходящихСообщений КАК СостояниеСообщений
	               |		ПО воОчередьВходящихСообщений.ИдентификаторСообщения = СостояниеСообщений.ИдентификаторСообщения
	               |			И (СостояниеСообщений.СтатусСообщения В (&СписокСтатусов))
	               |			И (СостояниеСообщений.ЗадержкаЧисло <= &ЗадержкаЧисло)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.воВходящиеСообщенияВОбработке КАК воВходящиеСообщенияВОбработке
	               |		ПО воОчередьВходящихСообщений.ИдентификаторСообщения = воВходящиеСообщенияВОбработке.ИдентификаторСообщения
	               |ГДЕ
	               |	(НЕ воОчередьВходящихСообщений.Очередь.ОчередьОтключена
	               |			ИЛИ воОчередьВходящихСообщений.Очередь = ЗНАЧЕНИЕ(Справочник.воВходящиеВнутренниеОчереди.ПустаяСсылка))
	               |	И воВходящиеСообщенияВОбработке.ИдентификаторСообщения ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	воОчередьВходящихСообщений.Очередь";
	Запрос.УстановитьПараметр("СписокСтатусов", воВходящиеОчередиПовтИспВызовСервера.ПолучитьСписокРабочихСтатусов());
	Запрос.УстановитьПараметр("ЗадержкаЧисло", ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
	ТаблицаСтатистики = Запрос.Выполнить().Выгрузить();
	// -- Запрос статистики сообщений
	
	// ++ Проверяем Приоритеты
	Если ТаблицаСтатистики.Итог("Приоритет") = 0 Тогда
		ТаблицаСтатистики.ЗаполнитьЗначения(1, "Приоритет");
	КонецЕсли;
	// -- Проверяем Приоритеты
	
	// ++ Добавление нужных колонок
	ТаблицаСтатистики.Колонки.Добавить("КоличествоРезервных", Новый ОписаниеТипов("Число"));
	ТаблицаСтатистики.Колонки.Добавить("ЗапуститьОбщих", Новый ОписаниеТипов("Число"));
	ТаблицаСтатистики.Колонки.Добавить("ЗапуститьПриоритет", Новый ОписаниеТипов("Число"));
	ТаблицаСтатистики.Колонки.Добавить("ЗапуститьНагрузка", Новый ОписаниеТипов("Число"));
	// -- Добавление нужных колонок
	
	// ++ определение количества заданий по настройкам
	КоличествоВсехОбработчиковНастройка = Константы.воКоличествоПотоковОбработкиОчередей.Получить();
	КоличествоОбработчиковПриоритетНастройка = Константы.воКоличествоПотоковОбработкиПриоритетов.Получить();
	КоличествоОбработчиковНагрузкаНастройка = Константы.воКоличествоПотоковБалансировкиНагрузки.Получить();
	КоличествоОбработчиковОбщийРезерв = Константы.воКоличествоЗарезервированныхПотоковОбработкиОчередей.Получить();
	ЗапросРезервных = Новый Запрос;
	ЗапросРезервных.Текст = "ВЫБРАТЬ
	                        |	СУММА(воВходящиеВнутренниеОчереди.КоличествоЗарезервированныхПотоков) КАК КоличествоЗарезервированныхПотоков
	                        |ИЗ
	                        |	Справочник.воВходящиеВнутренниеОчереди КАК воВходящиеВнутренниеОчереди";
	ВыборкаРезервных = ЗапросРезервных.Выполнить().Выбрать();
	Если ВыборкаРезервных.Следующий() Тогда
		КоличествоРезервныхИзСправочникаОчередей = ВыборкаРезервных.КоличествоЗарезервированныхПотоков;
	Иначе
		КоличествоРезервныхИзСправочникаОчередей = 0;
	КонецЕсли;
	// -- определение количества заданий по настройкам
	
	// ++ Определение количества работающих заданий
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяМетода", "воВходящиеОчередиВызовСервера.ОбработатьВходящиеСообщения");
	СтруктураОтбора.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Обработчики = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
	КоличествоВсехОбработчиков = Обработчики.Количество();
	
	КоличествоОбщихОбработчиков = 0;
	КоличествоОбработчиковПриоритет = 0;
	КоличествоОбработчиковНагрузка = 0;
	Для Каждого Задание Из Обработчики Цикл
		Если СтрНачинаетсяС(Задание.Ключ, "ОбщийОбработчик") Тогда
			КоличествоОбщихОбработчиков = КоличествоОбщихОбработчиков + 1;	
		КонецЕсли;
		Если СтрНачинаетсяС(Задание.Ключ, "ОбщийПриоритет") Тогда
			КоличествоОбработчиковПриоритет = КоличествоОбработчиковПриоритет + 1;	
		КонецЕсли;
		Если СтрНачинаетсяС(Задание.Ключ, "ОбщийНагрузка") Тогда
			КоличествоОбработчиковНагрузка = КоличествоОбработчиковНагрузка + 1;	
		КонецЕсли;
		Если СтрНачинаетсяС(Задание.Ключ, "РезервныйОчередь") Тогда
			УИДОчередиСтрокой = Прав(Задание.Ключ, 36);
			УИДОчереди = Новый УникальныйИдентификатор(УИДОчередиСтрокой);
			Очередь = Справочники.воВходящиеВнутренниеОчереди.ПолучитьСсылку(УИДОчереди);
			СтруктураПоиска = Новый Структура("Очередь", Очередь);
			МассивСтрок = ТаблицаСтатистики.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаТаблицыСтатистики = МассивСтрок.Получить(0);
				СтрокаТаблицыСтатистики.КоличествоРезервных = СтрокаТаблицыСтатистики.КоличествоРезервных + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// -- Определение количества работающих заданий
	
	// ++ Определение сколько можно запустить потоков
	МожноЗапуститьНагрузка = КоличествоОбработчиковНагрузкаНастройка - КоличествоОбработчиковНагрузка;
	Если МожноЗапуститьНагрузка < 0 Тогда
		МожноЗапуститьНагрузка = 0;
	КонецЕсли;
	
	МожноЗапуститьПриоритет = КоличествоОбработчиковПриоритетНастройка - КоличествоОбработчиковПриоритет;
	Если МожноЗапуститьПриоритет < 0 Тогда
		МожноЗапуститьПриоритет = 0;
	КонецЕсли;
	
	МожноЗапуститьОбщих = КоличествоВсехОбработчиковНастройка - КоличествоОбщихОбработчиков - КоличествоОбработчиковОбщийРезерв - КоличествоРезервныхИзСправочникаОчередей;
	Если МожноЗапуститьОбщих < 0 Тогда
		МожноЗапуститьОбщих = 0;
	КонецЕсли;
	
	Если МожноЗапуститьНагрузка + МожноЗапуститьОбщих + МожноЗапуститьПриоритет + (ТаблицаСтатистики.Итог("КоличествоРезервныхНастройка") - ТаблицаСтатистики.Итог("КоличествоРезервных")) <= 0 Тогда
		Возврат;
	КонецЕсли;
	// -- Определение сколько можно запустить потоков
	
	// ++ Распределение потоков по очередям
	МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("СообщенийВОбработке");
	МассивРаспределения = РаспределитьСуммуПропорциональноКоэффициентам(МожноЗапуститьНагрузка, МассивДляРаспределения, 0);
	Если МассивРаспределения <> Неопределено Тогда
		Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
			КоличествоНагрузка = МассивРаспределения.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики.ЗапуститьНагрузка = КоличествоНагрузка;
		КонецЦикла;
	КонецЕсли;
	
	МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
	МассивРаспределения = РаспределитьСуммуПропорциональноКоэффициентам(МожноЗапуститьПриоритет, МассивДляРаспределения, 0);
	Если МассивРаспределения <> Неопределено Тогда
		Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
			КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики.ЗапуститьПриоритет = КоличествоПриоритет;
		КонецЦикла;
	КонецЕсли;
	
	МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
	МассивРаспределения = РаспределитьСуммуПропорциональноКоэффициентам(МожноЗапуститьОбщих, МассивДляРаспределения, 0);
	Если МассивРаспределения <> Неопределено Тогда
		Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
			КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
			СтрокаТаблицыСтатистики.ЗапуститьОбщих = КоличествоПриоритет;
		КонецЦикла;
	КонецЕсли;
	// -- Распределение потоков по очередям
	
	// ++ Передача сообщений на обработку
	ТаблицаСтатистики.Сортировать("Приоритет Возр");
	// ++ Делаем текст запроса порции
	Запрос = Новый Запрос;
	ТекстЗапросаСообщений = "ВЫБРАТЬ %КоличествоСообщений
	               |	воОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	воОчередьВходящихСообщений.КлассСообщения КАК КлассСообщения,
	               |	воОчередьВходящихСообщений.Очередь КАК Очередь,
	               |	ВЫБОР
	               |		КОГДА СостояниеСообщений.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.воСтатусыСообщений.Новое)
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК ПриоритетСтатуса
	               |ПОМЕСТИТЬ ВТОчередь
	               |ИЗ
	               |	РегистрСведений.воОчередьВходящихСообщений КАК воОчередьВходящихСообщений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.воСостояниеВходящихСообщений КАК СостояниеСообщений
	               |		ПО воОчередьВходящихСообщений.ИдентификаторСообщения = СостояниеСообщений.ИдентификаторСообщения
	               |			И (СостояниеСообщений.СтатусСообщения В (&СписокСтатусов))
	               |			И (СостояниеСообщений.ЗадержкаЧисло <= &ЗадержкаЧисло)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.воВходящиеСообщенияВОбработке КАК воВходящиеСообщенияВОбработке
	               |		ПО воОчередьВходящихСообщений.ИдентификаторСообщения = воВходящиеСообщенияВОбработке.ИдентификаторСообщения
	               |ГДЕ
	               |	воОчередьВходящихСообщений.Очередь = &Очередь
	               |	И воВходящиеСообщенияВОбработке.ИдентификаторСообщения ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередь.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	ВЫБОР
	               |		КОГДА воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.НомерСтроки ЕСТЬ NULL
	               |			ТОГДА 999
	               |		ИНАЧЕ воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.НомерСтроки
	               |	КОНЕЦ КАК Приоритет,
	               |	ВТОчередь.ПриоритетСтатуса КАК ПриоритетСтатуса
	               |ПОМЕСТИТЬ ВТОчередьСПриоритетами
	               |ИЗ
	               |	ВТОчередь КАК ВТОчередь
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.воВходящиеВнутренниеОчереди.ОбрабатываемыеКлассы КАК воВходящиеВнутренниеОчередиОбрабатываемыеКлассы
	               |		ПО ВТОчередь.Очередь = воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка
	               |			И ВТОчередь.КлассСообщения = воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Класс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередьСПриоритетами.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	ВТОчередьСПриоритетами.Приоритет КАК Приоритет,
	               |	ВТОчередьСПриоритетами.ПриоритетСтатуса КАК ПриоритетСтатуса
	               |ИЗ
	               |	ВТОчередьСПриоритетами КАК ВТОчередьСПриоритетами
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриоритетСтатуса,
	               |	Приоритет";
	Запрос.УстановитьПараметр("СписокСтатусов", воВходящиеОчередиПовтИспВызовСервера.ПолучитьСписокРабочихСтатусов());
	Запрос.УстановитьПараметр("ЗадержкаЧисло", ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
	// -- Делаем текст запроса порции
	КоличествоСтрокТаблицыСтатистики = ТаблицаСтатистики.Количество();
	Для ИндексТаблицыСтатистики = 0 По ТаблицаСтатистики.Количество() - 1 Цикл
		СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(КоличествоСтрокТаблицыСтатистики - ИндексТаблицыСтатистики - 1);
		ОсвободилосьПриоритет = 0;
		ОсвободилосьНагрузка = 0;
		ОсвободилосьОбщих = 0;
		
		// ++ Определяем количество выбираемых сообщений
		ВсегоМожноЗапуститьПотоков = СтрокаТаблицыСтатистики.КоличествоРезервныхНастройка - СтрокаТаблицыСтатистики.КоличествоРезервных
			+ СтрокаТаблицыСтатистики.ЗапуститьОбщих + СтрокаТаблицыСтатистики.ЗапуститьПриоритет + СтрокаТаблицыСтатистики.ЗапуститьНагрузка;
		КоличествоСообщенийПоСтатистике = СтрокаТаблицыСтатистики.СообщенийВОбработке / ВсегоМожноЗапуститьПотоков;
		ЗапросКоличестваПотоков = Новый Запрос;
		ЗапросКоличестваПотоков.Текст = "ВЫБРАТЬ
		                                |	ВЫБОР
		                                |		КОГДА воВходящиеВнутренниеОчереди.Ссылка = ЗНАЧЕНИЕ(Справочник.воВходящиеВнутренниеОчереди.ПустаяСсылка)
		                                |			ТОГДА &ЗначениеПоУмолчанию
		                                |		КОГДА воВходящиеВнутренниеОчереди.МаксимальноеКоличествоВыбираемыхСообщений = 0
		                                |			ТОГДА &ЗначениеПоУмолчанию
		                                |		ИНАЧЕ воВходящиеВнутренниеОчереди.МаксимальноеКоличествоВыбираемыхСообщений
		                                |	КОНЕЦ КАК МаксимальноеКоличество
		                                |ИЗ
		                                |	Справочник.воВходящиеВнутренниеОчереди КАК воВходящиеВнутренниеОчереди
		                                |ГДЕ
		                                |	воВходящиеВнутренниеОчереди.Ссылка = &Очередь";
		МаксисмальноеКоличествоНастройка = воРаботаСКонстантамиПолныеПраваВызовСервера.ПолучитьЗначениеКонстанты("воМаксимальноеКоличествоВыбираемыхСообщений");
		Если МаксисмальноеКоличествоНастройка = 0 Тогда
			МаксисмальноеКоличествоНастройка = 100;
		КонецЕсли;
		ЗапросКоличестваПотоков.УстановитьПараметр("ЗначениеПоУмолчанию", МаксисмальноеКоличествоНастройка);
		ЗапросКоличестваПотоков.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
		ВыборкаКоличестваПотоков = ЗапросКоличестваПотоков.Выполнить().Выбрать();
		Если ВыборкаКоличестваПотоков.Следующий() Тогда
			КоличествоВыбираемыхЗаченийМаксимум = ВыборкаКоличестваПотоков.МаксимальноеКоличество;
		Иначе
			КоличествоВыбираемыхЗаченийМаксимум = МаксисмальноеКоличествоНастройка;
		КонецЕсли;
		КоличествоВыбираемыхСообщений = Мин(КоличествоСообщенийПоСтатистике, КоличествоВыбираемыхЗаченийМаксимум);
		Запрос.Текст = СтрЗаменить(ТекстЗапросаСообщений, "%КоличествоСообщений", Формат(КоличествоВыбираемыхСообщений, "ЧГ="));
		// -- Определяем количество выбираемых сообщений
		
		// ++ Запускаем резервные
		КоличествоЗапускаемыхРезервных = СтрокаТаблицыСтатистики.КоличествоРезервныхНастройка - СтрокаТаблицыСтатистики.КоличествоРезервных;
		Для КоличествоРезервные = 1 По КоличествоЗапускаемыхРезервных Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "РезервныйОчередь" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.воВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("воВходящиеОчередиВызовСервера.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем резервные
		
		// ++ Запускаем общие
		КоличествоЗапускаемыхОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих;
		Для КоличествоПотоковОбщих = 1 По КоличествоЗапускаемыхОбщих Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				СтрокаТаблицыСтатистики.ЗапуститьОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих - 1;	
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "ОбщийОбработчик" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.воВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("воВходящиеОчередиВызовСервера.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				ОсвободилосьОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих;
				Если ОсвободилосьОбщих < 0 Тогда
					ОсвободилосьОбщих = 0;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем общие
		
		// ++ Запускаем приоритет
		КоличествоЗапускаемыхПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет;
		Для КоличествоПотоковПриоритет = 1 По КоличествоЗапускаемыхПриоритет Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				СтрокаТаблицыСтатистики.ЗапуститьПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет - 1;	
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "ОбщийПриоритет" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.воВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("воВходящиеОчередиВызовСервера.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				ОсвободилосьПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет;
				Если ОсвободилосьПриоритет < 0 Тогда
					ОсвободилосьПриоритет = 0;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем приоритет
		
		// ++ Запускаем нагрузка
		КоличествоЗапускаемыхНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка;
		Для КоличествоПотоковНагрузка = 1 По КоличествоЗапускаемыхНагрузка Цикл
			Запрос.УстановитьПараметр("Очередь", СтрокаТаблицыСтатистики.Очередь);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				СтрокаТаблицыСтатистики.ЗапуститьНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка - 1;	
				МассивИдентификаторов = Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
				КлючЗадания = "ОбщийНагрузка" + Строка(Новый УникальныйИдентификатор) + Строка(СтрокаТаблицыСтатистики.Очередь.УникальныйИдентификатор());
				// ++ Добавляем обрабатываемые сообщения
				Для Каждого ИдентификаторВОбработку Из МассивИдентификаторов Цикл
					МенеджерДобавляемых = РегистрыСведений.воВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
					МенеджерДобавляемых.ИдентификаторСообщения = ИдентификаторВОбработку;
					МенеджерДобавляемых.КлючЗадания = КлючЗадания;
					МенеджерДобавляемых.Очередь = СтрокаТаблицыСтатистики.Очередь;
					МенеджерДобавляемых.Записать(Ложь);
				КонецЦикла;
				// -- Добавляем обрабатываемые сообщения
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(МассивИдентификаторов);
				ФоновыеЗадания.Выполнить("воВходящиеОчередиВызовСервера.ОбработатьВходящиеСообщения", МассивПараметров, КлючЗадания, "ESB_ОбработатьВходящееСообщениеБезОчереди");
			Иначе
				ОсвободилосьНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка;
				Если ОсвободилосьНагрузка < 0 Тогда
					ОсвободилосьНагрузка = 0;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// -- Запускаем нагрузка
		
		// ++ Строка обработана
		ТаблицаСтатистики.Удалить(СтрокаТаблицыСтатистики);
		// -- Строка обработана
		
		// ++ Перераспределяем потоки
		Если ТаблицаСтатистики.Количество() > 0 Тогда
			Если ОсвободилосьОбщих > 0 Тогда
				МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
				МассивРаспределения = РаспределитьСуммуПропорциональноКоэффициентам(ОсвободилосьОбщих, МассивДляРаспределения, 0);
				Если МассивРаспределения <> Неопределено Тогда
					Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
						КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики.ЗапуститьОбщих = СтрокаТаблицыСтатистики.ЗапуститьОбщих + КоличествоПриоритет;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ОсвободилосьНагрузка > 0 Тогда
				МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("СообщенийВОбработке");
				МассивРаспределения = РаспределитьСуммуПропорциональноКоэффициентам(ОсвободилосьНагрузка, МассивДляРаспределения, 0);
				Если МассивРаспределения <> Неопределено Тогда
					Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
						КоличествоНагрузка = МассивРаспределения.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики.ЗапуститьНагрузка = СтрокаТаблицыСтатистики.ЗапуститьНагрузка + КоличествоНагрузка;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
				
			Если ОсвободилосьПриоритет > 0 Тогда
				МассивДляРаспределения = ТаблицаСтатистики.ВыгрузитьКолонку("Приоритет");
				МассивРаспределения = РаспределитьСуммуПропорциональноКоэффициентам(ОсвободилосьПриоритет, МассивДляРаспределения, 0);
				Если МассивРаспределения <> Неопределено Тогда
					Для НомерСтрокиМассива = 0 По МассивРаспределения.Количество() - 1 Цикл
						КоличествоПриоритет = МассивРаспределения.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики = ТаблицаСтатистики.Получить(НомерСтрокиМассива);
						СтрокаТаблицыСтатистики.ЗапуститьПриоритет = СтрокаТаблицыСтатистики.ЗапуститьПриоритет + КоличествоПриоритет;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// -- Перераспределяем потоки
		
	КонецЦикла;
	// -- Передача сообщений на обработку
	
КонецПроцедуры

// Процедура - Обработать входящие сообщения
// Параметры: 
//  МассивИдентификаторов - Массив - массив идентификаторов сообщений, подлежащих обработке
Процедура ОбработатьВходящиеСообщения(МассивИдентификаторов) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	РегистрСведенийОчередьВходящихСообщений.Хранилище КАК Хранилище,
	               |	РегистрСведенийОчередьВходящихСообщений.КлассСообщения КАК КлассСообщения,
	               |	РегистрСведенийОчередьВходящихСообщений.ФорматСообщения КАК ФорматСообщения,
	               |	РегистрСведенийОчередьВходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
	               |ИЗ
	               |	РегистрСведений.воОчередьВходящихСообщений КАК РегистрСведенийОчередьВходящихСообщений
	               |ГДЕ
	               |	РегистрСведенийОчередьВходящихСообщений.ИдентификаторСообщения В(&МассивИдентификаторов)";
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбработатьВходящееСообщениеИзОчереди(Выборка.ИдентификаторСообщения, Выборка.ФорматСообщения, Выборка.КлассСообщения, Выборка.ДатаРегистрации, Выборка.Хранилище);
		МенеджерВОбработке = РегистрыСведений.воВходящиеСообщенияВОбработке.СоздатьМенеджерЗаписи();
		МенеджерВОбработке.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		МенеджерВОбработке.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Очистить очередь входящих сообщений
//
Процедура ОчиститьОчередьВходящихСообщений() Экспорт 
	
	ТекЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДлительностиОжидания.СтатусСообщения КАК СтатусСообщения,
	|	ТаблицаДлительностиОжидания.ДлительностьХранения КАК Длительность
	|ПОМЕСТИТЬ ТаблицаДлительностиОжидания
	|ИЗ
	|	&ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.воОчередьВходящихСообщений КАК ОчередьСообщений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.воСостояниеВходящихСообщений КАК СостояниеСообщений
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
	|			ПО СостояниеСообщений.СтатусСообщения = ТаблицаДлительностиОжидания.СтатусСообщения
	|				И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, 0) > 0)
	|		ПО ОчередьСообщений.ИдентификаторСообщения = СостояниеСообщений.ИдентификаторСообщения
	|			И (РАЗНОСТЬДАТ(СостояниеСообщений.ДатаИзменения, &ТекущаяДата, ДЕНЬ) > ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию))
	|			И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию) > 0)");
	
	ТекЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ДлительностьХраненияПоУмолчанию = воРаботаСКонстантамиПолныеПраваВызовСервера.ПолучитьДлительностьХраненияПоУмолчанию();
	ТекЗапрос.УстановитьПараметр("СрокХраненияПоУмолчанию", ДлительностьХраненияПоУмолчанию);
	ТекЗапрос.УстановитьПараметр("ТаблицаДлительностиОжидания", воРаботаСКонстантамиПолныеПраваВызовСервера.ПолучитьДлительностьХранения());
	
	ТекВыборка = ТекЗапрос.Выполнить().Выбрать();
	
	Пока ТекВыборка.Следующий() Цикл
		
		УдалитьВходящееСообщение(ТекВыборка.ИдентификаторСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Обработать входящее сообщение из очереди
// Параметры: 
//  Идентификатор - УникальныйИдентификатор - идентификатор обрабатываемого сообщения
//  ФорматСообщения - Перечисление воФорматыСообщений - формат обрабатываемого сообщения
//  КлассСообщения - Строка - класс обрабатываемого сообщения
//  ДатаРегистрации - Дата - дата регистрации обрабатываемого сообщения
//  Хранилище - Хранилище значение - хранилище значения обрабатываемого сообщения
Процедура ОбработатьВходящееСообщениеИзОчереди(Знач Идентификатор, Знач ФорматСообщения, Знач КлассСообщения, ДатаРегистрации, Хранилище)
	
	СткОбработчик = воВходящиеОчередиПереопределяемыйВызовСервера.ПолучитьОбработчик(КлассСообщения);
	
	Если Не ЗначениеЗаполнено(СткОбработчик.ПроцедураОбработки) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В 1С отсутствует входящий обработчик для класса %1'"), Строка(КлассСообщения));
	    УстановитьСостояниеСообщения(Идентификатор, Перечисления.воСтатусыСообщений.ОтсутствуетОбработчик, , ТекстСообщения );

	Иначе
			
		Если воВходящиеОчередиПереопределяемыйВызовСервера.ОбработчикОтключен(СткОбработчик) Тогда
			
			ТекстСообщения = НСтр("ru = 'Обработка исходящего сообщения была отменена. Обработчик отключен.'");
		    УстановитьСостояниеСообщения(Идентификатор, Перечисления.воСтатусыСообщений.ОбработкаОтменена, , ТекстСообщения );

		Иначе
				
			Попытка
				
				Задержка = 0;
				текЗаголовокЖурнала = НСтр("ru = 'Datareon. Получение объекта события'");
				
				ИдШаблона = СткОбработчик.ИдентификаторШаблона;
				ВерсияШаблона = СткОбработчик.Версия;
				
				СостояниеСообщения = Перечисления.воСтатусыСообщений.Обработано; // Переменная для установки нового состояние сообщения
				ОбъектСообщение = воОбщегоНазначенияВызовСервера.ПолучитьОбъектXDTO(ФорматСообщения, Хранилище.Получить());
						
				КоличествоПопытокОжидания = воОбщегоНазначенияВызовСервера.ПолучитьКоличествоПопытокОжидания(ОбъектСообщение);		
								
				Выполнить(сткОбработчик.ПроцедураОбработки);
								
				УстановитьСостояниеСообщения(Идентификатор, СостояниеСообщения, Задержка );
				
			Исключение
				
				ТекстОшибки = воОбщегоНазначенияВызовСервера.ДополнитьТекстОшибки(воОбщегоНазначенияВызовСервера.ПолучитьТекстОшибкиОбработчика(ИнформацияОбОшибке()), СткОбработчик, Неопределено);			
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Datareon.Обработка сообщения'"), УровеньЖурналаРегистрации.Ошибка, , Идентификатор, ТекстОшибки);
								
				УстановитьСостояниеСообщения(Идентификатор, Перечисления.воСтатусыСообщений.ОшибкаОбработки, , ТекстОшибки);
								
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Удалить входящее сообщение
//
Процедура УдалитьВходящееСообщение(Идентификатор) 
		
	ТекЗапись = РегистрыСведений.воОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
	
	ТекЗапись.ИдентификаторСообщения = Идентификатор;
	ТекЗапись.Удалить();
	
	ТекЗапись = воВходящиеОчередиПовтИспВызовСервера.ПолучитьОбъектНабораЗаписейСостоянияСообщений();
	ТекЗапись.Отбор.ИдентификаторСообщения.Установить(Идентификатор);
	
	ТекЗапись.Прочитать();
	
	Если ТекЗапись.Выбран() Тогда
		ТекЗапись.Очистить();
		ТекЗапись.Записать();
	КонецЕсли;
	
КонецПроцедуры	

// Функция - Datareon существует
// 
Функция DatareonСуществует() Экспорт 
	
	Возврат НЕ Метаданные.Подсистемы.Найти("СШП") = Неопределено;
	
КонецФункции

// Возвращает ссылку на общий модуль или модуль менеджера по имени.
//
// Параметры:
//  Имя - Строка - имя общего модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль, МодульМенеджераОбъекта - общий модуль.
//
// Пример:
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
//		МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");
//		МодульОбновлениеКонфигурации.<Имя метода>();
//	КонецЕсли;
//
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
//		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
//		МодульПолнотекстовыйПоискСервер.<Имя метода>();
//	КонецЕсли;
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		УстановитьБезопасныйРежим(Истина);
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Общий модуль ""%1"" не найден.'"),
			Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Функция - Получить очередь
// Параметры:
//  КлассСообщения - Строка - класс сообщения
//  ВнешняяСистема - Справочник воСистемыИнтеграционногоКонтура - внешняя система источник сообщения
Функция ПолучитьОчередь(КлассСообщения, ВнешняяСистема)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	1 КАК Приоритет,
	               |	воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка КАК Очередь
	               |ПОМЕСТИТЬ ВТОчередиКлассы
	               |ИЗ
	               |	Справочник.воВходящиеВнутренниеОчереди.ОбрабатываемыеКлассы КАК воВходящиеВнутренниеОчередиОбрабатываемыеКлассы
	               |ГДЕ
	               |	воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Класс = &Класс
	               |	И НЕ воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка.ОчередьОтключена
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	2,
	               |	воВходящиеВнутренниеОчереди.Ссылка
	               |ИЗ
	               |	Справочник.воВходящиеВнутренниеОчереди КАК воВходящиеВнутренниеОчереди
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.воВходящиеВнутренниеОчереди.ВнешниеСистемы КАК воВходящиеВнутренниеОчередиВнешниеСистемы
	               |		ПО (воВходящиеВнутренниеОчередиВнешниеСистемы.Ссылка = воВходящиеВнутренниеОчереди.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.воВходящиеВнутренниеОчереди.ОбрабатываемыеКлассы КАК воВходящиеВнутренниеОчередиОбрабатываемыеКлассы
	               |		ПО (воВходящиеВнутренниеОчереди.Ссылка = воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.Ссылка)
	               |ГДЕ
	               |	воВходящиеВнутренниеОчередиВнешниеСистемы.Система = &Система
	               |	И НЕ воВходящиеВнутренниеОчереди.ОчередьОтключена
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	воВходящиеВнутренниеОчереди.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ воВходящиеВнутренниеОчередиОбрабатываемыеКлассы.НомерСтроки) = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	воВходящиеВнутренниеОчередиВнешниеСистемы.Ссылка КАК Очередь
	               |ПОМЕСТИТЬ ВТОчередиСистемы
	               |ИЗ
	               |	Справочник.воВходящиеВнутренниеОчереди.ВнешниеСистемы КАК воВходящиеВнутренниеОчередиВнешниеСистемы
	               |ГДЕ
	               |	воВходящиеВнутренниеОчередиВнешниеСистемы.Система = &Система
	               |	И НЕ воВходящиеВнутренниеОчередиВнешниеСистемы.Ссылка.ОчередьОтключена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТОчередиКлассы.Приоритет КАК Приоритет,
	               |	ВТОчередиКлассы.Очередь КАК Очередь
	               |ПОМЕСТИТЬ ВТПодходящиеОчереди
	               |ИЗ
	               |	ВТОчередиКлассы КАК ВТОчередиКлассы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОчередиСистемы КАК ВТОчередиСистемы
	               |		ПО ВТОчередиКлассы.Очередь = ВТОчередиСистемы.Очередь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПодходящиеОчереди.Приоритет КАК Приоритет,
	               |	ВТПодходящиеОчереди.Очередь КАК Очередь,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ воОчередьВходящихСообщений.ИдентификаторСообщения) КАК КоличествоСообщений
	               |ПОМЕСТИТЬ ВТОчередиСКоличествомСообщенийИзОчереди
	               |ИЗ
	               |	ВТПодходящиеОчереди КАК ВТПодходящиеОчереди
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.воОчередьВходящихСообщений КАК воОчередьВходящихСообщений
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.воСостояниеВходящихСообщений КАК СостояниеСообщений
	               |			ПО воОчередьВходящихСообщений.ИдентификаторСообщения = СостояниеСообщений.ИдентификаторСообщения
	               |				И (СостояниеСообщений.СтатусСообщения В (&СписокСтатусов))
	               |				И (СостояниеСообщений.ЗадержкаЧисло <= &ЗадержкаЧисло)
	               |		ПО ВТПодходящиеОчереди.Очередь = воОчередьВходящихСообщений.Очередь
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТПодходящиеОчереди.Приоритет,
	               |	ВТПодходящиеОчереди.Очередь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередиСКоличествомСообщенийИзОчереди.Приоритет КАК Приоритет,
	               |	ВТОчередиСКоличествомСообщенийИзОчереди.Очередь КАК Очередь,
	               |	ЕстьNULL(воСтатистикаВнутреннихОчередей.КоличествоСообщенийНаОбработку, ВТОчередиСКоличествомСообщенийИзОчереди.КоличествоСообщений) КАК КоличествоСообщений
	               |ПОМЕСТИТЬ ВТОчередиСКоличествомСообщений
	               |ИЗ
	               |	ВТОчередиСКоличествомСообщенийИзОчереди КАК ВТОчередиСКоличествомСообщенийИзОчереди
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.воСтатистикаВнутреннихОчередей КАК воСтатистикаВнутреннихОчередей
	               |		ПО ВТОчередиСКоличествомСообщенийИзОчереди.Очередь = воСтатистикаВнутреннихОчередей.Очередь
	               |
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОчередиСКоличествомСообщений.Приоритет КАК Приоритет,
	               |	ВТОчередиСКоличествомСообщений.Очередь КАК Очередь,
	               |	ВТОчередиСКоличествомСообщений.КоличествоСообщений КАК КоличествоСообщений
	               |ИЗ
	               |	ВТОчередиСКоличествомСообщений КАК ВТОчередиСКоличествомСообщений
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет,
	               |	КоличествоСообщений";
	Запрос.УстановитьПараметр("Класс", КлассСообщения);
	Запрос.УстановитьПараметр("Система", ВнешняяСистема);
	Запрос.УстановитьПараметр("СписокСтатусов", воВходящиеОчередиПовтИспВызовСервера.ПолучитьСписокРабочихСтатусов());
	Запрос.УстановитьПараметр("ЗадержкаЧисло", ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Очередь;
	Иначе
		Возврат Справочники.воВходящиеВнутренниеОчереди.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функция - ПеревестиДатуВЧисло
// 
// Возвращаемое значение:
// Число  - Дата изменения + Задержка.
//
Функция ПеревестиДатуВЧисло(ДатаИзменения, Задержка = 0)
	
	Возврат (ДатаИзменения - Дата(2000,1,1)) + Задержка;
	
КонецФункции

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число  - сумма, которую надо распределить, если сумма равна 0 - то возвращается Неопределено;
//                                 Если передана отрицательная - расчет по модулю и после инверсия знаков результата.
//  Коэффициенты        - Массив - коэффициенты распределения, должны быть положительны или отрицательными одновременно
//  Точность            - Число  - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае, если распределить невозможно (кол-во коэффициентов = 0,
//           есть коэффициенты с отрицательным значением или суммарный вес коэффициентов = 0),
//           тогда будет возвращено Неопределено.
//
// Пример:
//
//	Коэффициенты = Новый Массив;
//	Коэффициенты.Добавить(1);
//	Коэффициенты.Добавить(2);
//	Результат = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(1, Коэффициенты);
//	// Результат = [0.33, 0.67]
//
Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Знач Коэффициенты, Знач Точность = 2)
	
	КоэффициентыАбсолютные = Новый Массив(Новый ФиксированныйМассив(Коэффициенты)); // cpy
	
	// Старое поведение при неуказанной сумме - для обратной совместимости.
	Если Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если КоэффициентыАбсолютные.Количество() = 0 Тогда 
		// Недопустимо значение параметра Коэффициенты
		// Ожидалось: хотя бы один коэффициент будет задан.
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	СуммаКоэффициентов = 0;
	КоэффициентыОтрицательны = (КоэффициентыАбсолютные[0] < 0);
	
	Для Индекс = 0 По КоэффициентыАбсолютные.Количество() - 1 Цикл
		Коэффициент = КоэффициентыАбсолютные[Индекс];
		
		Если КоэффициентыОтрицательны И Коэффициент > 0 Тогда 
			// Недопустимо значение параметра Коэффициенты
			// Ожидалось: все коэффициенты положительны или все отрицательны одновременно.
			Возврат Неопределено;
		КонецЕсли;
		
		Если Коэффициент < 0 Тогда 
			Коэффициент = -Коэффициент; // Abs(Коэффициент)
			КоэффициентыАбсолютные[Индекс] = Коэффициент; // move
		КонецЕсли;
		
		Если МаксимальныйКоэффициент < Коэффициент Тогда
			МаксимальныйКоэффициент = Коэффициент;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		// Недопустимо значение параметра Коэффициенты
		// Ожидалось: хотя бы один коэффициент будет отличен от нуля.
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(КоэффициентыАбсолютные.Количество());
	
	ВыполнятьИнверсию = (РаспределяемаяСумма < 0);
	Если ВыполнятьИнверсию Тогда 
		РаспределяемаяСумма = -РаспределяемаяСумма; // Abs(РаспределяемаяСумма).
	КонецЕсли;
	
	РаспределеннаяСумма = 0;
	
	Для Индекс = 0 По КоэффициентыАбсолютные.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * КоэффициентыАбсолютные[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	СуммарнаяПогрешность = РаспределяемаяСумма - РаспределеннаяСумма;
	
	Если СуммарнаяПогрешность > 0 Тогда 
		
		// Погрешности округления отнесем на коэффициент с максимальным весом.
		Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
			Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + СуммарнаяПогрешность;
		КонецЕсли;
		
	ИначеЕсли СуммарнаяПогрешность < 0 Тогда 
		
		// Если распределили больше чем положено, размазываем погрешность по ближайшим максимальным весам.
		ЗначениеПогрешности = 1 / Pow(10, Точность);
		КоличествоЭлементовПогрешности = -СуммарнаяПогрешность / ЗначениеПогрешности;
		
		Для Сч = 1 По КоличествоЭлементовПогрешности Цикл 
			МаксимальныйКоэффициент = МаксимальноеЗначениеВМассиве(КоэффициентыАбсолютные);
			Индекс = КоэффициентыАбсолютные.Найти(МаксимальныйКоэффициент);
			Результат[Индекс] = Результат[Индекс] - ЗначениеПогрешности;
			КоэффициентыАбсолютные[Индекс] = 0;
		КонецЦикла;
		
	Иначе 
		// Если СуммарнаяПогрешность = 0, то все идеально.
	КонецЕсли;
	
	Если ВыполнятьИнверсию Тогда 
		Для Индекс = 0 По КоэффициентыАбсолютные.Количество() - 1 Цикл
			Результат[Индекс] = -Результат[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Максимальное значение в массиве
// Параметры:
//  Массив - Массив - массив для определения максимального значения
Функция МаксимальноеЗначениеВМассиве(Массив)
	
	МаксимальноеЗначение = 0;
	
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Значение = Массив[Индекс];
		
		Если МаксимальноеЗначение < Значение Тогда
			МаксимальноеЗначение = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеЗначение;
	
КонецФункции

// Функция - Получить внешнюю систему
//
// Параметры:
//  ВнешняяСистема -  Строка  - имя адаптера системы интеграционного контура
// 
// Возвращаемое значение:
//   - ВнешняяСистемаСсылка
//
Функция ПолучитьВнешнююСистему(ВнешняяСистема) Экспорт
	
	ВнешняяСистемаСсылка    = Справочники.воСистемыИнтеграционногоКонтура.ПустаяСсылка();
	ИмяСобытия              = НСтр("ru = 'грОбработкаПакетовИнтеграции.ПолучитьВнешнююСистему'");
	НазваниеАдаптера        = СокрЛП(ВнешняяСистема);
	
	Если Не ЗначениеЗаполнено(ВнешняяСистема) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'При получении внешней системы была передана пустая строка'"));
		Возврат ВнешняяСистемаСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.воСистемыИнтеграционногоКонтура ГДЕ НазваниеАдаптера = &НазваниеАдаптера");
	Запрос.УстановитьПараметр("НазваниеАдаптера", НазваниеАдаптера);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НоваяСистемаОбъект = Справочники.воСистемыИнтеграционногоКонтура.СоздатьЭлемент();
		НоваяСистемаОбъект.Наименование     = НазваниеАдаптера;
		НоваяСистемаОбъект.НазваниеАдаптера = НазваниеАдаптера;
		
		Попытка
			НоваяСистемаОбъект.Записать();
			ВнешняяСистемаСсылка = НоваяСистемаОбъект.Ссылка;
		Исключение
			ТекстОшибки = НСтр("ru = 'воВходящиеОчередиВызовСервера.ПолучитьВнешнююСистему. 
			|Не удалось записать новый элемент справочника воСистемыИнтеграционногоКонтура'");
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, НСтр(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	Иначе    
		Выборка = РезультатЗапроса.Выбрать();    
		Выборка.Следующий();
		ВнешняяСистемаСсылка = Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат ВнешняяСистемаСсылка; 
КонецФункции

#КонецОбласти

