#Область ПрограммныйИнтерфейс

// Функция - Получить значение константы
//
// Параметры:
//	ИмяКонстанты - имя константы, значение которой нужно получить.
//
// Возвращаемое значение:
//	Произвольный - Значение константы, определенной по имени.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции	

// Функция - Получить длительность хранения
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Значение константы воДлительностьХраненияВходящихСообщенийПоОчередямИСостояниям.
//
Функция ПолучитьДлительностьХранения() Экспорт
	
	ЗначениеКонстанты = Константы.воДлительностьХраненияВходящихСообщенийПоОчередямИСостояниям.Получить().Получить();
	
	Если ЗначениеКонстанты = Неопределено Тогда
		 
		Возврат СформироватьЗначениеКонстантыДлительностьХранения();
		
	Иначе
		
		Возврат ЗначениеКонстанты;
		
	КонецЕсли;
	
КонецФункции

// Процедура - Устанавливает константу воДлительностьХраненияВходящихСообщенийПоОчередямИСостояниям
//
// Параметры:
//  ТаблицаНастроек - Таблица значений с настройками
//
Процедура УстановитьДлительностьХранения(ТаблицаНастроек) Экспорт 
	
	ХранилищеТаблицыНастроек = Новый ХранилищеЗначения(ТаблицаНастроек);
	Константы.воДлительностьХраненияВходящихСообщенийПоОчередямИСостояниям.Установить(ХранилищеТаблицыНастроек);
	
КонецПроцедуры

// Функция - Сформировать значение константы Длительность хранения
//
// Возвращаемое значение:
//	ТаблицаЗначений - Пустая таблица значений для описания константы Длительность хранения.
//
Функция СформироватьЗначениеКонстантыДлительностьХранения() Экспорт
	 
	ТаблицаДлительностиОжидания = Новый ТаблицаЗначений;
	ТаблицаДлительностиОжидания.Колонки.Добавить("СтатусСообщения", Новый ОписаниеТипов("ПеречислениеСсылка.воСтатусыСообщений"), НСтр("ru = 'Статус сообщения'"));
	ТаблицаДлительностиОжидания.Колонки.Добавить("ДлительностьХранения", Новый ОписаниеТипов("Число"), НСтр("ru = 'Длительность хранения, дн.'"));
	
	Возврат ТаблицаДлительностиОжидания;
	
КонецФункции

// Функция - Получить длительность хранения по умолчанию
// 
// Возвращаемое значение:
//	Число - Значение константы воДлительностьХраненияВходящихСообщений.
//
Функция ПолучитьДлительностьХраненияПоУмолчанию() Экспорт
	
	Возврат Константы.воДлительностьХраненияВходящихСообщений.Получить();
	
КонецФункции

// Функция - Проверить заполнение зарезервированных потоков
// Параметры:
//  ИзменениеКоличестваЗарезервированныхПотоков - Число - Изменение количества зарезервированных потоков 
// 
// Возвращаемое значение:
//	Структура - ОбщееКоличествоПотоков, ОбщееКоличествоЗарезервированныхПотоков, ОбщееКоличествоЗарезервированныхПотоковПоОчередям, Ошибка
//
Функция ПроверитьЗаполнениеЗарезервированныхПотоков(ИзменениеКоличестваЗарезервированныхПотоков = 0) Экспорт 
	
	ОбщееКоличествоПотоков = Константы.воКоличествоПотоковОбработкиОчередей.Получить();
	ОбщееКоличествоЗарезервированныхПотоков = Константы.воКоличествоЗарезервированныхПотоковОбработкиОчередей.Получить(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(воВходящиеВнутренниеОчереди.КоличествоЗарезервированныхПотоков) КАК КоличествоЗарезервированныхПотоков
	               |ИЗ
	               |	Справочник.воВходящиеВнутренниеОчереди КАК воВходящиеВнутренниеОчереди";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщееКоличествоЗарезервированныхПотоковПоОчередям = Выборка.КоличествоЗарезервированныхПотоков;
	Иначе
		ОбщееКоличествоЗарезервированныхПотоковПоОчередям = 0;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ОбщееКоличествоПотоков", ОбщееКоличествоПотоков);
	СтруктураВозврата.Вставить("ОбщееКоличествоЗарезервированныхПотоков", ОбщееКоличествоЗарезервированныхПотоков);
	СтруктураВозврата.Вставить("ОбщееКоличествоЗарезервированныхПотоковПоОчередям", ОбщееКоличествоЗарезервированныхПотоковПоОчередям);
	
	Если ОбщееКоличествоПотоков - ОбщееКоличествоЗарезервированныхПотоков - ОбщееКоличествоЗарезервированныхПотоковПоОчередям - ИзменениеКоличестваЗарезервированныхПотоков <= 0 Тогда 
		СтруктураВозврата.Вставить("Ошибка", Истина);
	Иначе
		СтруктураВозврата.Вставить("Ошибка", Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти