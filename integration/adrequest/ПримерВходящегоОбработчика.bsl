xdtoДокумент = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, ОбъектСообщение.Body);
ПараметрыОбработки = грОбработкаПакетовИнтеграции.ПолучитьПараметрыОбработкиСообщения(ОбъектСообщение, xdtoДокумент);

ВидИдентификатора = "TL_GUID";
ИмяТипаОбъекта = "Документ.ЗаказПоставщику";

ТаблицаИдентификаторовПотоков = грОбработкаПакетовИнтеграцииПовтИсп.ПолучитьТаблицуИдентификаторыПотоковESB();
НенайденныеОбъекты = грОбработкаПакетовИнтеграции.СоздатьТаблицуНенайденныхОбъектов();

КэшСсылок = Новый Соответствие;
КоличествоЗаписейВБлоке = 0;

Рубли =  Справочники.Валюты.НайтиПоКоду("643");
НизкийПриоритет = Справочники.Приоритеты.НайтиПоНаименованию("Низкий");

ПараметрыОбработки.РазмерБлока = 1;

НачатьТранзакцию();

Попытка 
	
	Последовательность = xdtoДокумент.Список.Последовательность();
		
	ОбработанныеДокументы = Новый Массив;
	
	СписокДокументов_ОбработкаПроведения = Новый Массив;
	Для Индекс = 0 По Последовательность.Количество()-1 Цикл
		xdtoОбъект = Последовательность.ПолучитьЗначение(Индекс);
		
		Ключ = xdtoОбъект.code_vn;
		
		// Блокировка 
		Если НЕ грОбработкаПакетовИнтеграции.ЗаблокироватьКлючСПопытками(
			Ключ, ВидИдентификатора, ПараметрыОбработки.КоличествоПопытокБлокировки
			) Тогда 
			
			Если ПараметрыОбработки.МассоваяЗагрузка Тогда 
				ВызватьИсключение "Не удалось выполнить блокировку! Ключ: " + Ключ;
			Иначе
				ОтменитьТранзакцию();
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
				Задержка = ПараметрыОбработки.ЗадержкаПриНеудачнойБлокировке;
				Перейти ~Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ВерсияОбъекта = грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Версия",,, "");
		
		// Поиск объекта
		сткРезультатПоиска = грОбработкаПакетовИнтеграции.ПолучитьОбъектПоКлючуТПК(
		Ключ, ИмяТипаОбъекта, ВидИдентификатора, ПараметрыОбработки, ВерсияОбъекта);
		
		Если НЕ сткРезультатПоиска.ИзменениеРазрешено Тогда
			Перейти ~ПерейтиКСледующему;
		КонецЕсли;
		
		ДокСсылка = сткРезультатПоиска.Ссылка;
		Если ЗначениеЗаполнено(ДокСсылка); 
			И ОбщегоНазначения.СсылкаСуществует(ДокСсылка) Тогда
			
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе
			ДокОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
			ДокОбъект.УстановитьСсылкуНового(Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор));
			ДокСсылка = ДокОбъект.ПолучитьСсылкуНового();
		КонецЕсли;
		
		ДопПараметрыДозапросов = Новый Структура;
		ДопПараметрыДозапросов.Вставить("ID", Ключ);
		ДопПараметрыДозапросов.Вставить("Класс", КлассСообщения);
		
		ДокОбъект.Номер				= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "Номер");
		ДокОбъект.ДатаПоступления	= грОбработкаПакетовИнтеграции.ЗначениеРеквизита(xdtoОбъект, "ДатаПоступления", "Дата");
		
		//Договор
		ДокОбъект.Договор = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Договор,
		"Справочник.ДоговорыКонтрагентов", "УНИКУМGUID", "229", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов);
		
		//Соглашение
		ДокОбъект.Соглашение = грОбработкаПакетовИнтеграции.НайтиОбъектПоКлючу(xdtoОбъект.Договор,
		"Справочник.СоглашенияСПоставщиками", "УНИКУМGUID", "229", НенайденныеОбъекты, КэшСсылок, ДопПараметрыДозапросов);
		
		
		
		ДокОбъект.грПроведенВременная = Истина;
		ДокОбъект.ПометкаУдаления  = Ложь;
		
		ДокОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ОбработанныеДокументы.Добавить(ДокОбъект);
		
		грОбработкаПакетовИнтеграции.УстановитьКлюч_v2(ДокОбъект.Ссылка, Ключ, ПараметрыОбработки.Отправитель, 
			Новый Структура("ВидИдентификатораСтрока, ДатаОбновления, Версия", ВидИдентификатора, ПараметрыОбработки.ВремяПакета, ВерсияОбъекта) );
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить( "Дата", ДокОбъект.Дата); 
		грОбработкаПакетовИнтеграции.ЗаписатьОтложенныеДозапросы( Ключ, ИмяТипаОбъекта, КлассСообщения, xdtoОбъект, ПараметрыОбработки, НенайденныеОбъекты, ДопПараметры );
		
		грОбработкаПакетовИнтеграции.УдалитьЗаписьОДозапросе(Ключ, КлассСообщения);
		
		КоличествоЗаписейВБлоке = КоличествоЗаписейВБлоке + 1;
		
		Если ПараметрыОбработки.МассоваяЗагрузка И КоличествоЗаписейВБлоке = ПараметрыОбработки.РазмерБлока Тогда 
			
			Если ПараметрыОбработки.ВыполнятьДозапросы И НенайденныеОбъекты.Количество() > 0 Тогда 
				грОбработкаПакетовИнтеграции.СоздатьДозапросыПоТаблице(
				НенайденныеОбъекты, 
				ПараметрыОбработки.ТаймаутДозапроса, 
				ПараметрыОбработки.КоличествоПопытокБлокировки, 
				ТаблицаИдентификаторовПотоков);
			КонецЕсли;
			
			Пока ТранзакцияАктивна() Цикл
				ЗафиксироватьТранзакцию();
			КонецЦикла;
			
			КоличествоЗаписейВБлоке = 0;
			НачатьТранзакцию();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыОбработки.ВыполнятьДозапросы И НенайденныеОбъекты.Количество() > 0 Тогда 
		грОбработкаПакетовИнтеграции.СоздатьДозапросыПоТаблице(
		НенайденныеОбъекты, 
		ПараметрыОбработки.ТаймаутДозапроса, 
		ПараметрыОбработки.КоличествоПопытокБлокировки, 
		ТаблицаИдентификаторовПотоков);
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		Задержка = ПараметрыОбработки.ЗадержкаПриДозапросе;
	КонецЕсли;
	
	Пока ТранзакцияАктивна() Цикл
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	Если НенайденныеОбъекты.Количество() > 0 Тогда 
		
		ПараметрыОбработки.МассоваяЗагрузка = Истина;
		
		Если ПараметрыОбработки.МассоваяЗагрузка Тогда 
			грОбработкаПакетовИнтеграции.ОбработатьИсключениеНенайденныхОбъектов( Идентификатор, НенайденныеОбъекты, ПараметрыОбработки);
		Иначе
			Если ПараметрыОбработки.ВыполнятьДозапросы Тогда 
				ДостигнутТаймаут = грОбработкаПакетовИнтеграции.ОпределитьТаймаутСообщения(
				КоличествоПопытокОжидания, 
				ДатаРегистрации, 
				ПараметрыОбработки);
				Если ДостигнутТаймаут Тогда 
					УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
					ВызватьИсключение "Истекло время ожидания ответов на дозапросы. См. журнал регистрации.";
				Иначе
					УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
				КонецЕсли;
				грОбработкаПакетовИнтеграции.ЗаписатьНенайденныеОбъектыВЖР(НенайденныеОбъекты, Идентификатор,, УровеньЖР);
			Иначе
				грОбработкаПакетовИнтеграции.ОбработатьИсключениеНенайденныхОбъектов( Идентификатор, НенайденныеОбъекты, ПараметрыОбработки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Проведение документа/Отложенное проведение документа
	Для Каждого ДокПровести Из ОбработанныеДокументы Цикл
		Попытка 
			ДокПровести.ОбменДанными.Загрузка = Ложь;
			ДокПровести.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СписокДокументов_ОбработкаПроведения.Добавить(ДокПровести);
		КонецПопытки;
	КонецЦикла;
	
	Если СписокДокументов_ОбработкаПроведения.Количество() Тогда
		Выполнить(грОбработкаПакетовИнтеграции.ПолучитьТекстОбработчика("Служебный_ПроведениеДокументовЕРП", Перечисления.сшпТипыИнтеграции.Исходящая));		
	КонецЕсли;
	
Исключение
	
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
	
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	Если Не ПараметрыОбработки.МассоваяЗагрузка И Найти(ТекстОшибки,"Ошибка блокировки") > 0 Тогда 
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		Задержка = ПараметрыОбработки.ЗадержкаПриНеудачнойБлокировке;
	Иначе
		ВызватьИсключение
		"Ошибка в Datareon при загрузке объекта «" + ИмяТипаОбъекта + "». ID: " + ОбъектСообщение.ID 
		+ ". " + ТекстОшибки;
	КонецЕсли;
	
КонецПопытки;

~Возврат:

Пока ТранзакцияАктивна() Цикл
	ОтменитьТранзакцию();
КонецЦикла;